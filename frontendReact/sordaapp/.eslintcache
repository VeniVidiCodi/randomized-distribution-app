[{"/Users/victorsanchez/Documents/programming/git/randomized-distribution-app/frontendReact/sordaapp/src/index.js":"1","/Users/victorsanchez/Documents/programming/git/randomized-distribution-app/frontendReact/sordaapp/src/components/AppPages/InputPage.js":"2","/Users/victorsanchez/Documents/programming/git/randomized-distribution-app/frontendReact/sordaapp/src/components/AppPages/ResultPage.js":"3","/Users/victorsanchez/Documents/programming/git/randomized-distribution-app/frontendReact/sordaapp/src/components/AppPages/LandingPage.js":"4","/Users/victorsanchez/Documents/programming/git/randomized-distribution-app/frontendReact/sordaapp/src/components/GroupCard/GroupCard.js":"5","/Users/victorsanchez/Documents/programming/git/randomized-distribution-app/frontendReact/sordaapp/src/utils/queries.js":"6","/Users/victorsanchez/Documents/programming/git/randomized-distribution-app/frontendReact/sordaapp/src/components/NewItemButton/NewItemButton.js":"7"},{"size":199,"mtime":1613523508034,"results":"8","hashOfConfig":"9"},{"size":6256,"mtime":1624722208167,"results":"10","hashOfConfig":"9"},{"size":6081,"mtime":1624724515887,"results":"11","hashOfConfig":"9"},{"size":2802,"mtime":1624915254216,"results":"12","hashOfConfig":"9"},{"size":2634,"mtime":1622914306673,"results":"13","hashOfConfig":"9"},{"size":1194,"mtime":1624722208173,"results":"14","hashOfConfig":"9"},{"size":388,"mtime":1614637568426,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1yr8na",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"23"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/victorsanchez/Documents/programming/git/randomized-distribution-app/frontendReact/sordaapp/src/index.js",[],"/Users/victorsanchez/Documents/programming/git/randomized-distribution-app/frontendReact/sordaapp/src/components/AppPages/InputPage.js",[],"/Users/victorsanchez/Documents/programming/git/randomized-distribution-app/frontendReact/sordaapp/src/components/AppPages/ResultPage.js",["33"],"\nimport React, { useState } from 'react';\nimport Nav from '../Nav/Nav';\nimport ResultDisplay from '../ResultDisplay/ResultDisplay';\nimport Footer from '../Footer/Footer';\nimport ResultsTitle from '../ResultsTitle/ResultsTitle';\nimport { Group } from '../../utils/groupClass.js';  //watch out for utils. keep for merge\nimport { Redirect } from 'react-router-dom';\nimport { postRequest } from \"../../utils/queries.js\";\n\nimport \"./ModalPassword.css\";\n\nimport Modal from \"react-modal\";\nModal.setAppElement(\"#root\");\n\n\nfunction ResultsPage(props) {\n\n  let GroupObject = new Group();\n\n  if (props.location.fromLandingPage) {\n    GroupObject = () => {\n       let tempGroup = new Group();\n       tempGroup.persons = props.location.json.persons;\n       tempGroup.groupNames = props.location.json.groupNames;\n       tempGroup.setProjectName(props.location.json.projectName);\n\n       return tempGroup;\n     }\n   } else {\n     GroupObject = props.location.GroupObject;\n   }\n\n\n  // –––––––\n  //  State\n  // –––––––\n\n  const [aGroupObject, setGroupObject] = useState(GroupObject);\n  // const [fromLandingPage, setFromLandingPage] = useState(props.location.fromLandingPage);\n  // const [fromInputPage, setFromInputPage] = useState(props.location.fromInputPage);\n  const [aJson, setAjson] = useState(props.location.json);\n  const [editButtonClicked, setEditButtonClicked] = useState(false);\n  const [saveButtonClicked, setSaveButtonClicked] = useState(false);\n\n  const [isOpen, setIsOpen] = useState(false);\n\n  // Check console to see from which page is being received\n  // console.log(\"FROM LANDING:\", fromLandingPage);\n  // console.log(\"FROM INPUT:\", fromInputPage);\n\n\n  // ––––––––\n  // Behavior\n  // ––––––––\n\n  async function handleOnClickSave() {\n    console.log(\"SAVE BUTTON CLICKED...\");\n    //save to db by using utility component\n\n    const groups = new Group();\n\n    // groups.setProjectName(\"Project Safari\");\n    // groups.addPerson(new Person(\"Lion\", 1));\n    // groups.addPerson(new Person(\"Elephant\", 2));\n    // groups.addGroupNames(new GroupName(\"Section Danger\"));\n    // groups.addGroupNames(new GroupName(\"Section Safe\"));\n    groups.setProjectName(aGroupObject.projectName);\n    groups.persons = aGroupObject.persons;\n    groups.groupNames = aGroupObject.groupNames;\n    var myJSON = JSON.stringify(groups);  //aGroupObject\n\n    console.log(JSON.stringify(JSON.parse(myJSON), null, 2));\n\n    // let json = postRequest(myJSON).then(result => {\n    //   console.log(result);\n    //   return result;\n    // });\n    await call(myJSON);\n\n    setSaveButtonClicked(!saveButtonClicked);\n  }\n\n  async function call(myJSON) {\n     const json = await postRequest(myJSON);  //call the API to get the user data\n      if(json !== null) {\n        console.log(json);\n\n        setAjson(json);\n      } else {\n        console.log(\"No Project returned; Object:null\");\n      }\n  }\n\n  //when the edit button is clicked, setEditButtonClicked is set to true which triggers the conditional below function.\n  function handleOnClickEdit(){\n    if(saveButtonClicked)\n      toggleModal();\n    else if (props.location.fromInputPage)\n      setEditButtonClicked(true);\n    else\n      toggleModal();\n\n  }\n\n  function toggleModal() {\n    setIsOpen(!isOpen);\n  }\n\n\n  //–––––––––\n  //–– Modal\n  //–––––––––\n  const [password, setPassword] = useState(\"\");\n\n  function handleChange(event) {\n    const tempPassword = event.target.value;\n    setPassword(tempPassword);\n    event.preventDefault();\n  }\n\n  function handleSubmit(event) {\n    if (password === aJson.accessPassword)\n      setEditButtonClicked(true);\n    event.preventDefault();\n  }\n\n\n\n  // Checks and sends correct state data type to input page\n  if (editButtonClicked){\n    if (props.location.fromLandingPage) {\n      return <Redirect to={{pathname: '/grouper', json: aJson, fromResultPage: true, fromLandingPage: false, fromInputPage: false}}/>;\n    } else {\n      return <Redirect to={{pathname: '/grouper', GroupObject: aGroupObject, fromResultPage: true, fromLandingPage: false, fromInputPage: false}}/>;\n    }\n  }\n\n  function displayModal() {\n    return(\n    <Modal\n      isOpen={isOpen}\n      onRequestClose={toggleModal}\n      contentLabel=\"My dialog\"\n      className=\"mymodal\"\n      overlayClassName=\"myoverlay\"\n      closeTimeoutMS={250}\n      shouldCloseOnOverlayClick={false}\n      >\n      <div className=\"projectIDText\">Project ID: {aJson.uniqueID}</div>\n      <div className=\"inputPasswordField\">\n        <form onSubmit={handleSubmit}>\n          <input\n            value={password}\n            onChange={handleChange}\n            type=\"text\"\n            name=\"AccessID\"\n            placeholder=\"Enter Passcode\"\n            className=\"textField\"\n            maxLength=\"7\" />\n          <button type=\"submit\" name=\"getResultsPage\" className=\"submit\">GO</button>\n        </form>\n      </div>\n      <button className=\"closeButton\" onClick={toggleModal}>Close</button>\n    </Modal>\n    );\n  }\n\n  function resultsTitle() {\n    if (props.location.fromLandingPage || saveButtonClicked) {\n      return(\n        <ResultsTitle title={aGroupObject.projectName} accessID={aJson.uniqueID} useJson={true}/>\n      )\n    }\n    else {\n      return(\n        <ResultsTitle title={aGroupObject.projectName} useJson={false}/>\n      )\n    }\n  }\n\n\n  return (\n      <div className=\"page-wrapper\">\n        <header>\n          <Nav />\n          {resultsTitle()}\n        </header>\n        <main id=\"entry-container\">\n          <ResultDisplay groupObject={aGroupObject}/>\n        </main>\n          <Footer\n            // value=\"Save\"\n            fromInputPage={props.location.fromInputPage}  /* need fromLandingPage boolean */\n            fromLandingPage={props.location.fromLandingPage}\n            saveButtonClicked={saveButtonClicked}\n            onClickEdit={handleOnClickEdit}\n            onClickSave={handleOnClickSave}/>\n          {(props.location.fromLandingPage || saveButtonClicked) ? displayModal() : null}\n\n      </div>\n\n  );\n\n}\n\nexport default ResultsPage;\n",["34","35"],"/Users/victorsanchez/Documents/programming/git/randomized-distribution-app/frontendReact/sordaapp/src/components/AppPages/LandingPage.js",[],"/Users/victorsanchez/Documents/programming/git/randomized-distribution-app/frontendReact/sordaapp/src/components/GroupCard/GroupCard.js",["36"],"import e from 'cors';\nimport React, { useState } from 'react';\nimport './GroupCard.css';\n\n\nfunction GroupCard(props) {\n    const [showTitle, setShowTitle] = useState(true);\n    const [title, setTitle] = useState(props.title);\n\n    const handleChange = e => {\n        // console.log(e.target.value);\n        setTitle(e.target.value);\n    }\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        toggleTitle();\n        props.updateGroupTitle(title, props.index);\n    }\n\n    const handleKeypress = e => {\n        //it triggers by pressing the enter key\n        if (e.keyCode === 13) {\n        handleSubmit(e, props.index);\n        }\n    };\n    \n    const toggleTitle = () => {\n        if (showTitle) {\n            // console.log(\"T -> F\");\n            setShowTitle(false);\n        } else {\n            // console.log(\"F -> T\");\n            setShowTitle(true);\n        };\n    }\n\n\n    return(\n        <div className=\"group-container\">\n            <div className=\"group-card--header\">\n                { showTitle ?\n                    <div className=\"group-title\" onClick={toggleTitle}>{title}</div>\n                    :\n                    <form className=\"input-wrapper\" >\n                        <label>\n                            <input \n                                id=\"project-title--input\" \n                                type=\"text\" \n                                name=\"name\" \n                                placeholder={title} \n                                onChange={handleChange} \n                                onKeyPress={handleKeypress} \n                                value={title} \n                                autoFocus\n                            />\n                        </label>\n                        <input className=\"title-submit-button\" onClick={handleSubmit} type=\"submit\" value=\"✓\" />\n                        {/* <input className=\"title-submit-button\" onClick={toggleTitle} type=\"submit\" value=\"✓\" /> */}\n                    </form>\n                }\n\n                <button className=\"group-del-btn\" onClick={props.deleteGroup} value={props.index}>x</button>\n            </div>\n            \n            <div className=\"group-items--display\">\n                {/* Render Groups for ResultPage */}\n                {/* <ResultItem entry={entries[0]} /> */}\n                {/* {this.state.entries.map((entry) => \n                    <GroupListItem entry={entry} />\n                    // <GroupListItem>{entry}</GroupListItem>\n                )} */}\n            </div>\n            {/* <div className=\"group-del-btn2\">x</div> */}\n        </div>\n    );\n}\n\nexport default GroupCard;","/Users/victorsanchez/Documents/programming/git/randomized-distribution-app/frontendReact/sordaapp/src/utils/queries.js",[],"/Users/victorsanchez/Documents/programming/git/randomized-distribution-app/frontendReact/sordaapp/src/components/NewItemButton/NewItemButton.js",[],{"ruleId":"37","severity":1,"message":"38","line":39,"column":24,"nodeType":"39","messageId":"40","endLine":39,"endColumn":38},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"37","severity":1,"message":"45","line":1,"column":8,"nodeType":"39","messageId":"40","endLine":1,"endColumn":9},"no-unused-vars","'setGroupObject' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["46"],"no-negated-in-lhs",["47"],"'e' is defined but never used.","no-global-assign","no-unsafe-negation"]