{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/victorsanchez/Documents/programming/git/randomized-distribution-app/frontendReact/sordaapp/src/components/RosterSection/RosterSection.js\";\nimport React, { useEffect, useState } from 'react';\nimport './RosterSection.css';\nimport RosterItem from '../RosterItem/RosterItem';\nimport NewItemButton from '../NewItemButton/NewItemButton';\nimport { nanoid } from 'nanoid';\n\nfunction RosterSection(props) {\n  const rosterMax = 40; // const rosterMin = props.rosterItems;\n  // // CREATE GENERIC LIST ITEMS BASED ON CHOSEN MENU SELECT OPTION \n  // generateItems(num) {\n  //     console.log('Generate roster list based on...', num);\n  //     let roster = [];    // Reset the roster items array\n  //     let showRoster = this.state.showRoster;\n  //     // Populate the roster array with chosen number of entries\n  //     for (let i=0; i<num; i++) {\n  //         let genericName = \"Item \" + (i + 1);\n  //         let key = nanoid();\n  //         let item = {                // TO DO:  Replace with formatted class?\n  //             description: genericName,\n  //             key : key,\n  //             group: null\n  //         }\n  //         roster.push(item);\n  //     }\n  //     this.setState({\n  //         roster: roster\n  //     });\n  // }\n  //     // Add multiple entries to group array from MODAL INPUT\n  //     const generateRoster = (e) => {\n  //         console.log(\"Generating multiple roster items...\");\n  //         let qty = e.target.innerText;\n  //         // let groups = this.state.groups;\n  //         // let showAddButton = this.state.showAddButton;\n  //         // showAddButton = false;\n  //         // Populate the groups array with chosen number of entries\n  //         for (let i=0; i<qty; i++) {\n  //             this.addItem();\n  //         }\n  //         // this.setState({\n  //         //     groups: groups,\n  //         //     showGroupMenu: showGroupMenu\n  //         // });\n  //     }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"roster-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"roster-section-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"roster-header-caption\",\n        children: \"Roster Items\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 21\n      }, this), props.rosterItems.length < rosterMax ? /*#__PURE__*/_jsxDEV(NewItemButton, {\n        onClick: props.addItem\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"roster-items-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"roster-display-wrapper\",\n        children: props.rosterItems.map((item, index) => /*#__PURE__*/_jsxDEV(RosterItem, {\n          title: item.name,\n          index: index,\n          updateItemName: props.updateItemName,\n          deleteItem: props.deleteItem\n        }, nanoid(), false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 13\n  }, this);\n}\n\n_c = RosterSection;\nexport default RosterSection;\n\nvar _c;\n\n$RefreshReg$(_c, \"RosterSection\");","map":{"version":3,"sources":["/Users/victorsanchez/Documents/programming/git/randomized-distribution-app/frontendReact/sordaapp/src/components/RosterSection/RosterSection.js"],"names":["React","useEffect","useState","RosterItem","NewItemButton","nanoid","RosterSection","props","rosterMax","rosterItems","length","addItem","map","item","index","name","updateItemName","deleteItem"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,qBAAP;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,aAAP,MAA0B,gCAA1B;AACA,SAASC,MAAT,QAAuB,QAAvB;;AAEA,SAASC,aAAT,CAAwBC,KAAxB,EAA+B;AAC3B,QAAMC,SAAS,GAAG,EAAlB,CAD2B,CAE3B;AAGA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAGJ;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAGQ,sBACI;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA,4BAEI;AAAQ,MAAA,SAAS,EAAC,uBAAlB;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAIKD,KAAK,CAACE,WAAN,CAAkBC,MAAlB,GAA2BF,SAA3B,gBACG,QAAC,aAAD;AAAe,QAAA,OAAO,EAAED,KAAK,CAACI;AAA9B;AAAA;AAAA;AAAA;AAAA,cADH,gBAEG;AAAA;AAAA;AAAA;AAAA,cANR;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAYI;AAAK,MAAA,SAAS,EAAC,wBAAf;AAAA,6BACI;AAAK,QAAA,EAAE,EAAC,wBAAR;AAAA,kBACKJ,KAAK,CAACE,WAAN,CAAkBG,GAAlB,CAAsB,CAACC,IAAD,EAAOC,KAAP,kBACnB,QAAC,UAAD;AAEI,UAAA,KAAK,EAAED,IAAI,CAACE,IAFhB;AAGI,UAAA,KAAK,EAAED,KAHX;AAII,UAAA,cAAc,EAAEP,KAAK,CAACS,cAJ1B;AAKI,UAAA,UAAU,EAAET,KAAK,CAACU;AALtB,WACSZ,MAAM,EADf;AAAA;AAAA;AAAA;AAAA,gBADH;AADL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAZJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA6BH;;KAhFIC,a;AAiFT,eAAeA,aAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './RosterSection.css';\nimport RosterItem from '../RosterItem/RosterItem';\nimport NewItemButton from '../NewItemButton/NewItemButton';\nimport { nanoid } from 'nanoid';\n\nfunction RosterSection (props) {\n    const rosterMax = 40;\n    // const rosterMin = props.rosterItems;\n    \n\n    // // CREATE GENERIC LIST ITEMS BASED ON CHOSEN MENU SELECT OPTION \n    // generateItems(num) {\n    //     console.log('Generate roster list based on...', num);\n\n    //     let roster = [];    // Reset the roster items array\n    //     let showRoster = this.state.showRoster;\n\n    //     // Populate the roster array with chosen number of entries\n    //     for (let i=0; i<num; i++) {\n    //         let genericName = \"Item \" + (i + 1);\n    //         let key = nanoid();\n    //         let item = {                // TO DO:  Replace with formatted class?\n    //             description: genericName,\n    //             key : key,\n    //             group: null\n    //         }\n\n    //         roster.push(item);\n    //     }\n\n    //     this.setState({\n    //         roster: roster\n    //     });\n    // }\n    \n\n//     // Add multiple entries to group array from MODAL INPUT\n//     const generateRoster = (e) => {\n//         console.log(\"Generating multiple roster items...\");\n//         let qty = e.target.innerText;\n//         // let groups = this.state.groups;\n//         // let showAddButton = this.state.showAddButton;\n//         // showAddButton = false;\n\n//         // Populate the groups array with chosen number of entries\n//         for (let i=0; i<qty; i++) {\n//             this.addItem();\n//         }\n\n//         // this.setState({\n//         //     groups: groups,\n//         //     showGroupMenu: showGroupMenu\n//         // });\n//     }\n\n\n        return (\n            <div className=\"roster-section\">\n\n                <header className=\"roster-section-header\">\n                    <div className=\"roster-header-caption\">\n                        Roster Items\n                    </div>\n                    {props.rosterItems.length < rosterMax ? \n                        <NewItemButton onClick={props.addItem} /> :\n                        <div></div>\n                    } \n                </header>\n\n                <div className=\"roster-items-container\">\n                    <div id=\"roster-display-wrapper\">\n                        {props.rosterItems.map((item, index) => \n                            <RosterItem \n                                key={nanoid()} \n                                title={item.name}\n                                index={index}\n                                updateItemName={props.updateItemName}\n                                deleteItem={props.deleteItem} \n                            />\n                        )}\n                    </div>\n                </div>\n                \n            </div>\n        )\n    }\nexport default RosterSection;"]},"metadata":{},"sourceType":"module"}