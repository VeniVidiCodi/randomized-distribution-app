{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/kenlyberkowitz/Documents/Working_Folder/express-projects/randomized-distribution-app/frontendReact/sordaapp/src/components/RosterSection/RosterSection.js\";\nimport React, { useEffect, useState } from 'react';\nimport './RosterSection.css';\nimport RosterItem from '../RosterItem/RosterItem';\nimport NewItemButton from '../NewItemButton/NewItemButton';\nimport { nanoid } from 'nanoid';\n\nfunction RosterSection(props) {\n  const rosterMax = 30;\n\n  function handleArrayFromInputCSV(arrayFromInputCSV) {\n    props.handleArrayFromRosterSection(arrayFromInputCSV);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"roster-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"roster-section-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"roster-header-caption\",\n        children: \"Roster/Items\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(InputCSV, {\n        className: \"csvInputModal\",\n        handleArray: handleArrayFromInputCSV\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 15\n      }, this), props.rosterItems.length < rosterMax ? /*#__PURE__*/_jsxDEV(NewItemButton, {\n        onClick: props.addItem\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 19\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"roster-items-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"roster-display-wrapper\",\n        children: props.rosterItems.map((item, index) => /*#__PURE__*/_jsxDEV(RosterItem, {\n          title: item.name,\n          index: index,\n          updateItemName: props.updateItemName,\n          deleteItem: props.deleteItem\n        }, nanoid(), false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 23\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 7\n  }, this);\n}\n\n_c = RosterSection;\nexport default RosterSection; // const rosterMin = props.rosterItems;\n// // CREATE GENERIC LIST ITEMS BASED ON CHOSEN MENU SELECT OPTION\n// generateItems(num) {\n//     console.log('Generate roster list based on...', num);\n//     let roster = [];    // Reset the roster items array\n//     let showRoster = this.state.showRoster;\n//     // Populate the roster array with chosen number of entries\n//     for (let i=0; i<num; i++) {\n//         let genericName = \"Item \" + (i + 1);\n//         let key = nanoid();\n//         let item = {                // TO DO:  Replace with formatted class?\n//             description: genericName,\n//             key : key,\n//             group: null\n//         }\n//         roster.push(item);\n//     }\n//     this.setState({\n//         roster: roster\n//     });\n// }\n//     // Add multiple entries to group array from MODAL INPUT\n//     const generateRoster = (e) => {\n//         console.log(\"Generating multiple roster items...\");\n//         let qty = e.target.innerText;\n//         // let groups = this.state.groups;\n//         // let showAddButton = this.state.showAddButton;\n//         // showAddButton = false;\n//         // Populate the groups array with chosen number of entries\n//         for (let i=0; i<qty; i++) {\n//             this.addItem();\n//         }\n//         // this.setState({\n//         //     groups: groups,\n//         //     showGroupMenu: showGroupMenu\n//         // });\n//     }\n\nvar _c;\n\n$RefreshReg$(_c, \"RosterSection\");","map":{"version":3,"sources":["/Users/kenlyberkowitz/Documents/Working_Folder/express-projects/randomized-distribution-app/frontendReact/sordaapp/src/components/RosterSection/RosterSection.js"],"names":["React","useEffect","useState","RosterItem","NewItemButton","nanoid","RosterSection","props","rosterMax","handleArrayFromInputCSV","arrayFromInputCSV","handleArrayFromRosterSection","rosterItems","length","addItem","map","item","index","name","updateItemName","deleteItem"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,qBAAP;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,aAAP,MAA0B,gCAA1B;AACA,SAASC,MAAT,QAAuB,QAAvB;;AAEA,SAASC,aAAT,CAAwBC,KAAxB,EAA+B;AAC7B,QAAMC,SAAS,GAAG,EAAlB;;AAEA,WAASC,uBAAT,CAAiCC,iBAAjC,EAAoD;AAClDH,IAAAA,KAAK,CAACI,4BAAN,CAAmCD,iBAAnC;AACD;;AAED,sBACI;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA,4BACI;AAAQ,MAAA,SAAS,EAAC,uBAAlB;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAII,QAAC,QAAD;AAAU,QAAA,SAAS,EAAC,eAApB;AAAoC,QAAA,WAAW,EAAED;AAAjD;AAAA;AAAA;AAAA;AAAA,cAJJ,EAKKF,KAAK,CAACK,WAAN,CAAkBC,MAAlB,GAA2BL,SAA3B,gBACG,QAAC,aAAD;AAAe,QAAA,OAAO,EAAED,KAAK,CAACO;AAA9B;AAAA;AAAA;AAAA;AAAA,cADH,gBAEG;AAAA;AAAA;AAAA;AAAA,cAPR;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAWI;AAAK,MAAA,SAAS,EAAC,wBAAf;AAAA,6BACI;AAAK,QAAA,EAAE,EAAC,wBAAR;AAAA,kBACKP,KAAK,CAACK,WAAN,CAAkBG,GAAlB,CAAsB,CAACC,IAAD,EAAOC,KAAP,kBACnB,QAAC,UAAD;AAEI,UAAA,KAAK,EAAED,IAAI,CAACE,IAFhB;AAGI,UAAA,KAAK,EAAED,KAHX;AAII,UAAA,cAAc,EAAEV,KAAK,CAACY,cAJ1B;AAKI,UAAA,UAAU,EAAEZ,KAAK,CAACa;AALtB,WACSf,MAAM,EADf;AAAA;AAAA;AAAA;AAAA,gBADH;AADL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAXJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA2BD;;KAlCQC,a;AAmCT,eAAeA,aAAf,C,CAIA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './RosterSection.css';\nimport RosterItem from '../RosterItem/RosterItem';\nimport NewItemButton from '../NewItemButton/NewItemButton';\nimport { nanoid } from 'nanoid';\n\nfunction RosterSection (props) {\n  const rosterMax = 30;\n\n  function handleArrayFromInputCSV(arrayFromInputCSV) {\n    props.handleArrayFromRosterSection(arrayFromInputCSV);\n  }\n\n  return (\n      <div className=\"roster-section\">\n          <header className=\"roster-section-header\">\n              <div className=\"roster-header-caption\">\n                  Roster/Items\n              </div>\n              <InputCSV className='csvInputModal' handleArray={handleArrayFromInputCSV}/>\n              {props.rosterItems.length < rosterMax ?\n                  <NewItemButton onClick={props.addItem} /> :\n                  <div></div>\n              }\n          </header>\n          <div className=\"roster-items-container\">\n              <div id=\"roster-display-wrapper\">\n                  {props.rosterItems.map((item, index) =>\n                      <RosterItem\n                          key={nanoid()}\n                          title={item.name}\n                          index={index}\n                          updateItemName={props.updateItemName}\n                          deleteItem={props.deleteItem}\n                      />\n                  )}\n              </div>\n          </div>\n      </div>\n  )\n}\nexport default RosterSection;\n\n\n\n// const rosterMin = props.rosterItems;\n\n\n// // CREATE GENERIC LIST ITEMS BASED ON CHOSEN MENU SELECT OPTION\n// generateItems(num) {\n//     console.log('Generate roster list based on...', num);\n\n//     let roster = [];    // Reset the roster items array\n//     let showRoster = this.state.showRoster;\n\n//     // Populate the roster array with chosen number of entries\n//     for (let i=0; i<num; i++) {\n//         let genericName = \"Item \" + (i + 1);\n//         let key = nanoid();\n//         let item = {                // TO DO:  Replace with formatted class?\n//             description: genericName,\n//             key : key,\n//             group: null\n//         }\n\n//         roster.push(item);\n//     }\n\n//     this.setState({\n//         roster: roster\n//     });\n// }\n\n\n//     // Add multiple entries to group array from MODAL INPUT\n//     const generateRoster = (e) => {\n//         console.log(\"Generating multiple roster items...\");\n//         let qty = e.target.innerText;\n//         // let groups = this.state.groups;\n//         // let showAddButton = this.state.showAddButton;\n//         // showAddButton = false;\n\n//         // Populate the groups array with chosen number of entries\n//         for (let i=0; i<qty; i++) {\n//             this.addItem();\n//         }\n\n//         // this.setState({\n//         //     groups: groups,\n//         //     showGroupMenu: showGroupMenu\n//         // });\n//     }\n"]},"metadata":{},"sourceType":"module"}