{"ast":null,"code":"var _jsxFileName = \"/Users/victorsanchez/Documents/programming/git/randomized-distribution-app/frontendReact/sordaapp/src/components/GroupSection/GroupSection.js\",\n    _s = $RefreshSig$();\n\n// import React, { Component } from 'react';\nimport React, { useState, useEffect } from 'react';\nimport './GroupSection.css';\nimport NewGroupButton from '../NewGroupButton/NewGroupButton';\nimport GroupCard from '../GroupCard/GroupCard';\nimport { nanoid } from 'nanoid';\nimport { Group } from '../../groupClass.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction GroupSection(groupNames) {\n  _s();\n\n  console.log(\"GroupObject transfer test:\", groupNames);\n  const [aGroupNames, setAGroupNames] = useState(groupNames);\n  console.log(aGroupNames); // let [aGroupNames, setGroupNames] = useState(GroupObject.groupNames);\n\n  const max = 8;\n  const min = 2; // constructor(props) {\n  //     super(props);\n  //     this.state = {\n  //         max: 8,\n  //         min: 2,\n  //         GroupObject: this.props.GroupObject,\n  //         groups: []\n  //         // GroupObject: this.props.GroupObject,\n  //         // groups: this.props.GroupObject.groupNames\n  //         // addGroup: this.props.addGroup\n  //     }\n  //     this.createNewGroup = this.createNewGroup.bind(this);\n  //     this.addGroup = this.addGroup.bind(this);\n  //     // this.generateGroups = this.generateGroups.bind(this);\n  // }    \n  // TRIAL CLASS FUNCTIONS ---------------------------------------------\n  // createNewGroup() { \n  // let length = this.state.groups.length;\n  // console.log(length);\n  // }\n\n  let addGroup = () => {\n    console.log(\"addGroup clicked...\"); // let length = this.state.groups.length;\n    // console.log(length)\n\n    let tempGroups = aGroupNames;\n    tempGroups.groupNames = setAGroupNames('MMM');\n    console.log(tempGroups); // tempGroups.groupNames = \n    // tempGroups.groups = \n    // let newGroupArr = addGroupNames('Group ' + (length + 1));\n  }; // EVENT HANDLERS ---------------------------------------------\n  // createNewGroup() {\n  //     console.log(\"CREATING NEW GROUP...\");\n  //     const groups = this.state.groups;\n  //     const length  = groups.length;\n  //     // const id = length;\n  //     const groupName = \"Group \" + (length + 1);\n  //     // const key = nanoid();\n  //     const group = { \n  //         groupName: groupName,\n  //         // key: key\n  //     }\n  //     console.log('NEW GROUP:', group);\n  //     return groupName;\n  // }\n  // Add entry to state's group array\n  // addGroup() {\n  //     console.log(\"ADDING NEW GROUP...\");\n  //     const groups = this.state.groups;\n  //     const group = this.createNewGroup();\n  //     groups.push(group);\n  //     console.log('GROUPS ARRAY:', groups);\n  //     this.setState({groups: groups});\n  // }\n  // Add multiple entries to group array from MODAL INPUT\n  // generateGroups(e) {\n  //     console.log(\"Generating multiple groups...\");\n  //     let qty = e.target.innerText;\n  //     // let groups = this.state.groups;\n  //     // let showAddButton = this.state.showAddButton;\n  //     // showAddButton = false;\n  //     // Populate the groups array with chosen number of entries\n  //     for (let i=0; i<qty; i++) {\n  //         this.addGroup();\n  //     }\n  //     // this.setState({\n  //     //     groups: groups,\n  //     //     showGroupMenu: showGroupMenu\n  //     // });\n  // }\n  // removeGroup = index => {\n  //     console.log(\"Removing Group...\");\n  //     console.log(\"Index:\", index);\n  //     // Targeting element\n  //     const groups = this.state.groups;\n  //     // console.log(\"ID:\", groups[e]);\n  //     const target = groups[index];\n  //     console.log(\"TARGET:\", target);\n  //     groups.splice(index, 1);\n  //     console.log(groups);\n  //     this.setState({groups: groups});\n  // }\n  // let changeName = group => {\n  //     console.log('changing name...');\n  //     const name = group.groupName;\n  //     console.log(name);\n  //     const groups = this.state.groups;\n  //     console.log('current groups:', groups);\n  //     // this.setState({groups: groups})\n  // }\n  // console.log(this.state.GroupObject);\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"group-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"group-section-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"group-header-caption\",\n        children: \"Groups\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(NewGroupButton, {\n        onClick: addGroup\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"group-items-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"groups-display-wrapper\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 13\n  }, this);\n}\n\n_s(GroupSection, \"KvGf26CzwmBcJAGbhTn/m5hhGBA=\");\n\n_c = GroupSection;\nexport default GroupSection;\n\nvar _c;\n\n$RefreshReg$(_c, \"GroupSection\");","map":{"version":3,"sources":["/Users/victorsanchez/Documents/programming/git/randomized-distribution-app/frontendReact/sordaapp/src/components/GroupSection/GroupSection.js"],"names":["React","useState","useEffect","NewGroupButton","GroupCard","nanoid","Group","GroupSection","groupNames","console","log","aGroupNames","setAGroupNames","max","min","addGroup","tempGroups"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,oBAAP;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,KAAT,QAAsB,qBAAtB;;;AAGA,SAASC,YAAT,CAAsBC,UAAtB,EAAkC;AAAA;;AAC9BC,EAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CF,UAA1C;AACA,QAAM,CAACG,WAAD,EAAcC,cAAd,IAAgCX,QAAQ,CAACO,UAAD,CAA9C;AAGAC,EAAAA,OAAO,CAACC,GAAR,CAAYC,WAAZ,EAL8B,CAM9B;;AAEA,QAAME,GAAG,GAAG,CAAZ;AACA,QAAMC,GAAG,GAAG,CAAZ,CAT8B,CAW9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACI;AACA;AACJ;;AAEA,MAAIC,QAAQ,GAAG,MAAM;AACjBN,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EADiB,CAEjB;AACA;;AACA,QAAIM,UAAU,GAAGL,WAAjB;AACAK,IAAAA,UAAU,CAACR,UAAX,GAAwBI,cAAc,CAAC,KAAD,CAAtC;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAYM,UAAZ,EANiB,CAQjB;AAEA;AACA;AAEH,GAbD,CAlC8B,CAkD9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEI;;;AACA,sBACI;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA,4BAEI;AAAQ,MAAA,SAAS,EAAC,sBAAlB;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAGY,QAAC,cAAD;AAAgB,QAAA,OAAO,EAAED;AAAzB;AAAA;AAAA;AAAA;AAAA,cAHZ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAUI;AAAK,MAAA,SAAS,EAAC,uBAAf;AAAA,6BACI;AAAK,QAAA,EAAE,EAAC;AAAR;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAVJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA0BH;;GAnJIR,Y;;KAAAA,Y;AAqJT,eAAeA,YAAf","sourcesContent":["// import React, { Component } from 'react';\nimport React, { useState, useEffect } from 'react';\nimport './GroupSection.css';\nimport NewGroupButton from '../NewGroupButton/NewGroupButton';\nimport GroupCard from '../GroupCard/GroupCard';\nimport { nanoid } from 'nanoid';\nimport { Group } from '../../groupClass.js';\n\n\nfunction GroupSection(groupNames) {\n    console.log(\"GroupObject transfer test:\", groupNames);\n    const [aGroupNames, setAGroupNames] = useState(groupNames);\n\n\n    console.log(aGroupNames);\n    // let [aGroupNames, setGroupNames] = useState(GroupObject.groupNames);\n\n    const max = 8;\n    const min = 2;\n\n    // constructor(props) {\n    //     super(props);\n    //     this.state = {\n    //         max: 8,\n    //         min: 2,\n    //         GroupObject: this.props.GroupObject,\n    //         groups: []\n    //         // GroupObject: this.props.GroupObject,\n    //         // groups: this.props.GroupObject.groupNames\n    //         // addGroup: this.props.addGroup\n    //     }\n    //     this.createNewGroup = this.createNewGroup.bind(this);\n    //     this.addGroup = this.addGroup.bind(this);\n    //     // this.generateGroups = this.generateGroups.bind(this);\n    // }    \n\n\n    // TRIAL CLASS FUNCTIONS ---------------------------------------------\n    // createNewGroup() { \n        // let length = this.state.groups.length;\n        // console.log(length);\n    // }\n\n    let addGroup = () => {\n        console.log(\"addGroup clicked...\");\n        // let length = this.state.groups.length;\n        // console.log(length)\n        let tempGroups = aGroupNames;\n        tempGroups.groupNames = setAGroupNames('MMM');\n        console.log(tempGroups);\n\n        // tempGroups.groupNames = \n\n        // tempGroups.groups = \n        // let newGroupArr = addGroupNames('Group ' + (length + 1));\n\n    }\n\n\n    // EVENT HANDLERS ---------------------------------------------\n    // createNewGroup() {\n    //     console.log(\"CREATING NEW GROUP...\");\n    //     const groups = this.state.groups;\n    //     const length  = groups.length;\n    //     // const id = length;\n    //     const groupName = \"Group \" + (length + 1);\n    //     // const key = nanoid();\n    //     const group = { \n    //         groupName: groupName,\n    //         // key: key\n    //     }\n    //     console.log('NEW GROUP:', group);\n    //     return groupName;\n    // }\n\n    // Add entry to state's group array\n    // addGroup() {\n    //     console.log(\"ADDING NEW GROUP...\");\n    //     const groups = this.state.groups;\n    //     const group = this.createNewGroup();\n    //     groups.push(group);\n    //     console.log('GROUPS ARRAY:', groups);\n    //     this.setState({groups: groups});\n    // }\n\n    // Add multiple entries to group array from MODAL INPUT\n    // generateGroups(e) {\n    //     console.log(\"Generating multiple groups...\");\n    //     let qty = e.target.innerText;\n    //     // let groups = this.state.groups;\n    //     // let showAddButton = this.state.showAddButton;\n    //     // showAddButton = false;\n\n    //     // Populate the groups array with chosen number of entries\n    //     for (let i=0; i<qty; i++) {\n    //         this.addGroup();\n    //     }\n\n    //     // this.setState({\n    //     //     groups: groups,\n    //     //     showGroupMenu: showGroupMenu\n    //     // });\n    // }\n\n    // removeGroup = index => {\n    //     console.log(\"Removing Group...\");\n    //     console.log(\"Index:\", index);\n\n    //     // Targeting element\n    //     const groups = this.state.groups;\n    //     // console.log(\"ID:\", groups[e]);\n    //     const target = groups[index];\n    //     console.log(\"TARGET:\", target);\n\n    //     groups.splice(index, 1);\n    //     console.log(groups);\n\n    //     this.setState({groups: groups});\n    // }\n\n    // let changeName = group => {\n    //     console.log('changing name...');\n    //     const name = group.groupName;\n    //     console.log(name);\n    //     const groups = this.state.groups;\n    //     console.log('current groups:', groups);\n    //     // this.setState({groups: groups})\n    // }\n\n        // console.log(this.state.GroupObject);\n        return (\n            <div className=\"group-section\">\n\n                <header className=\"group-section-header\">\n                    <div className=\"group-header-caption\">Groups</div>\n                    {/* {this.props.groupNames.length < max ?  */}\n                            <NewGroupButton onClick={addGroup} /> \n                            {/* : <div></div>\n                        } */}\n                </header>\n\n                <div className=\"group-items-container\">\n                    <div id=\"groups-display-wrapper\">\n                        {/* {this.state.groups.map((group, index) => \n                            <GroupCard \n                                // key={group.key} \n                                key={nanoid()} \n                                title={group}\n                                handleChange={() => this.changeName(group)}\n                                delete={() => this.removeGroup(index)} />\n                        )} */}\n                    </div>\n                </div>   \n                    \n            </div>\n        );\n    }\n\nexport default GroupSection;"]},"metadata":{},"sourceType":"module"}