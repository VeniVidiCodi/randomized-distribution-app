{"ast":null,"code":"var _jsxFileName = \"/Users/victorsanchez/Documents/programming/git/randomized-distribution-app/frontendReact/sordaapp/src/components/AppPages/InputPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Nav from '../Nav/Nav';\nimport TitleBar from '../TitleBar/TitleBar';\nimport GroupSection from '../GroupSection/GroupSection';\nimport RosterSection from '../RosterSection/RosterSection';\nimport Footer from '../Footer/Footer';\nimport { Group, GroupName, Person } from '../../utils/groupClass';\nimport e from 'cors';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction InputPage() {\n  _s();\n\n  let GroupObject = new Group();\n  GroupObject.setProjectName(\"My Project\"); // GroupObject.groupNames = ['food', 'music', 'decor'];\n\n  const [aGroupObject, setAGroupObject] = useState(GroupObject); // const [aProjectName, setAProjectName] = useState(GroupObject.projectName);\n\n  const [aGroupNames, setAGroupNames] = useState(GroupObject.groupNames); // const [aPersons, setAPersons] = useState(GroupObject.persons);\n  // const [showTitle, setShowTitle] = useState(true);\n  // Emulate componentDidMount lifecycle(s)  = = = = = = = = = = = = = = = = = = = = =\n  // useEffect(() => {\n  //     console.log(\"use effect group state\");\n  // })\n  // Title Behavior  = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\n  let updateProjectName = title => {\n    console.log('Updating Project Name: ' + title);\n    setAGroupObject(aGroupObject => ({ ...aGroupObject,\n      projectName: title\n    })); //This is finally working \n  }; // Group Section Behavior  = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\n\n  let addGroup = () => {\n    console.log(\"addGroup clicked...\");\n    let tempGroupObject = aGroupObject;\n    let newName = \"Group \" + (aGroupNames.length + 1);\n    let newGroupName = new GroupName(newName);\n    tempGroupObject.groupNames.push(newGroupName); // the class Group method 'addGroupNames' doesn't work here and seems to be redundant\n\n    let newGroupNames = tempGroupObject.groupNames;\n    console.log(newGroupNames);\n    setAGroupObject(aGroupObject => ({ ...aGroupObject,\n      groupNames: newGroupNames\n    }));\n  };\n\n  let deleteGroup = e => {\n    let index = e.target.value;\n    console.log(\"Deleting Group... \", index);\n    let tempGroupObject = aGroupObject;\n    let newGroupNames = tempGroupObject.groupNames; // console.log(newGroupNames);\n\n    newGroupNames.splice(index, 1); // console.log(tempGroupObject.groupNames);\n\n    setAGroupObject(aGroupObject => ({ ...aGroupObject,\n      groupNames: newGroupNames\n    }));\n  };\n\n  let setGroupTitle = (e, index) => {\n    let title = e.target.value;\n    console.log(\"setGroup Index:\", index, \"Title:\", title);\n    let newGroupNames = aGroupObject.groupNames;\n    newGroupNames[index].name = title; // let newGroupName = new GroupName(title);\n    // newGroupNames[index] = newGroupName;\n\n    console.log(newGroupNames);\n    setAGroupObject(aGroupObject => ({ ...aGroupObject,\n      groupNames: newGroupNames\n    }));\n  }; // Footer Button Handler  = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\n\n  let shuffleData = () => {\n    console.log(\"shuffle clicked...\"); // Shuffle Roster Items randomly\n    // Assign each roster item a group #\n    // Save shuffled data as new group object\n\n    saveProject(); // return <Redirect push to={{ pathname: '/results', groupObject: aProjectState, fromInput=true }} />\n  };\n\n  let saveProject = () => {\n    console.log('saving shuffled project...'); // let tempGroupObject = aGroupObject;\n    // tempGroupObject.projectName = aProjectName;\n    // tempGroupObject.groupNames = aGroupNames;\n    // // tempGroupObject.persons = aPersons;\n    // console.log('new object to save:', tempGroupObject);\n    // setAGroupObject(tempGroupObject);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(Nav, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(TitleBar, {\n        title: aGroupObject.projectName,\n        updateTitle: updateProjectName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      id: \"entry-container\",\n      children: [/*#__PURE__*/_jsxDEV(GroupSection, {\n        groupNames: aGroupNames,\n        addGroup: addGroup,\n        deleteGroup: deleteGroup,\n        updateGroupTitle: setGroupTitle // setGroupNames={setAGroupNames}\n        // handleChange={handleGroupChange}\n        // setGroupNames={(group) => setAGroupNames(group)} \n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(RosterSection, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {\n      GroupObject: aGroupObject,\n      value: \"Shuffle\",\n      text: \"Shuffle\",\n      onClick: shuffleData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 9\n  }, this);\n}\n\n_s(InputPage, \"zXslh8bmChvbTAHbl5SbKr95LUg=\");\n\n_c = InputPage;\nexport default InputPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"InputPage\");","map":{"version":3,"sources":["/Users/victorsanchez/Documents/programming/git/randomized-distribution-app/frontendReact/sordaapp/src/components/AppPages/InputPage.js"],"names":["React","useState","useEffect","Nav","TitleBar","GroupSection","RosterSection","Footer","Group","GroupName","Person","e","InputPage","GroupObject","setProjectName","aGroupObject","setAGroupObject","aGroupNames","setAGroupNames","groupNames","updateProjectName","title","console","log","projectName","addGroup","tempGroupObject","newName","length","newGroupName","push","newGroupNames","deleteGroup","index","target","value","splice","setGroupTitle","name","shuffleData","saveProject"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Nav from '../Nav/Nav';\nimport TitleBar from '../TitleBar/TitleBar';\nimport GroupSection from '../GroupSection/GroupSection';\nimport RosterSection from '../RosterSection/RosterSection';\nimport Footer from '../Footer/Footer';\nimport { Group, GroupName, Person} from '../../utils/groupClass';\nimport e from 'cors';\n\n\nfunction InputPage () {\n  let GroupObject = new Group();\n  GroupObject.setProjectName(\"My Project\");\n  // GroupObject.groupNames = ['food', 'music', 'decor'];\n\n  const [aGroupObject, setAGroupObject] = useState(GroupObject);\n  // const [aProjectName, setAProjectName] = useState(GroupObject.projectName);\n  const [aGroupNames, setAGroupNames] = useState(GroupObject.groupNames);\n  // const [aPersons, setAPersons] = useState(GroupObject.persons);\n  \n  // const [showTitle, setShowTitle] = useState(true);\n\n\n  // Emulate componentDidMount lifecycle(s)  = = = = = = = = = = = = = = = = = = = = =\n  \n  // useEffect(() => {\n  //     console.log(\"use effect group state\");\n  // })\n\n \n  // Title Behavior  = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\n  let updateProjectName = title => {\n    console.log('Updating Project Name: ' + title);\n    setAGroupObject(aGroupObject => ({...aGroupObject, projectName: title}));  //This is finally working \n  }\n  \n\n\n  // Group Section Behavior  = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\n  let addGroup = () => {\n      console.log(\"addGroup clicked...\");\n\n      let tempGroupObject = aGroupObject;\n      let newName = \"Group \" + (aGroupNames.length + 1); \n      let newGroupName = new GroupName(newName)\n\n      tempGroupObject.groupNames.push(newGroupName);    // the class Group method 'addGroupNames' doesn't work here and seems to be redundant\n      let newGroupNames = tempGroupObject.groupNames\n      console.log(newGroupNames);\n\n      setAGroupObject(aGroupObject => ({...aGroupObject, groupNames: newGroupNames}));\n  }\n\n  let deleteGroup = e => {\n    let index = e.target.value;\n    console.log(\"Deleting Group... \", index);\n    let tempGroupObject = aGroupObject;\n    let newGroupNames = tempGroupObject.groupNames;\n    // console.log(newGroupNames);\n    newGroupNames.splice(index, 1);\n    // console.log(tempGroupObject.groupNames);\n\n    setAGroupObject(aGroupObject => ({...aGroupObject, groupNames: newGroupNames}));\n  }\n\n  let setGroupTitle = (e, index) => {\n    let title = e.target.value;\n    console.log(\"setGroup Index:\", index, \"Title:\", title);\n\n    let newGroupNames = aGroupObject.groupNames;\n    newGroupNames[index].name = title;\n    // let newGroupName = new GroupName(title);\n    // newGroupNames[index] = newGroupName;\n    console.log(newGroupNames);\n\n    setAGroupObject(aGroupObject => ({...aGroupObject, groupNames: newGroupNames}));\n  }\n\n  // Footer Button Handler  = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n  \n  let shuffleData = () => {\n    console.log(\"shuffle clicked...\");\n    // Shuffle Roster Items randomly\n    \n    // Assign each roster item a group #\n    \n    // Save shuffled data as new group object\n    saveProject();\n    \n    // return <Redirect push to={{ pathname: '/results', groupObject: aProjectState, fromInput=true }} />\n  }\n\n  let saveProject = () => {\n    console.log('saving shuffled project...');\n    // let tempGroupObject = aGroupObject;\n\n    // tempGroupObject.projectName = aProjectName;\n    // tempGroupObject.groupNames = aGroupNames;\n    // // tempGroupObject.persons = aPersons;\n\n    // console.log('new object to save:', tempGroupObject);\n    // setAGroupObject(tempGroupObject);\n  }\n\n    return (\n        <div>\n          <header className=\"App-header\">\n            <Nav />\n\n            <TitleBar \n              title={aGroupObject.projectName} \n              updateTitle={updateProjectName}\n            /> \n\n          </header>\n\n          <main id=\"entry-container\">\n            <GroupSection \n              groupNames={aGroupNames}\n              addGroup={addGroup}\n              deleteGroup={deleteGroup}\n              updateGroupTitle={setGroupTitle}\n              // setGroupNames={setAGroupNames}\n              // handleChange={handleGroupChange}\n              // setGroupNames={(group) => setAGroupNames(group)} \n              />\n              \n            <RosterSection />\n            \n          </main>\n\n          <Footer \n            GroupObject={aGroupObject}\n            value=\"Shuffle\" \n            text=\"Shuffle\"\n            onClick={shuffleData} />\n        </div>\n    );\n  }\n\nexport default InputPage;\n"]},"metadata":{},"sourceType":"module"}