{"ast":null,"code":"class Group {\n  constructor() {\n    this.projectName = \"\";\n    this.groupNames = [];\n    this.person = [];\n  }\n\n  getProjectName() {\n    return this.projectName;\n  }\n\n  setProjectName(projectName) {\n    this.projectName = projectName;\n  }\n\n  getGroupNames() {\n    return this.groupNames;\n  }\n\n  addGroupNames(groupNames) {\n    this.groupNames.push(groupNames);\n  }\n\n  removeGroupNames(groupNames) {\n    this.groupNames.pop(groupNames);\n  }\n\n  getPerson() {\n    return this.person;\n  }\n\n  addPerson(person) {\n    this.person.push(person);\n  }\n\n  removePerson(person) {\n    this.person.pop(person);\n  }\n\n}\n\nclass Person {\n  constructor(name, groupNum) {\n    this.name = name;\n    this.groupNum = groupNum;\n  }\n\n}\n\nconst groups = new Group();\ngroups.setProjectName(\"Grouper\");\ngroups.addPerson(new Person(\"Kenly\", 1));\ngroups.addPerson(new Person(\"Victor\", 2));\ngroups.addGroupNames(\"Group1\");\ngroups.addGroupNames(\"Group2\"); //console.log(groups.getProjectName());\n//console.log(groups.getGroupNames());\n//console.log(groups.getPerson());\n\nconst tempGroup = groups.getPerson();\nconst index = tempGroup.findIndex(({\n  name\n}) => name === \"Victor\");\nconsole.log(index);\ngroups.removePerson(index);\nvar myJSON = JSON.stringify(groups); //console.log(myJSON);\n\nconsole.log(JSON.stringify(JSON.parse(myJSON), null, 2));\nexport { Group, Person };","map":{"version":3,"sources":["/Users/kenlyberkowitz/Documents/Working_Folder/express-projects/randomized-distribution-app/frontendReact/sordaapp/src/groupClass.js"],"names":["Group","constructor","projectName","groupNames","person","getProjectName","setProjectName","getGroupNames","addGroupNames","push","removeGroupNames","pop","getPerson","addPerson","removePerson","Person","name","groupNum","groups","tempGroup","index","findIndex","console","log","myJSON","JSON","stringify","parse"],"mappings":"AAAA,MAAMA,KAAN,CAAY;AACVC,EAAAA,WAAW,GAAG;AACZ,SAAKC,WAAL,GAAmB,EAAnB;AACA,SAAKC,UAAL,GAAkB,EAAlB;AACA,SAAKC,MAAL,GAAc,EAAd;AACD;;AAEDC,EAAAA,cAAc,GAAG;AACf,WAAO,KAAKH,WAAZ;AACD;;AAEDI,EAAAA,cAAc,CAACJ,WAAD,EAAc;AAC1B,SAAKA,WAAL,GAAmBA,WAAnB;AACD;;AAEDK,EAAAA,aAAa,GAAG;AACd,WAAO,KAAKJ,UAAZ;AACD;;AAEDK,EAAAA,aAAa,CAACL,UAAD,EAAa;AACxB,SAAKA,UAAL,CAAgBM,IAAhB,CAAqBN,UAArB;AACD;;AAEDO,EAAAA,gBAAgB,CAACP,UAAD,EAAa;AAC3B,SAAKA,UAAL,CAAgBQ,GAAhB,CAAoBR,UAApB;AACD;;AAEDS,EAAAA,SAAS,GAAG;AACV,WAAO,KAAKR,MAAZ;AACD;;AAEDS,EAAAA,SAAS,CAACT,MAAD,EAAS;AAChB,SAAKA,MAAL,CAAYK,IAAZ,CAAiBL,MAAjB;AACD;;AAEDU,EAAAA,YAAY,CAACV,MAAD,EAAS;AACnB,SAAKA,MAAL,CAAYO,GAAZ,CAAgBP,MAAhB;AACD;;AArCS;;AAyCZ,MAAMW,MAAN,CAAa;AACXd,EAAAA,WAAW,CAACe,IAAD,EAAOC,QAAP,EAAiB;AAC1B,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACD;;AAJU;;AAQX,MAAMC,MAAM,GAAG,IAAIlB,KAAJ,EAAf;AAEFkB,MAAM,CAACZ,cAAP,CAAsB,SAAtB;AACAY,MAAM,CAACL,SAAP,CAAiB,IAAIE,MAAJ,CAAW,OAAX,EAAoB,CAApB,CAAjB;AACAG,MAAM,CAACL,SAAP,CAAiB,IAAIE,MAAJ,CAAW,QAAX,EAAqB,CAArB,CAAjB;AACAG,MAAM,CAACV,aAAP,CAAqB,QAArB;AACAU,MAAM,CAACV,aAAP,CAAqB,QAArB,E,CACA;AACA;AACA;;AAEA,MAAMW,SAAS,GAAGD,MAAM,CAACN,SAAP,EAAlB;AACA,MAAMQ,KAAK,GAAGD,SAAS,CAACE,SAAV,CAAqB,CAAC;AAACL,EAAAA;AAAD,CAAD,KAAYA,IAAI,KAAK,QAA1C,CAAd;AACAM,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACAF,MAAM,CAACJ,YAAP,CAAoBM,KAApB;AAEA,IAAII,MAAM,GAAGC,IAAI,CAACC,SAAL,CAAeR,MAAf,CAAb,C,CAEA;;AACAI,OAAO,CAACC,GAAR,CAAYE,IAAI,CAACC,SAAL,CAAeD,IAAI,CAACE,KAAL,CAAWH,MAAX,CAAf,EAAmC,IAAnC,EAAyC,CAAzC,CAAZ;AAEA,SAAQxB,KAAR,EAAee,MAAf","sourcesContent":["class Group {\n  constructor() {\n    this.projectName = \"\";\n    this.groupNames = [];\n    this.person = [];\n  }\n\n  getProjectName() {\n    return this.projectName;\n  }\n\n  setProjectName(projectName) {\n    this.projectName = projectName;\n  }\n\n  getGroupNames() {\n    return this.groupNames;\n  }\n\n  addGroupNames(groupNames) {\n    this.groupNames.push(groupNames);\n  }\n\n  removeGroupNames(groupNames) {\n    this.groupNames.pop(groupNames);\n  }\n\n  getPerson() {\n    return this.person;\n  }\n\n  addPerson(person) {\n    this.person.push(person);\n  }\n\n  removePerson(person) {\n    this.person.pop(person);\n  }\n}\n\n\nclass Person {\n  constructor(name, groupNum) {\n    this.name = name;\n    this.groupNum = groupNum;\n  }\n}\n\n\n  const groups = new Group();\n\ngroups.setProjectName(\"Grouper\");\ngroups.addPerson(new Person(\"Kenly\", 1));\ngroups.addPerson(new Person(\"Victor\", 2));\ngroups.addGroupNames(\"Group1\");\ngroups.addGroupNames(\"Group2\");\n//console.log(groups.getProjectName());\n//console.log(groups.getGroupNames());\n//console.log(groups.getPerson());\n\nconst tempGroup = groups.getPerson();\nconst index = tempGroup.findIndex( ({name}) => name === \"Victor\" );\nconsole.log(index);\ngroups.removePerson(index);\n\nvar myJSON = JSON.stringify(groups);\n\n//console.log(myJSON);\nconsole.log(JSON.stringify(JSON.parse(myJSON), null, 2));\n\nexport {Group, Person}\n"]},"metadata":{},"sourceType":"module"}