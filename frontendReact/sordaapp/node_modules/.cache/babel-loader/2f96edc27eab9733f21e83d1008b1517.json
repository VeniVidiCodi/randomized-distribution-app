{"ast":null,"code":"var _jsxFileName = \"/Users/victorsanchez/Documents/programming/git/randomized-distribution-app/frontendReact/sordaapp/src/components/AppPages/InputPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport Nav from '../Nav/Nav';\nimport TitleBar from '../TitleBar/TitleBar';\nimport GroupSection from '../GroupSection/GroupSection';\nimport RosterSection from '../RosterSection/RosterSection';\nimport Footer from '../Footer/Footer';\nimport { Group, GroupName, Person } from '../../utils/groupClass';\nimport e from 'cors';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction InputPage(props) {\n  _s();\n\n  let GroupObject = new Group();\n\n  if (props.location.GroupObject !== null) {\n    console.log(\"succcess\");\n  } else if (props.location.fromResultPage) {\n    // MUST RECEIVE JSON FROM RESULTS PAGE\n    GroupObject = () => {\n      let tempGroup = new Group();\n      tempGroup.persons = props.location.json.persons;\n      tempGroup.groupNames = props.location.json.groupNames;\n      tempGroup.setProjectName(props.location.json.projectName);\n      return tempGroup;\n    };\n  } else {\n    GroupObject.setProjectName(\"My Project\");\n  } // –––––––\n  //  State\n  // –––––––\n\n\n  const [aGroupObject, setAGroupObject] = useState(GroupObject);\n  const [shuffleClick, setShuffleClick] = useState(false);\n  const [fromLandingPage, setFromLandingPage] = useState(props.location.fromLandingPage);\n  const [fromResultPage, setFfromResultPagee] = useState(props.location.fromResultPage); // Title Behavior  = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\n  const updateProjectName = title => {\n    setAGroupObject(aGroupObject => ({ ...aGroupObject,\n      projectName: title\n    }));\n  }; // Group Section Behavior  = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\n\n  const addGroup = () => {\n    let tempGroupObject = aGroupObject;\n    let tempGroupNames = tempGroupObject.groupNames;\n    let newName = \"Group \" + (tempGroupNames.length + 1);\n    let newGroupName = new GroupName(newName, null);\n    tempGroupNames.push(newGroupName);\n    setAGroupObject(aGroupObject => ({ ...aGroupObject,\n      groupNames: tempGroupNames\n    }));\n  };\n\n  const deleteGroup = e => {\n    let index = e.target.value;\n    let tempGroupObject = aGroupObject;\n    let newGroupNames = tempGroupObject.groupNames;\n    newGroupNames.splice(index, 1);\n    setAGroupObject(aGroupObject => ({ ...aGroupObject,\n      groupNames: newGroupNames\n    }));\n  };\n\n  const updateGroupTitle = (title, index) => {\n    let newGroupNames = aGroupObject.groupNames;\n    newGroupNames[index].name = title;\n    setAGroupObject(aGroupObject => ({ ...aGroupObject,\n      groupNames: newGroupNames\n    }));\n  }; // Roster Section Behavior  = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\n\n  const addItem = () => {\n    let tempItemList = aGroupObject.persons;\n    let newItemName = \"item \" + (tempItemList.length + 1);\n    let newItem = new Person(newItemName, null);\n    tempItemList.push(newItem);\n    setAGroupObject(aGroupObject => ({ ...aGroupObject,\n      persons: tempItemList\n    }));\n  };\n\n  const deleteItem = e => {\n    let index = e.target.value;\n    let tempGroupObject = aGroupObject;\n    let newItemsList = tempGroupObject.persons;\n    newItemsList.splice(index, 1);\n    setAGroupObject(aGroupObject => ({ ...aGroupObject,\n      persons: newItemsList\n    }));\n  };\n\n  const updateItemName = (title, index) => {\n    let newItemsList = aGroupObject.persons;\n    newItemsList[index].name = title;\n    setAGroupObject(aGroupObject => ({ ...aGroupObject,\n      persons: newItemsList\n    }));\n  }; // Footer Button Handler Functions  = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\n\n  const shuffleArray = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n  };\n\n  const shuffleProject = () => {\n    console.log(\"shuffle clicked ...\");\n    let tempGroupObject = aGroupObject;\n    let groups = aGroupObject.groupNames;\n    let persons = aGroupObject.persons;\n    let numOfGroups = groups.length;\n    let numOfPersons = persons.length; // Input validity checks\n\n    if (numOfGroups === 0) {\n      alert(\"Shuffle cannot be performed with no groups. Please add more groups.\");\n      return false;\n    }\n\n    if (numOfPersons === 0) {\n      alert(\"Shuffle cannot be performed with no roster items. Please add more roster items.\");\n      return false;\n    }\n\n    if (numOfGroups > numOfPersons) {\n      alert(\"There must be more groups than roster items.\");\n      return false;\n    } else {\n      shuffleArray(persons);\n      let count = numOfPersons;\n\n      do {\n        console.log(\"PERSON COUNTDOWN:\", count);\n        let person = persons[count - 1];\n        person.groupNum = count % numOfGroups + 1;\n        count--;\n      } while (count > 0);\n\n      setShuffleClick(true);\n      tempGroupObject.persons = persons;\n      return tempGroupObject;\n    } // SAVE SHUFFLED DATA AS NEW GROUP OBJECT\n    // saveProject();\n    // PASS STATE TO  AND LOAD THE RESULTS PAGE\n    // return <Redirect push to={{ pathname: '/results', groupObject: aProjectState, fromInput=true }} />\n\n  };\n\n  const saveProject = () => {\n    console.log('saveProject ...'); // let assignedResults = shuffleProject();\n    // console.log('RESULTS:', assignedResults);\n  };\n\n  const editProject = () => {\n    console.log('editProject clicked ...');\n  };\n\n  if (shuffleClick) {\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      push: true,\n      to: {\n        pathname: '/results',\n        GroupObject: aGroupObject,\n        fromInputPage: true,\n        fromLandingPage: false\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(Nav, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TitleBar, {\n        title: aGroupObject.projectName,\n        updateTitle: updateProjectName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      id: \"entry-container\",\n      children: [/*#__PURE__*/_jsxDEV(GroupSection, {\n        groupNames: aGroupObject.groupNames,\n        addGroup: addGroup,\n        deleteGroup: deleteGroup,\n        updateGroupTitle: updateGroupTitle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(RosterSection, {\n        rosterItems: aGroupObject.persons,\n        addItem: addItem,\n        deleteItem: deleteItem,\n        updateItemName: updateItemName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {\n      GroupObject: aGroupObject,\n      onClickShuffle: shuffleProject,\n      onClickSave: saveProject,\n      onClickEdit: editProject,\n      fromResultPage: fromResultPage,\n      fromLandingPage: fromLandingPage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 179,\n    columnNumber: 7\n  }, this);\n}\n\n_s(InputPage, \"26hkAYM9eUEBT2AWdDL1eFClkjA=\");\n\n_c = InputPage;\nexport default InputPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"InputPage\");","map":{"version":3,"sources":["/Users/victorsanchez/Documents/programming/git/randomized-distribution-app/frontendReact/sordaapp/src/components/AppPages/InputPage.js"],"names":["React","useState","Redirect","Nav","TitleBar","GroupSection","RosterSection","Footer","Group","GroupName","Person","e","InputPage","props","GroupObject","location","console","log","fromResultPage","tempGroup","persons","json","groupNames","setProjectName","projectName","aGroupObject","setAGroupObject","shuffleClick","setShuffleClick","fromLandingPage","setFromLandingPage","setFfromResultPagee","updateProjectName","title","addGroup","tempGroupObject","tempGroupNames","newName","length","newGroupName","push","deleteGroup","index","target","value","newGroupNames","splice","updateGroupTitle","name","addItem","tempItemList","newItemName","newItem","deleteItem","newItemsList","updateItemName","shuffleArray","array","i","j","Math","floor","random","temp","shuffleProject","groups","numOfGroups","numOfPersons","alert","count","person","groupNum","saveProject","editProject","pathname","fromInputPage"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport {Redirect} from 'react-router-dom';\nimport Nav from '../Nav/Nav';\nimport TitleBar from '../TitleBar/TitleBar';\nimport GroupSection from '../GroupSection/GroupSection';\nimport RosterSection from '../RosterSection/RosterSection';\nimport Footer from '../Footer/Footer';\nimport { Group, GroupName, Person } from '../../utils/groupClass';\nimport e from 'cors';\n\n\nfunction InputPage (props) {\n\n  let GroupObject = new Group();\n\n  if (props.location.GroupObject !== null) {\n    console.log(\"succcess\");\n  } else if (props.location.fromResultPage) {   // MUST RECEIVE JSON FROM RESULTS PAGE\n    GroupObject = () => {\n       let tempGroup = new Group();\n       tempGroup.persons = props.location.json.persons;\n       tempGroup.groupNames = props.location.json.groupNames;\n       tempGroup.setProjectName(props.location.json.projectName);\n\n       return tempGroup;\n     }\n   } else {\n     GroupObject.setProjectName(\"My Project\");\n   }\n  \n\n  // –––––––\n  //  State\n  // –––––––\n\n  const [aGroupObject, setAGroupObject] = useState(GroupObject);\n  const [shuffleClick, setShuffleClick] = useState(false);\n  const [fromLandingPage, setFromLandingPage] = useState(props.location.fromLandingPage);\n  const [fromResultPage, setFfromResultPagee] = useState(props.location.fromResultPage);\n\n\n  // Title Behavior  = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\n  const updateProjectName = title => {\n    setAGroupObject(aGroupObject => ({...aGroupObject, projectName: title})); \n  }\n  \n\n  // Group Section Behavior  = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\n  const addGroup = () => {\n      let tempGroupObject = aGroupObject;\n      let tempGroupNames = tempGroupObject.groupNames;\n      let newName = \"Group \" + (tempGroupNames.length + 1); \n      let newGroupName = new GroupName(newName, null);\n\n      tempGroupNames.push(newGroupName);   \n      setAGroupObject(aGroupObject => ({...aGroupObject, groupNames: tempGroupNames}));\n  }\n\n  const deleteGroup = e => {\n    let index = e.target.value;\n    let tempGroupObject = aGroupObject;\n    let newGroupNames = tempGroupObject.groupNames;\n\n    newGroupNames.splice(index, 1);\n    setAGroupObject(aGroupObject => ({...aGroupObject, groupNames: newGroupNames}));\n  }\n\n  const updateGroupTitle = (title, index) => {\n    let newGroupNames = aGroupObject.groupNames;\n    newGroupNames[index].name = title;\n\n    setAGroupObject(aGroupObject => ({...aGroupObject, groupNames: newGroupNames}));\n  }\n\n\n  // Roster Section Behavior  = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\n  const addItem = () => {\n      let tempItemList = aGroupObject.persons;\n      let newItemName = \"item \" + (tempItemList.length + 1); \n      let newItem = new Person(newItemName, null);\n\n      tempItemList.push(newItem);   \n      setAGroupObject(aGroupObject => ({...aGroupObject, persons: tempItemList}));\n  }\n\n  const deleteItem = e => {\n    let index = e.target.value;\n    let tempGroupObject = aGroupObject;\n    let newItemsList = tempGroupObject.persons;\n\n    newItemsList.splice(index, 1);\n    setAGroupObject(aGroupObject => ({...aGroupObject, persons: newItemsList}));\n  }\n\n  const updateItemName = (title, index) => {\n    let newItemsList = aGroupObject.persons;\n    newItemsList[index].name = title;\n\n    setAGroupObject(aGroupObject => ({...aGroupObject, persons: newItemsList}));\n  }\n\n\n  // Footer Button Handler Functions  = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\n  const shuffleArray = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n  }\n  \n\n  const shuffleProject = () => {\n    console.log(\"shuffle clicked ...\");\n\n    let tempGroupObject = aGroupObject;\n    let groups = aGroupObject.groupNames;\n    let persons = aGroupObject.persons;\n    let numOfGroups = groups.length;\n    let numOfPersons = persons.length;\n\n    // Input validity checks\n    if (numOfGroups === 0) {\n      alert(\"Shuffle cannot be performed with no groups. Please add more groups.\");\n      return false;\n    }\n    if (numOfPersons === 0) {\n      alert(\"Shuffle cannot be performed with no roster items. Please add more roster items.\");\n      return false;\n    }\n    if (numOfGroups > numOfPersons) {\n      alert(\"There must be more groups than roster items.\");\n      return false;\n    } else {\n      shuffleArray(persons);\n      let count = numOfPersons;\n\n      do {\n        console.log(\"PERSON COUNTDOWN:\", count);\n        let person = persons[count - 1];\n        person.groupNum = count % (numOfGroups) + 1;\n        count--; \n      } while (count > 0)\n\n      setShuffleClick(true);\n      tempGroupObject.persons = persons;\n      return tempGroupObject;\n    }\n    \n    // SAVE SHUFFLED DATA AS NEW GROUP OBJECT\n    // saveProject();\n    \n    // PASS STATE TO  AND LOAD THE RESULTS PAGE\n    // return <Redirect push to={{ pathname: '/results', groupObject: aProjectState, fromInput=true }} />\n  }\n\n  const saveProject = () => {\n    console.log('saveProject ...');\n\n    // let assignedResults = shuffleProject();\n    // console.log('RESULTS:', assignedResults);\n  }\n\n  const editProject = () => {\n    console.log('editProject clicked ...');\n    \n  }\n\n  if (shuffleClick) {\n    return <Redirect push to={{pathname: '/results', GroupObject: aGroupObject, fromInputPage: true, fromLandingPage: false}}/>;\n  }\n\n  return (\n      <div>\n        <header className=\"App-header\">\n          <Nav />\n          <TitleBar \n            title={aGroupObject.projectName} \n            updateTitle={updateProjectName} /> \n        </header>\n        <main id=\"entry-container\">\n          <GroupSection \n            groupNames={aGroupObject.groupNames}\n            addGroup={addGroup}\n            deleteGroup={deleteGroup}\n            updateGroupTitle={updateGroupTitle} />\n          <RosterSection \n            rosterItems={aGroupObject.persons}\n            addItem={addItem}\n            deleteItem={deleteItem}\n            updateItemName={updateItemName} />\n        </main>\n          <Footer \n            GroupObject={aGroupObject}\n            onClickShuffle={shuffleProject}\n            onClickSave={saveProject}\n            onClickEdit={editProject}\n            fromResultPage={fromResultPage}\n            fromLandingPage={fromLandingPage}\n            />\n      </div>\n    );\n  }\n\nexport default InputPage;\n"]},"metadata":{},"sourceType":"module"}