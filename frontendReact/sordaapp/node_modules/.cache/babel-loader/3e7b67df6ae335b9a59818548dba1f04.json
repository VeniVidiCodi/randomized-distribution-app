{"ast":null,"code":"var _jsxFileName = \"/Users/victorsanchez/Documents/programming/git/randomized-distribution-app/frontendReact/sordaapp/src/components/AppPages/InputPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport Nav from '../Nav/Nav';\nimport TitleBar from '../TitleBar/TitleBar';\nimport GroupSection from '../GroupSection/GroupSection';\nimport RosterSection from '../RosterSection/RosterSection';\nimport Footer from '../Footer/Footer';\nimport { Group, GroupName, Person } from '../../utils/groupClass';\nimport e from 'cors';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction InputPage() {\n  _s();\n\n  let GroupObject = new Group();\n  GroupObject.setProjectName(\"My Project\");\n  const [aGroupObject, setAGroupObject] = useState(GroupObject);\n  const [saveClick, setSaveClick] = useState(false); // Title Behavior  = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\n  let updateProjectName = title => {\n    // console.log('Updating Project Name: ' + title);\n    setAGroupObject(aGroupObject => ({ ...aGroupObject,\n      projectName: title\n    }));\n  }; // Group Section Behavior  = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\n\n  let addGroup = () => {\n    // console.log(\"addGroup clicked...\");\n    let tempGroupObject = aGroupObject;\n    let tempGroupNames = tempGroupObject.groupNames;\n    let newName = \"Group \" + (tempGroupNames.length + 1);\n    let newGroupName = new GroupName(newName, null);\n    tempGroupNames.push(newGroupName); // console.log(tempGroupNames);\n\n    setAGroupObject(aGroupObject => ({ ...aGroupObject,\n      groupNames: tempGroupNames\n    }));\n  };\n\n  let deleteGroup = e => {\n    let index = e.target.value; // console.log(\"Deleting Group... \", index);\n\n    let tempGroupObject = aGroupObject;\n    let newGroupNames = tempGroupObject.groupNames;\n    newGroupNames.splice(index, 1);\n    setAGroupObject(aGroupObject => ({ ...aGroupObject,\n      groupNames: newGroupNames\n    }));\n  };\n\n  let updateGroupTitle = (title, index) => {\n    // console.log(\"Upade Group Title:: \\nIndex:\", index, \"\\nValue:\", title);\n    let newGroupNames = aGroupObject.groupNames;\n    newGroupNames[index].name = title;\n    setAGroupObject(aGroupObject => ({ ...aGroupObject,\n      groupNames: newGroupNames\n    }));\n  }; // Roster Section Behavior  = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\n\n  let addItem = () => {\n    // console.log(\"addItem clicked...\");\n    // let tempGroupObject = aGroupObject;\n    let tempItemList = aGroupObject.persons;\n    let newItemName = \"item \" + (tempItemList.length + 1);\n    let newItem = new Person(newItemName, null);\n    tempItemList.push(newItem);\n    console.log(tempItemList);\n    setAGroupObject(aGroupObject => ({ ...aGroupObject,\n      persons: tempItemList\n    }));\n  };\n\n  let deleteItem = e => {\n    let index = e.target.value; // console.log(\"Deleting Roster Item... \", index);\n\n    let tempGroupObject = aGroupObject;\n    let newItemsList = tempGroupObject.persons;\n    newItemsList.splice(index, 1);\n    setAGroupObject(aGroupObject => ({ ...aGroupObject,\n      persons: newItemsList\n    }));\n  };\n\n  let updateItemName = (title, index) => {\n    // console.log(\"Update Roster Name:: \\nIndex:\", index, \"\\nValue:\", title);\n    let newItemsList = aGroupObject.persons;\n    newItemsList[index].name = title;\n    setAGroupObject(aGroupObject => ({ ...aGroupObject,\n      persons: newItemsList\n    }));\n  }; // Footer Button Handler  = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\n\n  let shuffleData = () => {\n    console.log(\"shuffle clicked ...\"); // Check that qty of groups < qty of persons\n\n    let numOfGroups = aGroupObject.groupNames.length;\n    console.log(numOfGroups); // Find how many rounds can be \n    // for (item in )\n    // Assign each roster item a group #\n    // Save shuffled data as new group object\n    // saveProject();\n    // return <Redirect push to={{ pathname: '/results', groupObject: aProjectState, fromInput=true }} />\n  };\n\n  let saveProject = () => {\n    console.log('saving ...');\n    shuffleData(); // setSaveClick(true);\n    // let tempGroupObject = aGroupObject;\n    // tempGroupObject.projectName = aProjectName;\n    // tempGroupObject.groupNames = aGroupNames;\n    // // tempGroupObject.persons = aPersons;\n    // console.log('new object to save:', tempGroupObject);\n    // setAGroupObject(tempGroupObject);\n  };\n\n  let editProject = () => {\n    console.log('editProject clicked ...');\n  };\n\n  if (saveClick) {\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      push: true,\n      to: {\n        pathname: '/results',\n        GroupObject: aGroupObject,\n        isTrue: false\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(Nav, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TitleBar, {\n        title: aGroupObject.projectName,\n        updateTitle: updateProjectName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      id: \"entry-container\",\n      children: [/*#__PURE__*/_jsxDEV(GroupSection, {\n        groupNames: aGroupObject.groupNames,\n        addGroup: addGroup,\n        deleteGroup: deleteGroup,\n        updateGroupTitle: updateGroupTitle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(RosterSection, {\n        rosterItems: aGroupObject.persons,\n        addItem: addItem,\n        deleteItem: deleteItem,\n        updateItemName: updateItemName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {\n      GroupObject: aGroupObject,\n      onClickShuffle: shuffleData,\n      onClickSave: saveProject,\n      onClickEdit: editProject\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 7\n  }, this);\n}\n\n_s(InputPage, \"w7ZejugFkgqbtPcqJvm4IG/1Ass=\");\n\n_c = InputPage;\nexport default InputPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"InputPage\");","map":{"version":3,"sources":["/Users/victorsanchez/Documents/programming/git/randomized-distribution-app/frontendReact/sordaapp/src/components/AppPages/InputPage.js"],"names":["React","useState","Redirect","Nav","TitleBar","GroupSection","RosterSection","Footer","Group","GroupName","Person","e","InputPage","GroupObject","setProjectName","aGroupObject","setAGroupObject","saveClick","setSaveClick","updateProjectName","title","projectName","addGroup","tempGroupObject","tempGroupNames","groupNames","newName","length","newGroupName","push","deleteGroup","index","target","value","newGroupNames","splice","updateGroupTitle","name","addItem","tempItemList","persons","newItemName","newItem","console","log","deleteItem","newItemsList","updateItemName","shuffleData","numOfGroups","saveProject","editProject","pathname","isTrue"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAAQC,QAAR,QAAuB,kBAAvB;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAOC,YAAP,MAAyB,8BAAzB;AACA,OAAOC,aAAP,MAA0B,gCAA1B;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,SAASC,KAAT,EAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,wBAAzC;AACA,OAAOC,CAAP,MAAc,MAAd;;;AAGA,SAASC,SAAT,GAAsB;AAAA;;AACpB,MAAIC,WAAW,GAAG,IAAIL,KAAJ,EAAlB;AACAK,EAAAA,WAAW,CAACC,cAAZ,CAA2B,YAA3B;AAEA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCf,QAAQ,CAACY,WAAD,CAAhD;AACA,QAAM,CAACI,SAAD,EAAYC,YAAZ,IAA4BjB,QAAQ,CAAC,KAAD,CAA1C,CALoB,CAQpB;;AAEA,MAAIkB,iBAAiB,GAAGC,KAAK,IAAI;AAC/B;AACAJ,IAAAA,eAAe,CAACD,YAAY,KAAK,EAAC,GAAGA,YAAJ;AAAkBM,MAAAA,WAAW,EAAED;AAA/B,KAAL,CAAb,CAAf;AACD,GAHD,CAVoB,CAgBpB;;;AAEA,MAAIE,QAAQ,GAAG,MAAM;AACjB;AAEA,QAAIC,eAAe,GAAGR,YAAtB;AACA,QAAIS,cAAc,GAAGD,eAAe,CAACE,UAArC;AACA,QAAIC,OAAO,GAAG,YAAYF,cAAc,CAACG,MAAf,GAAwB,CAApC,CAAd;AACA,QAAIC,YAAY,GAAG,IAAInB,SAAJ,CAAciB,OAAd,EAAuB,IAAvB,CAAnB;AAEAF,IAAAA,cAAc,CAACK,IAAf,CAAoBD,YAApB,EARiB,CASjB;;AAEAZ,IAAAA,eAAe,CAACD,YAAY,KAAK,EAAC,GAAGA,YAAJ;AAAkBU,MAAAA,UAAU,EAAED;AAA9B,KAAL,CAAb,CAAf;AACH,GAZD;;AAcA,MAAIM,WAAW,GAAGnB,CAAC,IAAI;AACrB,QAAIoB,KAAK,GAAGpB,CAAC,CAACqB,MAAF,CAASC,KAArB,CADqB,CAErB;;AACA,QAAIV,eAAe,GAAGR,YAAtB;AACA,QAAImB,aAAa,GAAGX,eAAe,CAACE,UAApC;AAEAS,IAAAA,aAAa,CAACC,MAAd,CAAqBJ,KAArB,EAA4B,CAA5B;AACAf,IAAAA,eAAe,CAACD,YAAY,KAAK,EAAC,GAAGA,YAAJ;AAAkBU,MAAAA,UAAU,EAAES;AAA9B,KAAL,CAAb,CAAf;AACD,GARD;;AAUA,MAAIE,gBAAgB,GAAG,CAAChB,KAAD,EAAQW,KAAR,KAAkB;AACvC;AAEA,QAAIG,aAAa,GAAGnB,YAAY,CAACU,UAAjC;AACAS,IAAAA,aAAa,CAACH,KAAD,CAAb,CAAqBM,IAArB,GAA4BjB,KAA5B;AAEAJ,IAAAA,eAAe,CAACD,YAAY,KAAK,EAAC,GAAGA,YAAJ;AAAkBU,MAAAA,UAAU,EAAES;AAA9B,KAAL,CAAb,CAAf;AACD,GAPD,CA1CoB,CAoDpB;;;AAEA,MAAII,OAAO,GAAG,MAAM;AAChB;AAEA;AACA,QAAIC,YAAY,GAAGxB,YAAY,CAACyB,OAAhC;AACA,QAAIC,WAAW,GAAG,WAAWF,YAAY,CAACZ,MAAb,GAAsB,CAAjC,CAAlB;AACA,QAAIe,OAAO,GAAG,IAAIhC,MAAJ,CAAW+B,WAAX,EAAwB,IAAxB,CAAd;AAEAF,IAAAA,YAAY,CAACV,IAAb,CAAkBa,OAAlB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYL,YAAZ;AAEAvB,IAAAA,eAAe,CAACD,YAAY,KAAK,EAAC,GAAGA,YAAJ;AAAkByB,MAAAA,OAAO,EAAED;AAA3B,KAAL,CAAb,CAAf;AACH,GAZD;;AAcA,MAAIM,UAAU,GAAGlC,CAAC,IAAI;AACpB,QAAIoB,KAAK,GAAGpB,CAAC,CAACqB,MAAF,CAASC,KAArB,CADoB,CAEpB;;AACA,QAAIV,eAAe,GAAGR,YAAtB;AACA,QAAI+B,YAAY,GAAGvB,eAAe,CAACiB,OAAnC;AAEAM,IAAAA,YAAY,CAACX,MAAb,CAAoBJ,KAApB,EAA2B,CAA3B;AACAf,IAAAA,eAAe,CAACD,YAAY,KAAK,EAAC,GAAGA,YAAJ;AAAkByB,MAAAA,OAAO,EAAEM;AAA3B,KAAL,CAAb,CAAf;AACD,GARD;;AAUA,MAAIC,cAAc,GAAG,CAAC3B,KAAD,EAAQW,KAAR,KAAkB;AACrC;AAEA,QAAIe,YAAY,GAAG/B,YAAY,CAACyB,OAAhC;AACAM,IAAAA,YAAY,CAACf,KAAD,CAAZ,CAAoBM,IAApB,GAA2BjB,KAA3B;AAEAJ,IAAAA,eAAe,CAACD,YAAY,KAAK,EAAC,GAAGA,YAAJ;AAAkByB,MAAAA,OAAO,EAAEM;AAA3B,KAAL,CAAb,CAAf;AACD,GAPD,CA9EoB,CAwFpB;;;AAEA,MAAIE,WAAW,GAAG,MAAM;AACtBL,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EADsB,CAEtB;;AACA,QAAIK,WAAW,GAAGlC,YAAY,CAACU,UAAb,CAAwBE,MAA1C;AACAgB,IAAAA,OAAO,CAACC,GAAR,CAAYK,WAAZ,EAJsB,CAKtB;AACA;AACA;AAEA;AACA;AAEA;AACD,GAbD;;AAeA,MAAIC,WAAW,GAAG,MAAM;AACtBP,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAI,IAAAA,WAAW,GAFW,CAGtB;AACA;AAEA;AACA;AACA;AAEA;AACA;AACD,GAZD;;AAcA,MAAIG,WAAW,GAAG,MAAM;AACtBR,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AAED,GAHD;;AAKA,MAAI3B,SAAJ,EAAe;AACb,wBAAO,QAAC,QAAD;AAAU,MAAA,IAAI,MAAd;AAAe,MAAA,EAAE,EAAE;AAACmC,QAAAA,QAAQ,EAAE,UAAX;AAAuBvC,QAAAA,WAAW,EAAEE,YAApC;AAAkDsC,QAAAA,MAAM,EAAE;AAA1D;AAAnB;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,sBACI;AAAA,4BACE;AAAQ,MAAA,SAAS,EAAC,YAAlB;AAAA,8BACE,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,QAAD;AACE,QAAA,KAAK,EAAEtC,YAAY,CAACM,WADtB;AAEE,QAAA,WAAW,EAAEF;AAFf;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAOE;AAAM,MAAA,EAAE,EAAC,iBAAT;AAAA,8BACE,QAAC,YAAD;AACE,QAAA,UAAU,EAAEJ,YAAY,CAACU,UAD3B;AAEE,QAAA,QAAQ,EAAEH,QAFZ;AAGE,QAAA,WAAW,EAAEQ,WAHf;AAIE,QAAA,gBAAgB,EAAEM;AAJpB;AAAA;AAAA;AAAA;AAAA,cADF,eAME,QAAC,aAAD;AACE,QAAA,WAAW,EAAErB,YAAY,CAACyB,OAD5B;AAEE,QAAA,OAAO,EAAEF,OAFX;AAGE,QAAA,UAAU,EAAEO,UAHd;AAIE,QAAA,cAAc,EAAEE;AAJlB;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA,YAPF,eAmBI,QAAC,MAAD;AACE,MAAA,WAAW,EAAEhC,YADf;AAEE,MAAA,cAAc,EAAEiC,WAFlB;AAGE,MAAA,WAAW,EAAEE,WAHf;AAIE,MAAA,WAAW,EAAEC;AAJf;AAAA;AAAA;AAAA;AAAA,YAnBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA4BC;;GA5JMvC,S;;KAAAA,S;AA8JT,eAAeA,SAAf","sourcesContent":["import React, { useState } from 'react';\nimport {Redirect} from 'react-router-dom';\nimport Nav from '../Nav/Nav';\nimport TitleBar from '../TitleBar/TitleBar';\nimport GroupSection from '../GroupSection/GroupSection';\nimport RosterSection from '../RosterSection/RosterSection';\nimport Footer from '../Footer/Footer';\nimport { Group, GroupName, Person } from '../../utils/groupClass';\nimport e from 'cors';\n\n\nfunction InputPage () {\n  let GroupObject = new Group();\n  GroupObject.setProjectName(\"My Project\");\n\n  const [aGroupObject, setAGroupObject] = useState(GroupObject);\n  const [saveClick, setSaveClick] = useState(false);\n\n\n  // Title Behavior  = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\n  let updateProjectName = title => {\n    // console.log('Updating Project Name: ' + title);\n    setAGroupObject(aGroupObject => ({...aGroupObject, projectName: title})); \n  }\n  \n\n  // Group Section Behavior  = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\n  let addGroup = () => {\n      // console.log(\"addGroup clicked...\");\n\n      let tempGroupObject = aGroupObject;\n      let tempGroupNames = tempGroupObject.groupNames;\n      let newName = \"Group \" + (tempGroupNames.length + 1); \n      let newGroupName = new GroupName(newName, null);\n\n      tempGroupNames.push(newGroupName);   \n      // console.log(tempGroupNames);\n\n      setAGroupObject(aGroupObject => ({...aGroupObject, groupNames: tempGroupNames}));\n  }\n\n  let deleteGroup = e => {\n    let index = e.target.value;\n    // console.log(\"Deleting Group... \", index);\n    let tempGroupObject = aGroupObject;\n    let newGroupNames = tempGroupObject.groupNames;\n\n    newGroupNames.splice(index, 1);\n    setAGroupObject(aGroupObject => ({...aGroupObject, groupNames: newGroupNames}));\n  }\n\n  let updateGroupTitle = (title, index) => {\n    // console.log(\"Upade Group Title:: \\nIndex:\", index, \"\\nValue:\", title);\n\n    let newGroupNames = aGroupObject.groupNames;\n    newGroupNames[index].name = title;\n\n    setAGroupObject(aGroupObject => ({...aGroupObject, groupNames: newGroupNames}));\n  }\n\n\n  // Roster Section Behavior  = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\n  let addItem = () => {\n      // console.log(\"addItem clicked...\");\n\n      // let tempGroupObject = aGroupObject;\n      let tempItemList = aGroupObject.persons;\n      let newItemName = \"item \" + (tempItemList.length + 1); \n      let newItem = new Person(newItemName, null);\n\n      tempItemList.push(newItem);   \n      console.log(tempItemList);\n\n      setAGroupObject(aGroupObject => ({...aGroupObject, persons: tempItemList}));\n  }\n\n  let deleteItem = e => {\n    let index = e.target.value;\n    // console.log(\"Deleting Roster Item... \", index);\n    let tempGroupObject = aGroupObject;\n    let newItemsList = tempGroupObject.persons;\n\n    newItemsList.splice(index, 1);\n    setAGroupObject(aGroupObject => ({...aGroupObject, persons: newItemsList}));\n  }\n\n  let updateItemName = (title, index) => {\n    // console.log(\"Update Roster Name:: \\nIndex:\", index, \"\\nValue:\", title);\n\n    let newItemsList = aGroupObject.persons;\n    newItemsList[index].name = title;\n\n    setAGroupObject(aGroupObject => ({...aGroupObject, persons: newItemsList}));\n  }\n\n\n  // Footer Button Handler  = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n  \n  let shuffleData = () => {\n    console.log(\"shuffle clicked ...\");\n    // Check that qty of groups < qty of persons\n    let numOfGroups = aGroupObject.groupNames.length;\n    console.log(numOfGroups);\n    // Find how many rounds can be \n    // for (item in )\n    // Assign each roster item a group #\n    \n    // Save shuffled data as new group object\n    // saveProject();\n    \n    // return <Redirect push to={{ pathname: '/results', groupObject: aProjectState, fromInput=true }} />\n  }\n\n  let saveProject = () => {\n    console.log('saving ...');\n    shuffleData();\n    // setSaveClick(true);\n    // let tempGroupObject = aGroupObject;\n\n    // tempGroupObject.projectName = aProjectName;\n    // tempGroupObject.groupNames = aGroupNames;\n    // // tempGroupObject.persons = aPersons;\n\n    // console.log('new object to save:', tempGroupObject);\n    // setAGroupObject(tempGroupObject);\n  }\n\n  let editProject = () => {\n    console.log('editProject clicked ...');\n    \n  }\n\n  if (saveClick) {\n    return <Redirect push to={{pathname: '/results', GroupObject: aGroupObject, isTrue: false}}/>;\n  }\n\n  return (\n      <div>\n        <header className=\"App-header\">\n          <Nav />\n          <TitleBar \n            title={aGroupObject.projectName} \n            updateTitle={updateProjectName} /> \n        </header>\n        <main id=\"entry-container\">\n          <GroupSection \n            groupNames={aGroupObject.groupNames}\n            addGroup={addGroup}\n            deleteGroup={deleteGroup}\n            updateGroupTitle={updateGroupTitle} />\n          <RosterSection \n            rosterItems={aGroupObject.persons}\n            addItem={addItem}\n            deleteItem={deleteItem}\n            updateItemName={updateItemName} />\n        </main>\n          <Footer \n            GroupObject={aGroupObject}\n            onClickShuffle={shuffleData}\n            onClickSave={saveProject}\n            onClickEdit={editProject}\n            />\n      </div>\n    );\n  }\n\nexport default InputPage;\n"]},"metadata":{},"sourceType":"module"}