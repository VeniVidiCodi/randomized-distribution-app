{"ast":null,"code":"var _jsxFileName = \"/Users/victorsanchez/Documents/programming/git/randomized-distribution-app/frontendReact/sordaapp/src/components/GroupSection/GroupSection.js\";\nimport React, { Component } from 'react';\nimport './GroupSection.css';\nimport NewGroupButton from '../NewGroupButton/NewGroupButton';\nimport GroupCard from '../GroupCard/GroupCard'; // import '../../../../../uniqueID';\n\nimport { nanoid } from 'nanoid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class GroupSection extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      max: 8,\n      min: 2,\n      // menuButtons: [],\n      // showGroupMenu: true,\n      projectName: \"Grouper\",\n      groups: [{\n        groupName: \"Group A\",\n        id: 1\n      }, {\n        groupName: \"Group B\",\n        id: 2\n      }, {\n        groupName: \"Group C\",\n        id: 3\n      }]\n    }; // this.handleClick = this.handleClick.bind(this); EXAMPLE\n    // this.renderGroupMenuButtons = this.renderGroupMenuButtons.bind(this);\n\n    this.addGroup = this.addGroup.bind(this);\n    this.generateGroups = this.generateGroups.bind(this);\n    this.removeGroup = this.removeGroup.bind(this);\n  } //  LIFECYCLE -------------------------------------------------\n\n\n  componentDidMount() {// this.renderGroupMenuButtons();\n  } // EVENT HANDLERS -------------------------------------------------\n  // Add entry to state's group array\n\n\n  addGroup() {\n    // console.log(\"Adding new group...\");\n    let index = this.state.groups.length;\n    let groups = this.state.groups;\n    let groupName = \"Group \" + (index + 1);\n    let group = {\n      groupName: groupName,\n      id: this.state.groups.length + 1\n    }; // Replace with class?\n\n    groups.push(group);\n    this.setState({\n      groups: groups\n    });\n  } // Add multiple entries to group array\n\n\n  generateGroups(e) {\n    console.log(\"Generating multiple groups...\");\n    let num = e.target.innerText;\n    let groups = []; // Resets the groups array\n\n    let showGroupMenu = this.state.showGroupMenu;\n    showGroupMenu = false; // Populate the groups array with chosen number of entries\n\n    for (let i = 0; i < num; i++) {\n      let groupName = \"Group \" + (i + 1);\n      let group = {\n        groupName: groupName,\n        id: i\n      }; // Replace with class?\n\n      groups.push(group);\n    }\n\n    this.setState({\n      groups: groups,\n      showGroupMenu: showGroupMenu\n    });\n  }\n\n  removeGroup(e) {\n    console.log(\"Removing Group...\");\n    console.log(\"OBJECT:\", e); // Targeting element\n\n    const groups = this.state.groups;\n    const target = groups.indexOf(e);\n    console.log(\"TARGET:\", target);\n    groups.splice(1);\n    console.log(groups);\n    this.setState({\n      groups: groups\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"group-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"group-section-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"group-header-caption\",\n          children: \"Groups\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this), this.state.groups.length < this.state.max ? /*#__PURE__*/_jsxDEV(NewGroupButton, {\n          onClick: this.addGroup\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 29\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 31\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"group-items-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"groups-display-wrapper\",\n          children: this.state.groups.map(group => /*#__PURE__*/_jsxDEV(GroupCard, {\n            title: group.groupName,\n            id: group.id,\n            onClick: this.removeGroup\n          }, nanoid(), false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/victorsanchez/Documents/programming/git/randomized-distribution-app/frontendReact/sordaapp/src/components/GroupSection/GroupSection.js"],"names":["React","Component","NewGroupButton","GroupCard","nanoid","GroupSection","constructor","props","state","max","min","projectName","groups","groupName","id","addGroup","bind","generateGroups","removeGroup","componentDidMount","index","length","group","push","setState","e","console","log","num","target","innerText","showGroupMenu","i","indexOf","splice","render","map"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './GroupSection.css';\nimport NewGroupButton from '../NewGroupButton/NewGroupButton';\nimport GroupCard from '../GroupCard/GroupCard';\n// import '../../../../../uniqueID';\nimport { nanoid } from 'nanoid';\n\n\nexport default class GroupSection extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            max: 8,\n            min: 2,\n            // menuButtons: [],\n            // showGroupMenu: true,\n            projectName: \"Grouper\",\n            groups: [\n                {groupName: \"Group A\", id: 1},\n                {groupName: \"Group B\", id: 2},\n                {groupName: \"Group C\", id: 3}\n            ]\n        }\n        // this.handleClick = this.handleClick.bind(this); EXAMPLE\n        // this.renderGroupMenuButtons = this.renderGroupMenuButtons.bind(this);\n        this.addGroup = this.addGroup.bind(this);\n        this.generateGroups = this.generateGroups.bind(this);\n        this.removeGroup = this.removeGroup.bind(this);\n    }    \n\n    //  LIFECYCLE -------------------------------------------------\n    componentDidMount() {\n        // this.renderGroupMenuButtons();\n    }\n\n    // EVENT HANDLERS -------------------------------------------------\n\n    // Add entry to state's group array\n    addGroup() {\n        // console.log(\"Adding new group...\");\n        let index  = this.state.groups.length;\n        let groups = this.state.groups;\n        let groupName = \"Group \" + (index + 1);\n        let group = {\n                        groupName : groupName,\n                        id: this.state.groups.length + 1\n                    }  // Replace with class?\n        groups.push(group);\n        this.setState({groups: groups});\n    }\n\n    // Add multiple entries to group array\n    generateGroups(e) {\n        console.log(\"Generating multiple groups...\");\n        let num = e.target.innerText;\n        let groups = [];    // Resets the groups array\n        let showGroupMenu = this.state.showGroupMenu;\n        showGroupMenu = false;\n\n        // Populate the groups array with chosen number of entries\n        for (let i=0; i<num; i++) {\n            let groupName = \"Group \" + (i + 1);\n            let group = {\n                groupName: groupName,\n                id : i\n            }   // Replace with class?\n            groups.push(group);\n        }\n\n        this.setState({\n            groups: groups,\n            showGroupMenu: showGroupMenu\n        });\n    }\n\n    removeGroup(e) {\n        console.log(\"Removing Group...\");\n        console.log(\"OBJECT:\", e);\n\n        // Targeting element\n        const groups = this.state.groups;\n        const target = groups.indexOf(e)\n        console.log(\"TARGET:\", target);\n\n        groups.splice(1);\n        console.log(groups);\n\n        this.setState({groups: groups});\n    }\n\n\n    render() {\n        return (\n            <div className=\"group-section\">\n\n                <header className=\"group-section-header\">\n                    <div className=\"group-header-caption\">Groups</div>\n                    {this.state.groups.length < this.state.max ? \n                            <NewGroupButton onClick={this.addGroup} /> \n                            : <div></div>\n                        }\n                </header>\n\n                <div className=\"group-items-container\">\n                    <div id=\"groups-display-wrapper\">\n                        {this.state.groups.map((group) => \n                            <GroupCard \n                                key={nanoid()} \n                                title={group.groupName}\n                                id={group.id}\n                                onClick={this.removeGroup} />\n                        )}\n                    </div>\n                </div>   \n                    \n            </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}