{"ast":null,"code":"var _jsxFileName = \"/Users/victorsanchez/Documents/programming/git/randomized-distribution-app/frontendReact/sordaapp/src/components/GroupSection/GroupSection.js\";\nimport React, { Component } from 'react';\nimport './GroupSection.css';\nimport NewGroupButton from '../NewGroupButton/NewGroupButton';\nimport GroupCard from '../GroupCard/GroupCard';\nimport { nanoid } from 'nanoid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class GroupSection extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      max: 8,\n      min: 2,\n      // menuButtons: [],\n      // showGroupMenu: true,\n      projectName: \"\",\n      groups: []\n    }; // this.handleClick = this.handleClick.bind(this); EXAMPLE\n    // this.renderGroupMenuButtons = this.renderGroupMenuButtons.bind(this);\n\n    this.addGroup = this.addGroup.bind(this);\n    this.generateGroups = this.generateGroups.bind(this);\n    this.removeGroup = this.removeGroup.bind(this);\n  } //  LIFECYCLE -------------------------------------------------\n\n\n  componentDidMount() {// this.renderGroupMenuButtons();\n  } // EVENT HANDLERS -------------------------------------------------\n  // Add entry to state's group array\n\n\n  addGroup() {\n    // console.log(\"Adding new group...\");\n    let groups = this.state.groups;\n    let index = groups.length;\n    let groupName = \"Group \" + (index + 1);\n    let group = {\n      groupName: groupName,\n      id: this.state.groups.length + 1,\n      key: nanoid()\n    }; // Replace with class?\n\n    groups.push(group);\n    this.setState({\n      groups: groups\n    });\n  } // Add multiple entries to group array\n\n\n  generateGroups(e) {\n    console.log(\"Generating multiple groups...\");\n    let num = e.target.innerText;\n    let groups = this.state.groups;\n    let showGroupMenu = this.state.showGroupMenu;\n    showGroupMenu = false; // Populate the groups array with chosen number of entries\n\n    for (let i = 0; i < num; i++) {\n      let groupName = \"Group \" + (i + 1);\n      let group = {\n        groupName: groupName,\n        id: i,\n        key: nanoid()\n      }; // Replace with class?\n\n      groups.push(group);\n    }\n\n    this.setState({\n      groups: groups,\n      showGroupMenu: showGroupMenu\n    });\n  }\n\n  removeGroup(e) {\n    console.log(\"Removing Group...\");\n    console.log(\"OBJECT:\", e); // Targeting element\n\n    const groups = this.state.groups;\n    const target = groups.indexOf(e);\n    console.log(\"TARGET:\", target);\n    groups.splice(e, 1); // Fix 'e' which is still giving a value of 0\n\n    console.log(groups);\n    this.setState({\n      groups: groups\n    });\n  } // Model for new group item\n\n\n  createNewGroup() {\n    console.log(\"CREATING NEW GROUP...\");\n    const groups = this.state.groups;\n    const index = groups.length;\n    const groupName = \"Group \" + (index + 1);\n    const id = this.state.groups.length + 1;\n    const key = nanoid();\n    const group = new Group(groupName, id, key);\n    console.log('NEW GROUP:', group);\n  } // Group constructor\n\n\n  NewGroup({\n    groupName,\n    id,\n    key\n  }) {\n    this.groupName = groupName;\n    this.id = id;\n    this.key = key;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"group-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"group-section-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"group-header-caption\",\n          children: \"Groups\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this), this.state.groups.length < this.state.max ? /*#__PURE__*/_jsxDEV(NewGroupButton, {\n          onClick: this.addGroup\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 29\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 31\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"group-items-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"groups-display-wrapper\",\n          children: this.state.groups.map(group => /*#__PURE__*/_jsxDEV(GroupCard, {\n            title: group.groupName,\n            id: group.id,\n            delete: this.removeGroup\n          }, group.key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/victorsanchez/Documents/programming/git/randomized-distribution-app/frontendReact/sordaapp/src/components/GroupSection/GroupSection.js"],"names":["React","Component","NewGroupButton","GroupCard","nanoid","GroupSection","constructor","props","state","max","min","projectName","groups","addGroup","bind","generateGroups","removeGroup","componentDidMount","index","length","groupName","group","id","key","push","setState","e","console","log","num","target","innerText","showGroupMenu","i","indexOf","splice","createNewGroup","Group","NewGroup","render","map"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './GroupSection.css';\nimport NewGroupButton from '../NewGroupButton/NewGroupButton';\nimport GroupCard from '../GroupCard/GroupCard';\nimport { nanoid } from 'nanoid';\n\n\nexport default class GroupSection extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            max: 8,\n            min: 2,\n            // menuButtons: [],\n            // showGroupMenu: true,\n            projectName: \"\",\n            groups: []\n        }\n        // this.handleClick = this.handleClick.bind(this); EXAMPLE\n        // this.renderGroupMenuButtons = this.renderGroupMenuButtons.bind(this);\n        this.addGroup = this.addGroup.bind(this);\n        this.generateGroups = this.generateGroups.bind(this);\n        this.removeGroup = this.removeGroup.bind(this);\n    }    \n\n    //  LIFECYCLE -------------------------------------------------\n    componentDidMount() {\n        // this.renderGroupMenuButtons();\n    }\n\n    // EVENT HANDLERS -------------------------------------------------\n\n    // Add entry to state's group array\n    addGroup() {\n        // console.log(\"Adding new group...\");\n        let groups = this.state.groups;\n        let index  = groups.length;\n        let groupName = \"Group \" + (index + 1);\n        let group = {\n                        groupName : groupName,\n                        id: this.state.groups.length + 1,\n                        key: nanoid()\n                    }  // Replace with class?\n        groups.push(group);\n        this.setState({groups: groups});\n    }\n\n    // Add multiple entries to group array\n    generateGroups(e) {\n        console.log(\"Generating multiple groups...\");\n        let num = e.target.innerText;\n        let groups = this.state.groups;\n        let showGroupMenu = this.state.showGroupMenu;\n        showGroupMenu = false;\n\n        // Populate the groups array with chosen number of entries\n        for (let i=0; i<num; i++) {\n            let groupName = \"Group \" + (i + 1);\n            let group = {\n                groupName: groupName,\n                id : i,\n                key: nanoid()\n            }   // Replace with class?\n            groups.push(group);\n        }\n\n        this.setState({\n            groups: groups,\n            showGroupMenu: showGroupMenu\n        });\n    }\n\n    removeGroup(e) {\n        console.log(\"Removing Group...\");\n        console.log(\"OBJECT:\", e);\n\n        // Targeting element\n        const groups = this.state.groups;\n        const target = groups.indexOf(e)\n        console.log(\"TARGET:\", target);\n\n        groups.splice(e, 1);    // Fix 'e' which is still giving a value of 0\n        console.log(groups);\n\n        this.setState({groups: groups});\n    }\n\n    // Model for new group item\n    createNewGroup() {\n        console.log(\"CREATING NEW GROUP...\");\n        const groups = this.state.groups;\n        const index  = groups.length;\n        const groupName = \"Group \" + (index + 1);\n        const id = this.state.groups.length + 1;\n        const key = nanoid();\n        const group = new Group(groupName, id, key);\n        console.log('NEW GROUP:', group);\n    }\n    \n    // Group constructor\n    NewGroup({groupName, id, key}) {\n        this.groupName = groupName;\n        this.id = id;\n        this.key = key;\n    } \n\n    render() {\n        return (\n            <div className=\"group-section\">\n\n                <header className=\"group-section-header\">\n                    <div className=\"group-header-caption\">Groups</div>\n                    {this.state.groups.length < this.state.max ? \n                            <NewGroupButton onClick={this.addGroup} /> \n                            : <div></div>\n                        }\n                </header>\n\n                <div className=\"group-items-container\">\n                    <div id=\"groups-display-wrapper\">\n                        {this.state.groups.map((group) => \n                            <GroupCard \n                                key={group.key} \n                                title={group.groupName}\n                                id={group.id}\n                                delete={this.removeGroup} />\n                        )}\n                    </div>\n                </div>   \n                    \n            </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}