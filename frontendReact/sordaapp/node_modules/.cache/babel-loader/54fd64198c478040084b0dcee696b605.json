{"ast":null,"code":"var _jsxFileName = \"/Users/victorsanchez/Documents/programming/git/randomized-distribution-app/frontendReact/sordaapp/src/components/AppPages/InputPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Nav from '../Nav/Nav';\nimport TitleBar from '../TitleBar/TitleBar';\nimport GroupSection from '../GroupSection/GroupSection';\nimport RosterSection from '../RosterSection/RosterSection';\nimport Footer from '../Footer/Footer';\nimport { Group } from '../../groupClass';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction InputPage() {\n  _s();\n\n  let GroupObject = new Group();\n  GroupObject.projectName = \"My Project\"; // GroupObject.groupNames = ['food', 'music', 'decor'];\n\n  const [aGroupObject, setAGroupObject] = useState(GroupObject);\n  const [aProjectName, setAProjectName] = useState(GroupObject.projectName);\n  const [aGroupNames, setAGroupNames] = useState(GroupObject.groupNames); // const [aPersons, setAPersons] = useState(GroupObject.persons);\n  // const [showTitle, setShowTitle] = useState(true);\n  // Emulate componentDidMount lifecycle(s)  = = = = = = = = = = = = = = = = = = = = =\n\n  useEffect(() => {\n    console.log(\"use effect group state\");\n  }, [aGroupObject]);\n  useEffect(() => {\n    console.log(\"use effect project name\");\n  }, [aProjectName]);\n  useEffect(() => {\n    console.log(\"use effect group names\");\n  }); // Title Behavior  = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n  // let handleChange = (event) => {\n  //   console.log('Handling Change: ' + event.target.value);\n  //   // this.setState({title: event.target.value});\n  //   setAProjectName(event.target.value);\n  // }\n  // let handleSubmit = (event) => {\n  //   console.log('Submitting title: ' + event.target.value);\n  //   // event.preventDefault();\n  //   // props.setTitle\n  //   toggleTitle();\n  // }\n  // let toggleTitle = () => {\n  //   console.log(\"Toggling Title\" );\n  //   if (showTitle) {\n  //       console.log(\"T -> F\");\n  //       setShowTitle(false);\n  //       // this.setState({showTitle: false})\n  //     } else {\n  //       console.log(\"F -> T\");\n  //       setShowTitle(true);\n  //       // this.setState({showTitle: true})\n  //     };\n  // }\n  // Group Section Behavior  = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n  // let handleGroupsChange = newGroupsArr => {\n  //   console.log('setNewGroupsArr:', newGroupsArr);\n  //   setAGroupNames(newGroupsArr); \n  // }\n  // let createNewGroup = () => { \n  //   let length = aGroupNames.length;\n  //   let name = \"Group \" + (length + 1);\n  //   console.log(name);\n  //   return name;\n  // }\n  // let addGroup = () => {\n  //   console.log(\"addGroup clicked...\");\n  //   let tempGroupNames = aGroupNames;\n  //   let newGroup = createNewGroup();\n  //   tempGroupNames.push(newGroup);\n  //   console.log(tempGroupNames);\n  //   setAGroupNames(tempGroupNames);\n  // }\n  // Footer Button Handler  = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\n  let shuffleData = () => {\n    console.log(\"shuffle clicked...\"); // Shuffle Roster Items randomly\n    // Assign each roster item a group #\n    // Save shuffled data as new group object\n\n    saveProject(); // return <Redirect push to={{ pathname: '/results', groupObject: aProjectState, fromInput=true }} />\n  };\n\n  let saveProject = () => {\n    console.log('saving shuffled project...'); // let tempGroupObject = aGroupObject;\n    // tempGroupObject.projectName = aProjectName;\n    // tempGroupObject.groupNames = aGroupNames;\n    // // tempGroupObject.persons = aPersons;\n    // console.log('new object to save:', tempGroupObject);\n    // setAGroupObject(tempGroupObject);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(Nav, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(TitleBar, {\n        title: aProjectName,\n        setTitle: setAProjectName // handleChange={handleChange}\n        // handleSubmit={handleSubmit}\n        // showTitle={showTitle}\n        // toggleTitle={toggleTitle} \n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      id: \"entry-container\",\n      children: [/*#__PURE__*/_jsxDEV(GroupSection, {\n        groupNames: aGroupNames,\n        setGroupNames: setAGroupNames // addGroup={addGroup}\n        // handleChange={handleGroupChange}\n        // setGroupNames={(group) => setAGroupNames(group)} \n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(RosterSection, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {\n      GroupObject: GroupObject,\n      value: \"Shuffle\",\n      text: \"Shuffle\",\n      onClick: shuffleData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 9\n  }, this);\n}\n\n_s(InputPage, \"/FhFJBrrOyNiMDB+i4wupGmR8Uc=\");\n\n_c = InputPage;\nexport default InputPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"InputPage\");","map":{"version":3,"sources":["/Users/victorsanchez/Documents/programming/git/randomized-distribution-app/frontendReact/sordaapp/src/components/AppPages/InputPage.js"],"names":["React","useState","useEffect","Nav","TitleBar","GroupSection","RosterSection","Footer","Group","InputPage","GroupObject","projectName","aGroupObject","setAGroupObject","aProjectName","setAProjectName","aGroupNames","setAGroupNames","groupNames","console","log","shuffleData","saveProject"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Nav from '../Nav/Nav';\nimport TitleBar from '../TitleBar/TitleBar';\nimport GroupSection from '../GroupSection/GroupSection';\nimport RosterSection from '../RosterSection/RosterSection';\nimport Footer from '../Footer/Footer';\nimport { Group } from '../../groupClass';\n\n\nfunction InputPage () {\n  let GroupObject = new Group();\n  GroupObject.projectName = \"My Project\";\n  // GroupObject.groupNames = ['food', 'music', 'decor'];\n\n  const [aGroupObject, setAGroupObject] = useState(GroupObject);\n  const [aProjectName, setAProjectName] = useState(GroupObject.projectName);\n  const [aGroupNames, setAGroupNames] = useState(GroupObject.groupNames);\n  // const [aPersons, setAPersons] = useState(GroupObject.persons);\n  \n  // const [showTitle, setShowTitle] = useState(true);\n\n\n  // Emulate componentDidMount lifecycle(s)  = = = = = = = = = = = = = = = = = = = = =\n  \n  useEffect(() => {\n    console.log(\"use effect group state\");\n  }, [aGroupObject])\n\n  useEffect(() => {\n    console.log(\"use effect project name\");\n  }, [aProjectName])\n\n  useEffect(() => {\n    console.log(\"use effect group names\");\n  })\n\n   \n  // Title Behavior  = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\n  // let handleChange = (event) => {\n  //   console.log('Handling Change: ' + event.target.value);\n  //   // this.setState({title: event.target.value});\n  //   setAProjectName(event.target.value);\n  // }\n  \n  // let handleSubmit = (event) => {\n  //   console.log('Submitting title: ' + event.target.value);\n  //   // event.preventDefault();\n  //   // props.setTitle\n  //   toggleTitle();\n  // }\n\n  // let toggleTitle = () => {\n  //   console.log(\"Toggling Title\" );\n  //   if (showTitle) {\n  //       console.log(\"T -> F\");\n  //       setShowTitle(false);\n  //       // this.setState({showTitle: false})\n  //     } else {\n  //       console.log(\"F -> T\");\n  //       setShowTitle(true);\n  //       // this.setState({showTitle: true})\n  //     };\n  // }\n\n\n  // Group Section Behavior  = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\n  // let handleGroupsChange = newGroupsArr => {\n  //   console.log('setNewGroupsArr:', newGroupsArr);\n  //   setAGroupNames(newGroupsArr); \n  // }\n\n  // let createNewGroup = () => { \n  //   let length = aGroupNames.length;\n  //   let name = \"Group \" + (length + 1);\n  //   console.log(name);\n  //   return name;\n  // }\n\n  // let addGroup = () => {\n  //   console.log(\"addGroup clicked...\");\n\n  //   let tempGroupNames = aGroupNames;\n  //   let newGroup = createNewGroup();\n  //   tempGroupNames.push(newGroup);\n  //   console.log(tempGroupNames);\n\n  //   setAGroupNames(tempGroupNames);\n  // }\n\n\n  // Footer Button Handler  = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n  \n  let shuffleData = () => {\n    console.log(\"shuffle clicked...\");\n    // Shuffle Roster Items randomly\n    \n    // Assign each roster item a group #\n    \n    // Save shuffled data as new group object\n    saveProject();\n    \n    // return <Redirect push to={{ pathname: '/results', groupObject: aProjectState, fromInput=true }} />\n  }\n\n  let saveProject = () => {\n    console.log('saving shuffled project...');\n    // let tempGroupObject = aGroupObject;\n\n    // tempGroupObject.projectName = aProjectName;\n    // tempGroupObject.groupNames = aGroupNames;\n    // // tempGroupObject.persons = aPersons;\n\n    // console.log('new object to save:', tempGroupObject);\n    // setAGroupObject(tempGroupObject);\n  }\n\n    return (\n        <div>\n          <header className=\"App-header\">\n            <Nav />\n\n            <TitleBar \n              title={aProjectName} \n              setTitle={setAProjectName}\n              // handleChange={handleChange}\n              // handleSubmit={handleSubmit}\n              // showTitle={showTitle}\n              // toggleTitle={toggleTitle} \n              /> \n\n          </header>\n\n          <main id=\"entry-container\">\n            <GroupSection \n              groupNames={aGroupNames}\n              setGroupNames={setAGroupNames}\n              // addGroup={addGroup}\n              // handleChange={handleGroupChange}\n              // setGroupNames={(group) => setAGroupNames(group)} \n              />\n              \n            <RosterSection />\n            \n          </main>\n\n          <Footer \n            GroupObject={GroupObject}\n            value=\"Shuffle\" \n            text=\"Shuffle\"\n            onClick={shuffleData} />\n        </div>\n    );\n  }\n\nexport default InputPage;\n"]},"metadata":{},"sourceType":"module"}