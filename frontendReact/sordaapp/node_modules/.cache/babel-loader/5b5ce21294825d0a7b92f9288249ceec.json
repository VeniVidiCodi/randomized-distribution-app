{"ast":null,"code":"var _jsxFileName = \"/Users/victorsanchez/Documents/programming/git/randomized-distribution-app/frontendReact/sordaapp/src/components/RosterSection/RosterSection.js\";\nimport React, { Component } from 'react';\nimport './RosterSection.css';\nimport RosterItem from '../RosterItem/RosterItem';\nimport NewItemButton from '../NewItemButton/NewItemButton';\nimport { nanoid } from 'nanoid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass RosterSection extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rosterMax: 40,\n      rosterMin: 2,\n      // OR min. should be at least the number of groups created...\n      // menuRange: [],\n      showRoster: true,\n      // selectValue: null,\n      roster: [// {key: null, name: \"Kenly\", group: 1},\n        // {key: null, name: \"Victor\", group: 2}\n      ]\n    }; // this.renderSelectMenu = this.renderSelectMenu.bind(this);\n\n    this.generateItems = this.generateItems.bind(this);\n    this.addItem = this.addItem.bind(this); // this.handleChange = this.handleChange.bind(this);\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n  } //  LIFECYCLE METHODS  -------------------------------------------------\n\n\n  componentDidMount() {} //  EVENT HANDLERS  -------------------------------------------------\n\n\n  handleChange(event) {\n    this.setState({\n      selectValue: event.target.value\n    });\n  }\n\n  handleSubmit(event) {\n    alert('You chose: ' + this.state.selectValue);\n    event.preventDefault();\n    this.generateItems(this.state.selectValue);\n  } // CREATE GENERIC LIST ITEMS BASED ON CHOSEN MENU SELECT OPTION \n\n\n  generateItems(num) {\n    console.log('Generate roster list based on...', num);\n    let roster = []; // Reset the roster items array\n\n    let showRoster = this.state.showRoster; // Populate the roster array with chosen number of entries\n\n    for (let i = 0; i < num; i++) {\n      let genericName = \"Item \" + (i + 1);\n      let key = nanoid();\n      let item = {\n        // TO DO:  Replace with formatted class?\n        name: genericName,\n        key: key,\n        group: null\n      };\n      roster.push(item);\n    }\n\n    this.setState({\n      roster: roster\n    });\n  }\n\n  addItem() {\n    console.log('Add Roster Item...');\n    let index = this.state.roster.length;\n    let roster = this.state.roster;\n    let newIndex = index + 1;\n    let item = {\n      key: nanoid(),\n      name: 'Item' + newIndex,\n      group: ''\n    }; // Replace with class?\n\n    roster.push(item);\n    this.setState({\n      roster: roster\n    });\n  }\n\n  deleteItem() {\n    console.log('Deleting Item...'); // Remove item from roster\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"roster-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"roster-section-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"roster-header-caption\",\n          children: \"Roster/Items:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this), this.state.roster.length < this.state.rosterMax ? /*#__PURE__*/_jsxDEV(NewItemButton, {\n          onClick: this.addItem\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 29\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"roster-items-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"roster-display-wrapper\",\n          children: this.state.roster.map(item => /*#__PURE__*/_jsxDEV(RosterItem, {\n            name: item.name\n          }, item.key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default RosterSection;","map":{"version":3,"sources":["/Users/victorsanchez/Documents/programming/git/randomized-distribution-app/frontendReact/sordaapp/src/components/RosterSection/RosterSection.js"],"names":["React","Component","RosterItem","NewItemButton","nanoid","RosterSection","constructor","props","state","rosterMax","rosterMin","showRoster","roster","generateItems","bind","addItem","handleSubmit","componentDidMount","handleChange","event","setState","selectValue","target","value","alert","preventDefault","num","console","log","i","genericName","key","item","name","group","push","index","length","newIndex","deleteItem","render","map"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './RosterSection.css';\nimport RosterItem from '../RosterItem/RosterItem';\nimport NewItemButton from '../NewItemButton/NewItemButton';\nimport { nanoid } from 'nanoid';\n\nclass RosterSection extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            rosterMax: 40,\n            rosterMin: 2,  // OR min. should be at least the number of groups created...\n            // menuRange: [],\n            showRoster: true,\n            // selectValue: null,\n            roster: [\n                // {key: null, name: \"Kenly\", group: 1},\n                // {key: null, name: \"Victor\", group: 2}\n            ]\n        }\n\n        // this.renderSelectMenu = this.renderSelectMenu.bind(this);\n        this.generateItems = this.generateItems.bind(this);\n        this.addItem = this.addItem.bind(this);\n        // this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }    \n\n    //  LIFECYCLE METHODS  -------------------------------------------------\n    componentDidMount() {\n\n    }\n    \n    \n    //  EVENT HANDLERS  -------------------------------------------------\n    handleChange(event) {\n        this.setState({selectValue: event.target.value});\n    }\n\n    handleSubmit(event) {\n        alert('You chose: ' + this.state.selectValue);\n        event.preventDefault();\n        this.generateItems(this.state.selectValue);\n    }\n\n    // CREATE GENERIC LIST ITEMS BASED ON CHOSEN MENU SELECT OPTION \n    generateItems(num) {\n        console.log('Generate roster list based on...', num);\n\n        let roster = [];    // Reset the roster items array\n        let showRoster = this.state.showRoster;\n\n        // Populate the roster array with chosen number of entries\n        for (let i=0; i<num; i++) {\n            let genericName = \"Item \" + (i + 1);\n            let key = nanoid();\n            let item = {                // TO DO:  Replace with formatted class?\n                name: genericName,\n                key : key,\n                group: null\n            }\n\n            roster.push(item);\n        }\n\n        this.setState({\n            roster: roster\n        });\n    }\n\n    addItem() {\n        console.log('Add Roster Item...')\n        let index  = this.state.roster.length;\n        let roster = this.state.roster;\n        let newIndex = index + 1;\n        let item = {\n                        key: nanoid(),\n                        name : 'Item' + newIndex,\n                        group: ''\n                    }  // Replace with class?\n        roster.push(item);\n        this.setState({roster: roster});\n    }\n\n    deleteItem () {\n        console.log('Deleting Item...');\n        // Remove item from roster\n    }\n\n    \n    render() {\n        return (\n            <div className=\"roster-section\">\n\n                <header className=\"roster-section-header\">\n                    <div className=\"roster-header-caption\">Roster/Items:</div>\n                    {(this.state.roster.length < this.state.rosterMax) ? \n                            <NewItemButton onClick={this.addItem} /> :\n                            <div></div>\n                        } \n                </header>\n\n                <div className=\"roster-items-container\">\n                    <div id=\"roster-display-wrapper\">\n                        {this.state.roster.map(item => \n                            <RosterItem \n                                key={item.key} \n                                name={item.name} />\n                        )}\n                    </div>\n                </div>\n                \n            </div>\n        )\n    }\n }\nexport default RosterSection;"]},"metadata":{},"sourceType":"module"}