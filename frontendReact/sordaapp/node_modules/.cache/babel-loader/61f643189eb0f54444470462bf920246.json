{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/kenlyberkowitz/Documents/Working_Folder/express-projects/randomized-distribution-app/frontendReact/sordaapp/src/components/InputCSV/InputCSV.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport CSVmodal from './CSVmodal';\nimport \"./InputCSV.css\";\n\nfunction InputCSV(props) {\n  _s();\n\n  let fileReader;\n  const [array, setArray] = useState([]);\n  const [isOpenModal, setIsOpenModal] = useState(false); // handle the opened file and read results\n  // parse the contents by endline,\n  // then by comma and makesure there are no empty strings\n\n  const handleFileRead = e => {\n    const content = fileReader.result;\n    let newArr = []; //go through content and split lines by endline\n\n    let contentArr = content.split(\"\\n\"); //go through content and split lines by commas\n\n    contentArr.forEach(element => {\n      newArr.push(element.split(\",\"));\n    }); //flatten 2D array and filter empty spaces if any\n\n    let newArr2 = newArr.flat();\n    let newArr3 = newArr2.filter(fruit => fruit && fruit.trim());\n\n    if (newArr3.length <= 30 && newArr3 > 0) {\n      setArray(newArr3);\n    } else {\n      alert(\"Your list of CSV items is larger than 30 or is empty. \\n Please ensure your formatting is correct. \\n ex: mike,susie,max\");\n    }\n\n    console.log(newArr3);\n  }; //handles and opens file to be read\n\n\n  const handleFileChosen = file => {\n    fileReader = new FileReader();\n    fileReader.onloadend = handleFileRead;\n    fileReader.readAsText(file);\n  };\n\n  function handleYesOrNoBtn(bool) {\n    if (bool === true) {\n      props.handleArray(array);\n      setIsOpenModal(!isOpenModal);\n    }\n  }\n\n  useEffect(() => {\n    setIsOpenModal(!isOpenModal);\n  }, [array]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"upload-csv\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      id: \"file\",\n      className: \"input-file\",\n      accept: \".csv\",\n      onChange: e => handleFileChosen(e.target.files[0])\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), isOpenModal && /*#__PURE__*/_jsxDEV(CSVmodal, {\n      arrayValue: array,\n      handleBtnSubmit: handleYesOrNoBtn\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n\n_s(InputCSV, \"Dujaxexhdb83S34ZGsLxy7awruw=\");\n\n_c = InputCSV;\nexport default InputCSV; // {array.map((strValue, index) => (\n//   <div key={index}>{strValue}</div>\n// ))}\n\nvar _c;\n\n$RefreshReg$(_c, \"InputCSV\");","map":{"version":3,"sources":["/Users/kenlyberkowitz/Documents/Working_Folder/express-projects/randomized-distribution-app/frontendReact/sordaapp/src/components/InputCSV/InputCSV.js"],"names":["useState","useEffect","CSVmodal","InputCSV","props","fileReader","array","setArray","isOpenModal","setIsOpenModal","handleFileRead","e","content","result","newArr","contentArr","split","forEach","element","push","newArr2","flat","newArr3","filter","fruit","trim","length","alert","console","log","handleFileChosen","file","FileReader","onloadend","readAsText","handleYesOrNoBtn","bool","handleArray","target","files"],"mappings":";;;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAO,gBAAP;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAAA;;AAEvB,MAAIC,UAAJ;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACQ,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,CAAC,KAAD,CAA9C,CAJuB,CAOvB;AACA;AACA;;AACA,QAAMU,cAAc,GAAIC,CAAD,IAAO;AAC5B,UAAMC,OAAO,GAAGP,UAAU,CAACQ,MAA3B;AACA,QAAIC,MAAM,GAAG,EAAb,CAF4B,CAI5B;;AACA,QAAIC,UAAU,GAAGH,OAAO,CAACI,KAAR,CAAc,IAAd,CAAjB,CAL4B,CAO5B;;AACAD,IAAAA,UAAU,CAACE,OAAX,CAAoBC,OAAD,IAAa;AAC9BJ,MAAAA,MAAM,CAACK,IAAP,CAAYD,OAAO,CAACF,KAAR,CAAc,GAAd,CAAZ;AACD,KAFD,EAR4B,CAY5B;;AACA,QAAII,OAAO,GAAGN,MAAM,CAACO,IAAP,EAAd;AACA,QAAIC,OAAO,GAAGF,OAAO,CAACG,MAAR,CAAgBC,KAAD,IAAWA,KAAK,IAAIA,KAAK,CAACC,IAAN,EAAnC,CAAd;;AAEA,QAAGH,OAAO,CAACI,MAAR,IAAkB,EAAlB,IAAwBJ,OAAO,GAAG,CAArC,EAAuC;AACrCf,MAAAA,QAAQ,CAACe,OAAD,CAAR;AACD,KAFD,MAGK;AACHK,MAAAA,KAAK,CAAC,0HAAD,CAAL;AACD;;AACDC,IAAAA,OAAO,CAACC,GAAR,CAAYP,OAAZ;AACD,GAvBD,CAVuB,CAoCvB;;;AACA,QAAMQ,gBAAgB,GAAIC,IAAD,IAAU;AACjC1B,IAAAA,UAAU,GAAG,IAAI2B,UAAJ,EAAb;AACA3B,IAAAA,UAAU,CAAC4B,SAAX,GAAuBvB,cAAvB;AACAL,IAAAA,UAAU,CAAC6B,UAAX,CAAsBH,IAAtB;AACD,GAJD;;AAOA,WAASI,gBAAT,CAA0BC,IAA1B,EAAgC;AAC9B,QAAIA,IAAI,KAAK,IAAb,EAAmB;AACjBhC,MAAAA,KAAK,CAACiC,WAAN,CAAkB/B,KAAlB;AACAG,MAAAA,cAAc,CAAC,CAACD,WAAF,CAAd;AACD;AACF;;AAGDP,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,cAAc,CAAC,CAACD,WAAF,CAAd;AACD,GAFQ,EAEN,CAACF,KAAD,CAFM,CAAT;AAKA,sBACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA,4BACE;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,EAAE,EAAC,MAFL;AAGE,MAAA,SAAS,EAAC,YAHZ;AAIE,MAAA,MAAM,EAAC,MAJT;AAKE,MAAA,QAAQ,EAAGK,CAAD,IAAOmB,gBAAgB,CAACnB,CAAC,CAAC2B,MAAF,CAASC,KAAT,CAAe,CAAf,CAAD;AALnC;AAAA;AAAA;AAAA;AAAA,YADF,EAQG/B,WAAW,iBAAI,QAAC,QAAD;AAAU,MAAA,UAAU,EAAEF,KAAtB;AAA6B,MAAA,eAAe,EAAE6B;AAA9C;AAAA;AAAA;AAAA;AAAA,YARlB;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD;;GArEQhC,Q;;KAAAA,Q;AAuET,eAAeA,QAAf,C,CAGA;AACA;AACA","sourcesContent":["import { useState, useEffect } from \"react\";\nimport CSVmodal from './CSVmodal'\nimport \"./InputCSV.css\";\n\nfunction InputCSV(props) {\n\n  let fileReader;\n  const [array, setArray] = useState([]);\n  const [isOpenModal, setIsOpenModal] = useState(false);\n\n\n  // handle the opened file and read results\n  // parse the contents by endline,\n  // then by comma and makesure there are no empty strings\n  const handleFileRead = (e) => {\n    const content = fileReader.result;\n    let newArr = [];\n\n    //go through content and split lines by endline\n    let contentArr = content.split(\"\\n\");\n\n    //go through content and split lines by commas\n    contentArr.forEach((element) => {\n      newArr.push(element.split(\",\"));\n    });\n\n    //flatten 2D array and filter empty spaces if any\n    let newArr2 = newArr.flat();\n    let newArr3 = newArr2.filter((fruit) => fruit && fruit.trim());\n\n    if(newArr3.length <= 30 && newArr3 > 0){\n      setArray(newArr3);\n    }\n    else {\n      alert(\"Your list of CSV items is larger than 30 or is empty. \\n Please ensure your formatting is correct. \\n ex: mike,susie,max\");\n    }\n    console.log(newArr3);\n  };\n\n\n  //handles and opens file to be read\n  const handleFileChosen = (file) => {\n    fileReader = new FileReader();\n    fileReader.onloadend = handleFileRead;\n    fileReader.readAsText(file);\n  };\n\n\n  function handleYesOrNoBtn(bool) {\n    if (bool === true) {\n      props.handleArray(array);\n      setIsOpenModal(!isOpenModal);\n    }\n  }\n\n\n  useEffect(() => {\n    setIsOpenModal(!isOpenModal);\n  }, [array]);\n\n\n  return (\n    <div className=\"upload-csv\">\n      <input\n        type=\"file\"\n        id=\"file\"\n        className=\"input-file\"\n        accept=\".csv\"\n        onChange={(e) => handleFileChosen(e.target.files[0])}\n      />\n      {isOpenModal && <CSVmodal arrayValue={array} handleBtnSubmit={handleYesOrNoBtn} />}\n    </div>\n  );\n}\n\nexport default InputCSV;\n\n\n// {array.map((strValue, index) => (\n//   <div key={index}>{strValue}</div>\n// ))}\n"]},"metadata":{},"sourceType":"module"}