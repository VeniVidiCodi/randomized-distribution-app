{"ast":null,"code":"var _jsxFileName = \"/Users/victorsanchez/Documents/programming/git/randomized-distribution-app/frontendReact/sordaapp/src/components/AppPages/ResultPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Nav from '../Nav/Nav';\nimport ResultDisplay from '../ResultDisplay/ResultDisplay';\nimport Footer from '../Footer/Footer';\nimport ResultsTitle from '../ResultsTitle/ResultsTitle';\nimport { Group } from '../../utils/groupClass.js'; //watch out for utils. keep for merge\n\nimport { Redirect } from 'react-router-dom';\nimport { postRequest } from \"../../utils/queries.js\";\nimport \"./ModalPassword.css\"; // import Modal from \"react-modal\";\n// Modal.setAppElement(\"#root\");\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ResultsPage(props) {\n  _s();\n\n  let GroupObject = new Group();\n\n  if (props.location.fromLandingPage) {\n    GroupObject = () => {\n      let tempGroup = new Group();\n      tempGroup.persons = props.location.json.persons;\n      tempGroup.groupNames = props.location.json.groupNames;\n      tempGroup.setProjectName(props.location.json.projectName);\n      return tempGroup;\n    };\n  } else {\n    GroupObject = props.location.GroupObject;\n  } // –––––––\n  //  State\n  // –––––––\n\n\n  const [aGroupObject, setGroupObject] = useState(GroupObject); // const [fromLandingPage, setFromLandingPage] = useState(props.location.fromLandingPage);\n  // const [fromInputPage, setFromInputPage] = useState(props.location.fromInputPage);\n\n  const [aJson, setAjson] = useState(props.location.json);\n  const [editButtonClicked, setEditButtonClicked] = useState(false);\n  const [saveButtonClicked, setSaveButtonClicked] = useState(false);\n  const [isOpen, setIsOpen] = useState(false); // Check console to see from which page is being received\n  // console.log(\"FROM LANDING:\", fromLandingPage);\n  // console.log(\"FROM INPUT:\", fromInputPage);\n  // ––––––––\n  // Behavior\n  // ––––––––\n\n  async function handleOnClickSave() {\n    console.log(\"SAVE BUTTON CLICKED...\"); //save to db by using utility component\n\n    const groups = new Group(); // groups.setProjectName(\"Project Safari\");\n    // groups.addPerson(new Person(\"Lion\", 1));\n    // groups.addPerson(new Person(\"Elephant\", 2));\n    // groups.addGroupNames(new GroupName(\"Section Danger\"));\n    // groups.addGroupNames(new GroupName(\"Section Safe\"));\n\n    groups.setProjectName(aGroupObject.projectName);\n    groups.persons = aGroupObject.persons;\n    groups.groupNames = aGroupObject.groupNames;\n    var myJSON = JSON.stringify(groups); //aGroupObject\n\n    console.log(JSON.stringify(JSON.parse(myJSON), null, 2)); // let json = postRequest(myJSON).then(result => {\n    //   console.log(result);\n    //   return result;\n    // });\n\n    await call(myJSON);\n    setSaveButtonClicked(!saveButtonClicked);\n  }\n\n  async function call(myJSON) {\n    const json = await postRequest(myJSON); //call the API to get the user data\n\n    if (json !== null) {\n      console.log(json);\n      setAjson(json);\n    } else {\n      console.log(\"No Project returned; Object:null\");\n    }\n  } //when the edit button is clicked, setEditButtonClicked is set to true which triggers the conditional below function.\n  // function handleOnClickEdit(){\n  //   if(saveButtonClicked)\n  //     toggleModal();\n  //   else if (props.location.fromInputPage)\n  //     setEditButtonClicked(true);\n  //   else\n  //     toggleModal();\n  // }\n  // function toggleModal() {\n  //   setIsOpen(!isOpen);\n  // }\n  //–––––––––\n  //–– Modal\n  //–––––––––\n\n\n  const [password, setPassword] = useState(\"\");\n\n  function handleChange(event) {\n    const tempPassword = event.target.value;\n    setPassword(tempPassword);\n    event.preventDefault();\n  }\n\n  function handleSubmit(event) {\n    if (password === aJson.accessPassword) setEditButtonClicked(true);\n    event.preventDefault();\n  } // Checks and sends correct state data type to input page\n\n\n  if (editButtonClicked) {\n    if (props.location.fromLandingPage) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: {\n          pathname: '/grouper',\n          json: aJson,\n          fromResultPage: true,\n          fromLandingPage: false,\n          fromInputPage: false\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 14\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: {\n          pathname: '/grouper',\n          GroupObject: aGroupObject,\n          fromResultPage: true,\n          fromLandingPage: false,\n          fromInputPage: false\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 14\n      }, this);\n    }\n  } // function displayModal() {\n  //   return(\n  //   <Modal\n  //     isOpen={isOpen}\n  //     onRequestClose={toggleModal}\n  //     contentLabel=\"My dialog\"\n  //     className=\"mymodal\"\n  //     overlayClassName=\"myoverlay\"\n  //     closeTimeoutMS={250}\n  //     shouldCloseOnOverlayClick={false}\n  //     >\n  //     <div className=\"projectIDText\">Project ID: {aJson.uniqueID}</div>\n  //     <div className=\"inputPasswordField\">\n  //       <form onSubmit={handleSubmit}>\n  //         <input\n  //           value={password}\n  //           onChange={handleChange}\n  //           type=\"text\"\n  //           name=\"AccessID\"\n  //           placeholder=\"Enter Passcode\"\n  //           className=\"textField\"\n  //           maxLength=\"7\" />\n  //         <button type=\"submit\" name=\"getResultsPage\" className=\"submit\">GO</button>\n  //       </form>\n  //     </div>\n  //     <button className=\"closeButton\" onClick={toggleModal}>Close</button>\n  //   </Modal>\n  //   );\n  // }\n\n\n  function resultsTitle() {\n    if (props.location.fromLandingPage || saveButtonClicked) {\n      return /*#__PURE__*/_jsxDEV(ResultsTitle, {\n        title: aGroupObject.projectName,\n        accessID: aJson.uniqueID,\n        useJson: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(ResultsTitle, {\n        title: aGroupObject.projectName,\n        useJson: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: [/*#__PURE__*/_jsxDEV(Nav, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 11\n      }, this), resultsTitle()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      id: \"entry-container\",\n      children: /*#__PURE__*/_jsxDEV(ResultDisplay, {\n        groupObject: aGroupObject\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Footer // value=\"Save\"\n    , {\n      fromInputPage: props.location.fromInputPage\n      /* need fromLandingPage boolean */\n      ,\n      fromLandingPage: props.location.fromLandingPage,\n      saveButtonClicked: saveButtonClicked,\n      onClickEdit: handleOnClickEdit,\n      onClickSave: handleOnClickSave\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 184,\n    columnNumber: 7\n  }, this);\n}\n\n_s(ResultsPage, \"GXmB45v6c63X7JqcP18d15Ig8hs=\");\n\n_c = ResultsPage;\nexport default ResultsPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"ResultsPage\");","map":{"version":3,"sources":["/Users/victorsanchez/Documents/programming/git/randomized-distribution-app/frontendReact/sordaapp/src/components/AppPages/ResultPage.js"],"names":["React","useState","Nav","ResultDisplay","Footer","ResultsTitle","Group","Redirect","postRequest","ResultsPage","props","GroupObject","location","fromLandingPage","tempGroup","persons","json","groupNames","setProjectName","projectName","aGroupObject","setGroupObject","aJson","setAjson","editButtonClicked","setEditButtonClicked","saveButtonClicked","setSaveButtonClicked","isOpen","setIsOpen","handleOnClickSave","console","log","groups","myJSON","JSON","stringify","parse","call","password","setPassword","handleChange","event","tempPassword","target","value","preventDefault","handleSubmit","accessPassword","pathname","fromResultPage","fromInputPage","resultsTitle","uniqueID","handleOnClickEdit"],"mappings":"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","sourcesContent":["\nimport React, { useState } from 'react';\nimport Nav from '../Nav/Nav';\nimport ResultDisplay from '../ResultDisplay/ResultDisplay';\nimport Footer from '../Footer/Footer';\nimport ResultsTitle from '../ResultsTitle/ResultsTitle';\nimport { Group } from '../../utils/groupClass.js';  //watch out for utils. keep for merge\nimport { Redirect } from 'react-router-dom';\nimport { postRequest } from \"../../utils/queries.js\";\n\nimport \"./ModalPassword.css\";\n\n// import Modal from \"react-modal\";\n// Modal.setAppElement(\"#root\");\n\n\nfunction ResultsPage(props) {\n\n  let GroupObject = new Group();\n\n  if (props.location.fromLandingPage) {\n    GroupObject = () => {\n       let tempGroup = new Group();\n       tempGroup.persons = props.location.json.persons;\n       tempGroup.groupNames = props.location.json.groupNames;\n       tempGroup.setProjectName(props.location.json.projectName);\n\n       return tempGroup;\n     }\n   } else {\n     GroupObject = props.location.GroupObject;\n   }\n\n\n  // –––––––\n  //  State\n  // –––––––\n\n  const [aGroupObject, setGroupObject] = useState(GroupObject);\n  // const [fromLandingPage, setFromLandingPage] = useState(props.location.fromLandingPage);\n  // const [fromInputPage, setFromInputPage] = useState(props.location.fromInputPage);\n  const [aJson, setAjson] = useState(props.location.json);\n  const [editButtonClicked, setEditButtonClicked] = useState(false);\n  const [saveButtonClicked, setSaveButtonClicked] = useState(false);\n\n  const [isOpen, setIsOpen] = useState(false);\n\n  // Check console to see from which page is being received\n  // console.log(\"FROM LANDING:\", fromLandingPage);\n  // console.log(\"FROM INPUT:\", fromInputPage);\n\n\n  // ––––––––\n  // Behavior\n  // ––––––––\n\n  async function handleOnClickSave() {\n    console.log(\"SAVE BUTTON CLICKED...\");\n    //save to db by using utility component\n\n    const groups = new Group();\n\n    // groups.setProjectName(\"Project Safari\");\n    // groups.addPerson(new Person(\"Lion\", 1));\n    // groups.addPerson(new Person(\"Elephant\", 2));\n    // groups.addGroupNames(new GroupName(\"Section Danger\"));\n    // groups.addGroupNames(new GroupName(\"Section Safe\"));\n    groups.setProjectName(aGroupObject.projectName);\n    groups.persons = aGroupObject.persons;\n    groups.groupNames = aGroupObject.groupNames;\n    var myJSON = JSON.stringify(groups);  //aGroupObject\n\n    console.log(JSON.stringify(JSON.parse(myJSON), null, 2));\n\n    // let json = postRequest(myJSON).then(result => {\n    //   console.log(result);\n    //   return result;\n    // });\n    await call(myJSON);\n\n    setSaveButtonClicked(!saveButtonClicked);\n  }\n\n  async function call(myJSON) {\n     const json = await postRequest(myJSON);  //call the API to get the user data\n      if(json !== null) {\n        console.log(json);\n\n        setAjson(json);\n      } else {\n        console.log(\"No Project returned; Object:null\");\n      }\n  }\n\n  //when the edit button is clicked, setEditButtonClicked is set to true which triggers the conditional below function.\n  // function handleOnClickEdit(){\n  //   if(saveButtonClicked)\n  //     toggleModal();\n  //   else if (props.location.fromInputPage)\n  //     setEditButtonClicked(true);\n  //   else\n  //     toggleModal();\n\n  // }\n\n  // function toggleModal() {\n  //   setIsOpen(!isOpen);\n  // }\n\n\n  //–––––––––\n  //–– Modal\n  //–––––––––\n  const [password, setPassword] = useState(\"\");\n\n  function handleChange(event) {\n    const tempPassword = event.target.value;\n    setPassword(tempPassword);\n    event.preventDefault();\n  }\n\n  function handleSubmit(event) {\n    if (password === aJson.accessPassword)\n      setEditButtonClicked(true);\n    event.preventDefault();\n  }\n\n\n\n  // Checks and sends correct state data type to input page\n  if (editButtonClicked){\n    if (props.location.fromLandingPage) {\n      return <Redirect to={{pathname: '/grouper', json: aJson, fromResultPage: true, fromLandingPage: false, fromInputPage: false}}/>;\n    } else {\n      return <Redirect to={{pathname: '/grouper', GroupObject: aGroupObject, fromResultPage: true, fromLandingPage: false, fromInputPage: false}}/>;\n    }\n  }\n\n  // function displayModal() {\n  //   return(\n  //   <Modal\n  //     isOpen={isOpen}\n  //     onRequestClose={toggleModal}\n  //     contentLabel=\"My dialog\"\n  //     className=\"mymodal\"\n  //     overlayClassName=\"myoverlay\"\n  //     closeTimeoutMS={250}\n  //     shouldCloseOnOverlayClick={false}\n  //     >\n  //     <div className=\"projectIDText\">Project ID: {aJson.uniqueID}</div>\n  //     <div className=\"inputPasswordField\">\n  //       <form onSubmit={handleSubmit}>\n  //         <input\n  //           value={password}\n  //           onChange={handleChange}\n  //           type=\"text\"\n  //           name=\"AccessID\"\n  //           placeholder=\"Enter Passcode\"\n  //           className=\"textField\"\n  //           maxLength=\"7\" />\n  //         <button type=\"submit\" name=\"getResultsPage\" className=\"submit\">GO</button>\n  //       </form>\n  //     </div>\n  //     <button className=\"closeButton\" onClick={toggleModal}>Close</button>\n  //   </Modal>\n  //   );\n  // }\n\n  function resultsTitle() {\n    if (props.location.fromLandingPage || saveButtonClicked) {\n      return(\n        <ResultsTitle title={aGroupObject.projectName} accessID={aJson.uniqueID} useJson={true}/>\n      )\n    }\n    else {\n      return(\n        <ResultsTitle title={aGroupObject.projectName} useJson={false}/>\n      )\n    }\n  }\n\n\n  return (\n      <div className=\"page-wrapper\">\n        <header>\n          <Nav />\n          {resultsTitle()}\n        </header>\n        <main id=\"entry-container\">\n          <ResultDisplay groupObject={aGroupObject}/>\n        </main>\n          <Footer\n            // value=\"Save\"\n            fromInputPage={props.location.fromInputPage}  /* need fromLandingPage boolean */\n            fromLandingPage={props.location.fromLandingPage}\n            saveButtonClicked={saveButtonClicked}\n            onClickEdit={handleOnClickEdit}\n            onClickSave={handleOnClickSave}/>\n          {/* {(props.location.fromLandingPage || saveButtonClicked) ? displayModal() : null} */}\n\n      </div>\n\n  );\n\n}\n\nexport default ResultsPage;\n"]},"metadata":{},"sourceType":"module"}