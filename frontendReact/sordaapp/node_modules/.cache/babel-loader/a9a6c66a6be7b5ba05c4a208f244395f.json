{"ast":null,"code":"var _jsxFileName = \"/Users/kenlyberkowitz/Documents/Working_Folder/express-projects/randomized-distribution-app/frontendReact/sordaapp/src/components/GroupSection/GroupSection.js\";\nimport React, { Component } from 'react';\nimport './GroupSection.css';\nimport NewGroupButton from '../NewGroupButton/NewGroupButton';\nimport GroupCard from '../GroupCard/GroupCard';\nimport { nanoid } from 'nanoid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class GroupSection extends Component {\n  constructor(props) {\n    super(props);\n\n    this.removeGroup = index => {\n      console.log(\"Removing Group...\");\n      console.log(\"Index:\", index); // Targeting element\n\n      const groups = this.state.groups; // console.log(\"ID:\", groups[e]);\n\n      const target = groups[index];\n      console.log(\"TARGET:\", target);\n      groups.splice(index, 1);\n      console.log(groups);\n      this.setState({\n        groups: groups\n      });\n    };\n\n    this.changeName = group => {\n      console.log('changing name...');\n      const name = group.groupName;\n      console.log(name);\n      const groups = this.state.groups;\n      console.log('current groups:', groups); // this.setState({groups: groups})\n    };\n\n    this.state = {\n      max: 8,\n      min: 2,\n      projectName: \"\",\n      groups: []\n    };\n    this.createNewGroup = this.createNewGroup.bind(this);\n    this.addGroup = this.addGroup.bind(this);\n    this.generateGroups = this.generateGroups.bind(this);\n  } //  LIFECYCLE -------------------------------------------------\n\n\n  componentDidMount() {// this.renderGroupMenuButtons();\n  } // EVENT HANDLERS ---------------------------------------------\n\n\n  createNewGroup() {\n    console.log(\"CREATING NEW GROUP...\");\n    const groups = this.state.groups;\n    const length = groups.length;\n    const id = length;\n    const groupName = \"Group \" + (length + 1);\n    const key = nanoid();\n    const group = {\n      groupName: groupName,\n      key: key\n    };\n    console.log('NEW GROUP:', group);\n    return group;\n  } // Add entry to state's group array\n\n\n  addGroup() {\n    console.log(\"ADDING NEW GROUP...\");\n    const groups = this.state.groups;\n    const group = this.createNewGroup();\n    groups.push(group);\n    console.log('GROUPS ARRAY:', groups);\n    this.setState({\n      groups: groups\n    });\n  } // Add multiple entries to group array from MODAL INPUT\n\n\n  generateGroups(e) {\n    console.log(\"Generating multiple groups...\");\n    let qty = e.target.innerText; // let groups = this.state.groups;\n    // let showAddButton = this.state.showAddButton;\n    // showAddButton = false;\n    // Populate the groups array with chosen number of entries\n\n    for (let i = 0; i < qty; i++) {\n      this.addGroup();\n    } // this.setState({\n    //     groups: groups,\n    //     showGroupMenu: showGroupMenu\n    // });\n\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"group-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"group-section-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"group-header-caption\",\n          children: \"Groups\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this), this.state.groups.length < this.state.max ? /*#__PURE__*/_jsxDEV(NewGroupButton, {\n          onClick: this.addGroup\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 29\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 31\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"group-items-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"groups-display-wrapper\",\n          children: this.state.groups.map((group, index) => /*#__PURE__*/_jsxDEV(GroupCard, {\n            title: group.groupName,\n            handleChange: () => this.changeName(group),\n            delete: () => this.removeGroup(index)\n          }, group.key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/kenlyberkowitz/Documents/Working_Folder/express-projects/randomized-distribution-app/frontendReact/sordaapp/src/components/GroupSection/GroupSection.js"],"names":["React","Component","NewGroupButton","GroupCard","nanoid","GroupSection","constructor","props","removeGroup","index","console","log","groups","state","target","splice","setState","changeName","group","name","groupName","max","min","projectName","createNewGroup","bind","addGroup","generateGroups","componentDidMount","length","id","key","push","e","qty","innerText","i","render","map"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './GroupSection.css';\nimport NewGroupButton from '../NewGroupButton/NewGroupButton';\nimport GroupCard from '../GroupCard/GroupCard';\nimport { nanoid } from 'nanoid';\n\n\nexport default class GroupSection extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            max: 8,\n            min: 2,\n            projectName: \"\",\n            groups: []\n        }\n\n        this.createNewGroup = this.createNewGroup.bind(this);\n        this.addGroup = this.addGroup.bind(this);\n        this.generateGroups = this.generateGroups.bind(this);\n    }    \n\n    //  LIFECYCLE -------------------------------------------------\n    componentDidMount() {\n        // this.renderGroupMenuButtons();\n    }\n\n    // EVENT HANDLERS ---------------------------------------------\n    createNewGroup() {\n        console.log(\"CREATING NEW GROUP...\");\n        const groups = this.state.groups;\n        const length  = groups.length;\n        const id = length;\n        const groupName = \"Group \" + (length + 1);\n        const key = nanoid();\n        const group = { \n            groupName: groupName,\n            key: key\n        }\n        console.log('NEW GROUP:', group);\n        return group;\n    }\n\n    // Add entry to state's group array\n    addGroup() {\n        console.log(\"ADDING NEW GROUP...\");\n        const groups = this.state.groups;\n        const group = this.createNewGroup();\n        groups.push(group);\n        console.log('GROUPS ARRAY:', groups);\n        this.setState({groups: groups});\n    }\n\n    // Add multiple entries to group array from MODAL INPUT\n    generateGroups(e) {\n        console.log(\"Generating multiple groups...\");\n        let qty = e.target.innerText;\n        // let groups = this.state.groups;\n        // let showAddButton = this.state.showAddButton;\n        // showAddButton = false;\n\n        // Populate the groups array with chosen number of entries\n        for (let i=0; i<qty; i++) {\n            this.addGroup();\n        }\n\n        // this.setState({\n        //     groups: groups,\n        //     showGroupMenu: showGroupMenu\n        // });\n    }\n\n    removeGroup = index => {\n        console.log(\"Removing Group...\");\n        console.log(\"Index:\", index);\n\n        // Targeting element\n        const groups = this.state.groups;\n        // console.log(\"ID:\", groups[e]);\n        const target = groups[index];\n        console.log(\"TARGET:\", target);\n\n        groups.splice(index, 1);\n        console.log(groups);\n\n        this.setState({groups: groups});\n    }\n\n    changeName = group => {\n        console.log('changing name...');\n        const name = group.groupName;\n        console.log(name);\n        const groups = this.state.groups;\n        console.log('current groups:', groups);\n        // this.setState({groups: groups})\n    }\n\n    render() {\n        return (\n            <div className=\"group-section\">\n\n                <header className=\"group-section-header\">\n                    <div className=\"group-header-caption\">Groups</div>\n                    {this.state.groups.length < this.state.max ? \n                            <NewGroupButton onClick={this.addGroup} /> \n                            : <div></div>\n                        }\n                </header>\n\n                <div className=\"group-items-container\">\n                    <div id=\"groups-display-wrapper\">\n                        {this.state.groups.map((group, index) => \n                            <GroupCard \n                                key={group.key} \n                                title={group.groupName}\n                                handleChange={() => this.changeName(group)}\n                                delete={() => this.removeGroup(index)} />\n                        )}\n                    </div>\n                </div>   \n                    \n            </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}