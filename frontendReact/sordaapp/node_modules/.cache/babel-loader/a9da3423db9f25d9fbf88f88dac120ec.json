{"ast":null,"code":"var _jsxFileName = \"/Users/victorsanchez/Documents/programming/git/randomized-distribution-app/frontendReact/sordaapp/src/components/RosterSection/RosterSection.js\";\nimport React, { Component } from 'react';\nimport './RosterSection.css';\nimport RosterItem from '../RosterItem/RosterItem';\nimport NewItemButton from '../NewItemButton/NewItemButton';\nimport { nanoid } from 'nanoid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass RosterSection extends Component {\n  constructor(props) {\n    super(props);\n\n    this.removeItem = index => {\n      console.log(\"Removing Roster Item...\");\n      console.log(\"Index:\", index); // Targeting element\n\n      const roster = this.state.roster; // console.log(\"ID:\", groups[e]);\n\n      const target = roster[index];\n      console.log(\"TARGET:\", target);\n      roster.splice(index, 1);\n      console.log(roster);\n      this.setState({\n        roster: roster\n      });\n    };\n\n    this.changeName = item => {\n      console.log('changing name...');\n      const description = item.description;\n      console.log(description);\n      const roster = this.state.roster;\n      console.log('current groups:', roster); // this.setState({groups: groups})\n    };\n\n    this.state = {\n      rosterMax: 40,\n      rosterMin: 2,\n      // OR min. should be at least the number of groups created...\n      // menuRange: [],\n      showRoster: true,\n      // selectValue: null,\n      roster: [// {key: null, name: \"Kenly\", group: 1},\n        // {key: null, name: \"Victor\", group: 2}\n      ]\n    };\n    this.generateRoster = this.generateRoster.bind(this);\n    this.createNewItem = this.createNewItem.bind(this);\n    this.addItem = this.addItem.bind(this);\n  } //  LIFECYCLE METHODS  -------------------------------------------------\n  // componentDidMount() {\n  // }\n  // //  EVENT HANDLERS  -------------------------------------------------\n  // handleChange(event) {\n  //     this.setState({selectValue: event.target.value});\n  // }\n  // handleSubmit(event) {\n  //     alert('You chose: ' + this.state.selectValue);\n  //     event.preventDefault();\n  //     this.generateItems(this.state.selectValue);\n  // }\n  // // CREATE GENERIC LIST ITEMS BASED ON CHOSEN MENU SELECT OPTION \n  // generateItems(num) {\n  //     console.log('Generate roster list based on...', num);\n  //     let roster = [];    // Reset the roster items array\n  //     let showRoster = this.state.showRoster;\n  //     // Populate the roster array with chosen number of entries\n  //     for (let i=0; i<num; i++) {\n  //         let genericName = \"Item \" + (i + 1);\n  //         let key = nanoid();\n  //         let item = {                // TO DO:  Replace with formatted class?\n  //             description: genericName,\n  //             key : key,\n  //             group: null\n  //         }\n  //         roster.push(item);\n  //     }\n  //     this.setState({\n  //         roster: roster\n  //     });\n  // }\n\n\n  createNewItem() {\n    console.log('Add Roster Item...');\n    let roster = this.state.roster;\n    let length = roster.length;\n    console.log(\"ROSTER LENGTH:\", length);\n    let item = {\n      key: nanoid(),\n      description: 'Item ' + (length + 1)\n    };\n    return item;\n  } // Add entry to state's group array\n\n\n  addItem() {\n    console.log(\"ADDING NEW ROSTER ITEM...\");\n    const roster = this.state.roster;\n    const item = this.createNewItem();\n    roster.push(item);\n    console.log('ROSTER ARRAY:', roster);\n    this.setState({\n      roster: roster\n    });\n  } // Add multiple entries to group array from MODAL INPUT\n\n\n  generateRoster(e) {\n    console.log(\"Generating multiple roster items...\");\n    let qty = e.target.innerText; // let groups = this.state.groups;\n    // let showAddButton = this.state.showAddButton;\n    // showAddButton = false;\n    // Populate the groups array with chosen number of entries\n\n    for (let i = 0; i < qty; i++) {\n      this.addItem();\n    } // this.setState({\n    //     groups: groups,\n    //     showGroupMenu: showGroupMenu\n    // });\n\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"roster-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"roster-section-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"roster-header-caption\",\n          children: [\"Roster/Items: \", this.state.roster.length > 0 ? this.state.roster.length : null]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 21\n        }, this), this.state.roster.length < this.state.rosterMax ? /*#__PURE__*/_jsxDEV(NewItemButton, {\n          onClick: this.addItem\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 29\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"roster-items-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"roster-display-wrapper\",\n          children: this.state.roster.map((item, index) => /*#__PURE__*/_jsxDEV(RosterItem, {\n            description: item.description,\n            handleChange: () => this.changeName(item),\n            delete: () => this.removeItem(index)\n          }, item.key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default RosterSection;","map":{"version":3,"sources":["/Users/victorsanchez/Documents/programming/git/randomized-distribution-app/frontendReact/sordaapp/src/components/RosterSection/RosterSection.js"],"names":["React","Component","RosterItem","NewItemButton","nanoid","RosterSection","constructor","props","removeItem","index","console","log","roster","state","target","splice","setState","changeName","item","description","rosterMax","rosterMin","showRoster","generateRoster","bind","createNewItem","addItem","length","key","push","e","qty","innerText","i","render","map"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './RosterSection.css';\nimport RosterItem from '../RosterItem/RosterItem';\nimport NewItemButton from '../NewItemButton/NewItemButton';\nimport { nanoid } from 'nanoid';\n\nclass RosterSection extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            rosterMax: 40,\n            rosterMin: 2,  // OR min. should be at least the number of groups created...\n            // menuRange: [],\n            showRoster: true,\n            // selectValue: null,\n            roster: [\n                // {key: null, name: \"Kenly\", group: 1},\n                // {key: null, name: \"Victor\", group: 2}\n            ]\n        }\n\n        this.generateRoster = this.generateRoster.bind(this);\n        this.createNewItem = this.createNewItem.bind(this);\n        this.addItem = this.addItem.bind(this);\n    }    \n\n    //  LIFECYCLE METHODS  -------------------------------------------------\n    // componentDidMount() {\n\n    // }\n    \n    \n    // //  EVENT HANDLERS  -------------------------------------------------\n    // handleChange(event) {\n    //     this.setState({selectValue: event.target.value});\n    // }\n\n    // handleSubmit(event) {\n    //     alert('You chose: ' + this.state.selectValue);\n    //     event.preventDefault();\n    //     this.generateItems(this.state.selectValue);\n    // }\n\n    // // CREATE GENERIC LIST ITEMS BASED ON CHOSEN MENU SELECT OPTION \n    // generateItems(num) {\n    //     console.log('Generate roster list based on...', num);\n\n    //     let roster = [];    // Reset the roster items array\n    //     let showRoster = this.state.showRoster;\n\n    //     // Populate the roster array with chosen number of entries\n    //     for (let i=0; i<num; i++) {\n    //         let genericName = \"Item \" + (i + 1);\n    //         let key = nanoid();\n    //         let item = {                // TO DO:  Replace with formatted class?\n    //             description: genericName,\n    //             key : key,\n    //             group: null\n    //         }\n\n    //         roster.push(item);\n    //     }\n\n    //     this.setState({\n    //         roster: roster\n    //     });\n    // }\n    \n    \n    createNewItem() {\n        console.log('Add Roster Item...')\n        let roster = this.state.roster;\n        let length  = roster.length;\n        console.log(\"ROSTER LENGTH:\", length)\n        let item = {\n                key: nanoid(),\n                description : 'Item ' + (length + 1)\n        }\n        return item;\n    }\n\n   // Add entry to state's group array\n    addItem() {\n        console.log(\"ADDING NEW ROSTER ITEM...\");\n        const roster = this.state.roster;\n        const item = this.createNewItem();\n        roster.push(item);\n        console.log('ROSTER ARRAY:', roster);\n        this.setState({roster: roster});\n    }\n\n    // Add multiple entries to group array from MODAL INPUT\n    generateRoster(e) {\n        console.log(\"Generating multiple roster items...\");\n        let qty = e.target.innerText;\n        // let groups = this.state.groups;\n        // let showAddButton = this.state.showAddButton;\n        // showAddButton = false;\n\n        // Populate the groups array with chosen number of entries\n        for (let i=0; i<qty; i++) {\n            this.addItem();\n        }\n\n        // this.setState({\n        //     groups: groups,\n        //     showGroupMenu: showGroupMenu\n        // });\n    }\n\n    removeItem = index => {\n        console.log(\"Removing Roster Item...\");\n        console.log(\"Index:\", index);\n\n        // Targeting element\n        const roster = this.state.roster;\n        // console.log(\"ID:\", groups[e]);\n        const target = roster[index];\n        console.log(\"TARGET:\", target);\n\n        roster.splice(index, 1);\n        console.log(roster);\n\n        this.setState({roster: roster});\n    }\n\n    changeName = item => {\n        console.log('changing name...');\n        const description = item.description;\n        console.log(description);\n        const roster = this.state.roster;\n        console.log('current groups:', roster);\n        // this.setState({groups: groups})\n    }\n\n    \n    render() {\n        return (\n            <div className=\"roster-section\">\n\n                <header className=\"roster-section-header\">\n                    <div className=\"roster-header-caption\">\n                        Roster/Items: {(this.state.roster.length > 0) ?\n                            this.state.roster.length : null}\n                    </div>\n                    \n                    {(this.state.roster.length < this.state.rosterMax) ? \n                            <NewItemButton onClick={this.addItem} /> :\n                            <div></div>\n                        } \n                </header>\n\n                <div className=\"roster-items-container\">\n                    <div id=\"roster-display-wrapper\">\n                        {this.state.roster.map((item, index) => \n                            <RosterItem \n                                key={item.key}\n                                description={item.description}\n                                handleChange={() => this.changeName(item)}\n                                delete={() => this.removeItem(index)}/>\n                        )}\n                    </div>\n                </div>\n                \n            </div>\n        )\n    }\n }\nexport default RosterSection;"]},"metadata":{},"sourceType":"module"}