{"ast":null,"code":"var _jsxFileName = \"/Users/victorsanchez/Documents/programming/git/randomized-distribution-app/frontendReact/sordaapp/src/components/AppPages/InputPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport Nav from '../Nav/Nav';\nimport TitleBar from '../TitleBar/TitleBar';\nimport GroupSection from '../GroupSection/GroupSection';\nimport RosterSection from '../RosterSection/RosterSection';\nimport Footer from '../Footer/Footer';\nimport { Group, GroupName, Person } from '../../utils/groupClass';\nimport e from 'cors';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction InputPage() {\n  _s();\n\n  let GroupObject = new Group();\n  GroupObject.setProjectName(\"My Project\");\n  const [aGroupObject, setAGroupObject] = useState(GroupObject);\n  const [saveClick, setSaveClick] = useState(false); // Title Behavior  = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\n  const updateProjectName = title => {\n    // console.log('Updating Project Name: ' + title);\n    setAGroupObject(aGroupObject => ({ ...aGroupObject,\n      projectName: title\n    }));\n  }; // Group Section Behavior  = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\n\n  const addGroup = () => {\n    // console.log(\"addGroup clicked...\");\n    let tempGroupObject = aGroupObject;\n    let tempGroupNames = tempGroupObject.groupNames;\n    let newName = \"Group \" + (tempGroupNames.length + 1);\n    let newGroupName = new GroupName(newName, null);\n    tempGroupNames.push(newGroupName); // console.log(tempGroupNames);\n\n    setAGroupObject(aGroupObject => ({ ...aGroupObject,\n      groupNames: tempGroupNames\n    }));\n  };\n\n  const deleteGroup = e => {\n    let index = e.target.value; // console.log(\"Deleting Group... \", index);\n\n    let tempGroupObject = aGroupObject;\n    let newGroupNames = tempGroupObject.groupNames;\n    newGroupNames.splice(index, 1);\n    setAGroupObject(aGroupObject => ({ ...aGroupObject,\n      groupNames: newGroupNames\n    }));\n  };\n\n  const updateGroupTitle = (title, index) => {\n    // console.log(\"Upade Group Title:: \\nIndex:\", index, \"\\nValue:\", title);\n    let newGroupNames = aGroupObject.groupNames;\n    newGroupNames[index].name = title;\n    setAGroupObject(aGroupObject => ({ ...aGroupObject,\n      groupNames: newGroupNames\n    }));\n  }; // Roster Section Behavior  = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\n\n  const addItem = () => {\n    // console.log(\"addItem clicked...\");\n    // let tempGroupObject = aGroupObject;\n    let tempItemList = aGroupObject.persons;\n    let newItemName = \"item \" + (tempItemList.length + 1);\n    let newItem = new Person(newItemName, null);\n    tempItemList.push(newItem); // console.log(tempItemList);\n\n    setAGroupObject(aGroupObject => ({ ...aGroupObject,\n      persons: tempItemList\n    }));\n  };\n\n  const deleteItem = e => {\n    let index = e.target.value; // console.log(\"Deleting Roster Item... \", index);\n\n    let tempGroupObject = aGroupObject;\n    let newItemsList = tempGroupObject.persons;\n    newItemsList.splice(index, 1);\n    setAGroupObject(aGroupObject => ({ ...aGroupObject,\n      persons: newItemsList\n    }));\n  };\n\n  const updateItemName = (title, index) => {\n    // console.log(\"Update Roster Name:: \\nIndex:\", index, \"\\nValue:\", title);\n    let newItemsList = aGroupObject.persons;\n    newItemsList[index].name = title;\n    setAGroupObject(aGroupObject => ({ ...aGroupObject,\n      persons: newItemsList\n    }));\n  }; // Footer Button Handler Functions  = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\n\n  const shuffleArray = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n      // console.log('CYCLE', i);\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    } // console.log(array);  // shuffled results\n\n  };\n\n  const shuffleProject = () => {\n    console.log(\"shuffle clicked ...\"); // Check that qty of groups < qty of persons\n\n    let tempGroupObject = aGroupObject;\n    let groups = aGroupObject.groupNames;\n    let persons = aGroupObject.persons; // let assignedPersons = persons;  // copy of persons array\n\n    let numOfGroups = groups.length;\n    let numOfPersons = persons.length; // console.log(\"groups:\", numOfGroups);\n    // console.log(\"persons:\", numOfPersons);\n    // Initial input submission validity checks\n\n    if (numOfGroups === 0) {\n      alert(\"Shuffle cannot be performed with no groups. Please add more groups.\");\n      return;\n    }\n\n    if (numOfPersons === 0) {\n      alert(\"Shuffle cannot be performed with no roster items. Please add more roster items.\");\n      return;\n    }\n\n    if (numOfGroups > numOfPersons) {\n      alert(\"There must be more groups than roster items.\");\n      return;\n    } else {\n      // console.log(\"ok\");\n      shuffleArray(persons);\n    }\n\n    let count = numOfPersons;\n\n    do {\n      count--;\n      console.log(\"PERSON CYCLE\", count);\n      let person = persons[count];\n      console.log(\"PERSON:\", person);\n\n      for (let i = 0; i < numOfGroups; i++) {\n        let groupIndex = i;\n        console.log(\"GROUP CYCLE\");\n        console.log(\"GROUP:\", groups[groupIndex], \"\\nindex:\", groupIndex);\n        person.groupNum = groupIndex;\n      }\n    } while (count > 0); // console.log(persons);\n\n\n    tempGroupObject.persons = persons;\n    return tempGroupObject; // SAVE SHUFFLED DATA AS NEW GROUP OBJECT\n    // saveProject();\n    // PASS STATE TO  AND LOAD THE RESULTS PAGE\n    // return <Redirect push to={{ pathname: '/results', groupObject: aProjectState, fromInput=true }} />\n  };\n\n  const saveProject = () => {\n    console.log('saving ...');\n    let assignedResults = shuffleProject();\n    console.log('RESULTS:', assignedResults); // setSaveClick(true);\n    // let tempGroupObject = aGroupObject;\n    // tempGroupObject.projectName = aProjectName;\n    // tempGroupObject.groupNames = aGroupNames;\n    // // tempGroupObject.persons = aPersons;\n    // console.log('new object to save:', tempGroupObject);\n    // setAGroupObject(tempGroupObject);\n  };\n\n  const editProject = () => {\n    console.log('editProject clicked ...');\n  };\n\n  if (saveClick) {\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      push: true,\n      to: {\n        pathname: '/results',\n        GroupObject: aGroupObject,\n        isTrue: false\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(Nav, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TitleBar, {\n        title: aGroupObject.projectName,\n        updateTitle: updateProjectName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      id: \"entry-container\",\n      children: [/*#__PURE__*/_jsxDEV(GroupSection, {\n        groupNames: aGroupObject.groupNames,\n        addGroup: addGroup,\n        deleteGroup: deleteGroup,\n        updateGroupTitle: updateGroupTitle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(RosterSection, {\n        rosterItems: aGroupObject.persons,\n        addItem: addItem,\n        deleteItem: deleteItem,\n        updateItemName: updateItemName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {\n      GroupObject: aGroupObject,\n      onClickShuffle: shuffleProject,\n      onClickSave: saveProject,\n      onClickEdit: editProject\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 194,\n    columnNumber: 7\n  }, this);\n}\n\n_s(InputPage, \"w7ZejugFkgqbtPcqJvm4IG/1Ass=\");\n\n_c = InputPage;\nexport default InputPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"InputPage\");","map":{"version":3,"sources":["/Users/victorsanchez/Documents/programming/git/randomized-distribution-app/frontendReact/sordaapp/src/components/AppPages/InputPage.js"],"names":["React","useState","Redirect","Nav","TitleBar","GroupSection","RosterSection","Footer","Group","GroupName","Person","e","InputPage","GroupObject","setProjectName","aGroupObject","setAGroupObject","saveClick","setSaveClick","updateProjectName","title","projectName","addGroup","tempGroupObject","tempGroupNames","groupNames","newName","length","newGroupName","push","deleteGroup","index","target","value","newGroupNames","splice","updateGroupTitle","name","addItem","tempItemList","persons","newItemName","newItem","deleteItem","newItemsList","updateItemName","shuffleArray","array","i","j","Math","floor","random","temp","shuffleProject","console","log","groups","numOfGroups","numOfPersons","alert","count","person","groupIndex","groupNum","saveProject","assignedResults","editProject","pathname","isTrue"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport {Redirect} from 'react-router-dom';\nimport Nav from '../Nav/Nav';\nimport TitleBar from '../TitleBar/TitleBar';\nimport GroupSection from '../GroupSection/GroupSection';\nimport RosterSection from '../RosterSection/RosterSection';\nimport Footer from '../Footer/Footer';\nimport { Group, GroupName, Person } from '../../utils/groupClass';\nimport e from 'cors';\n\n\nfunction InputPage () {\n  let GroupObject = new Group();\n  GroupObject.setProjectName(\"My Project\");\n\n  const [aGroupObject, setAGroupObject] = useState(GroupObject);\n  const [saveClick, setSaveClick] = useState(false);\n\n\n  // Title Behavior  = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\n  const updateProjectName = title => {\n    // console.log('Updating Project Name: ' + title);\n    setAGroupObject(aGroupObject => ({...aGroupObject, projectName: title})); \n  }\n  \n\n  // Group Section Behavior  = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\n  const addGroup = () => {\n      // console.log(\"addGroup clicked...\");\n      let tempGroupObject = aGroupObject;\n      let tempGroupNames = tempGroupObject.groupNames;\n      let newName = \"Group \" + (tempGroupNames.length + 1); \n      let newGroupName = new GroupName(newName, null);\n\n      tempGroupNames.push(newGroupName);   \n      // console.log(tempGroupNames);\n\n      setAGroupObject(aGroupObject => ({...aGroupObject, groupNames: tempGroupNames}));\n  }\n\n  const deleteGroup = e => {\n    let index = e.target.value;\n    // console.log(\"Deleting Group... \", index);\n    let tempGroupObject = aGroupObject;\n    let newGroupNames = tempGroupObject.groupNames;\n\n    newGroupNames.splice(index, 1);\n    setAGroupObject(aGroupObject => ({...aGroupObject, groupNames: newGroupNames}));\n  }\n\n  const updateGroupTitle = (title, index) => {\n    // console.log(\"Upade Group Title:: \\nIndex:\", index, \"\\nValue:\", title);\n\n    let newGroupNames = aGroupObject.groupNames;\n    newGroupNames[index].name = title;\n\n    setAGroupObject(aGroupObject => ({...aGroupObject, groupNames: newGroupNames}));\n  }\n\n\n  // Roster Section Behavior  = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\n  const addItem = () => {\n      // console.log(\"addItem clicked...\");\n\n      // let tempGroupObject = aGroupObject;\n      let tempItemList = aGroupObject.persons;\n      let newItemName = \"item \" + (tempItemList.length + 1); \n      let newItem = new Person(newItemName, null);\n\n      tempItemList.push(newItem);   \n      // console.log(tempItemList);\n\n      setAGroupObject(aGroupObject => ({...aGroupObject, persons: tempItemList}));\n  }\n\n  const deleteItem = e => {\n    let index = e.target.value;\n    // console.log(\"Deleting Roster Item... \", index);\n    let tempGroupObject = aGroupObject;\n    let newItemsList = tempGroupObject.persons;\n\n    newItemsList.splice(index, 1);\n    setAGroupObject(aGroupObject => ({...aGroupObject, persons: newItemsList}));\n  }\n\n  const updateItemName = (title, index) => {\n    // console.log(\"Update Roster Name:: \\nIndex:\", index, \"\\nValue:\", title);\n\n    let newItemsList = aGroupObject.persons;\n    newItemsList[index].name = title;\n\n    setAGroupObject(aGroupObject => ({...aGroupObject, persons: newItemsList}));\n  }\n\n\n  // Footer Button Handler Functions  = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\n  const shuffleArray = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n      // console.log('CYCLE', i);\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n    // console.log(array);  // shuffled results\n  }\n  \n\n  const shuffleProject = () => {\n    console.log(\"shuffle clicked ...\");\n    // Check that qty of groups < qty of persons\n    let tempGroupObject = aGroupObject;\n    let groups = aGroupObject.groupNames;\n    let persons = aGroupObject.persons;\n    // let assignedPersons = persons;  // copy of persons array\n    let numOfGroups = groups.length;\n    let numOfPersons = persons.length;\n    // console.log(\"groups:\", numOfGroups);\n    // console.log(\"persons:\", numOfPersons);\n\n    // Initial input submission validity checks\n    if (numOfGroups === 0) {\n      alert(\"Shuffle cannot be performed with no groups. Please add more groups.\");\n      return;\n    }\n    if (numOfPersons === 0) {\n      alert(\"Shuffle cannot be performed with no roster items. Please add more roster items.\");\n      return;\n    }\n    if (numOfGroups > numOfPersons) {\n      alert(\"There must be more groups than roster items.\");\n      return;\n    } else {\n      // console.log(\"ok\");\n      shuffleArray(persons);\n    }\n\n    let count = numOfPersons;\n\n    do {\n      count--; \n      console.log(\"PERSON CYCLE\", count);\n      let person = persons[count];\n      console.log(\"PERSON:\", person);\n\n      for (let i=0; i<numOfGroups; i++) {\n        let groupIndex = i;\n        console.log(\"GROUP CYCLE\");\n        console.log(\"GROUP:\", groups[groupIndex], \"\\nindex:\", groupIndex);\n\n        person.groupNum = groupIndex;\n      }\n    } while (count > 0)\n    // console.log(persons);\n    tempGroupObject.persons = persons;\n    return tempGroupObject;\n    \n    // SAVE SHUFFLED DATA AS NEW GROUP OBJECT\n    // saveProject();\n    \n    // PASS STATE TO  AND LOAD THE RESULTS PAGE\n    // return <Redirect push to={{ pathname: '/results', groupObject: aProjectState, fromInput=true }} />\n  }\n\n  const saveProject = () => {\n    console.log('saving ...');\n    let assignedResults = shuffleProject();\n    console.log('RESULTS:', assignedResults);\n    // setSaveClick(true);\n    // let tempGroupObject = aGroupObject;\n\n    // tempGroupObject.projectName = aProjectName;\n    // tempGroupObject.groupNames = aGroupNames;\n    // // tempGroupObject.persons = aPersons;\n\n    // console.log('new object to save:', tempGroupObject);\n    // setAGroupObject(tempGroupObject);\n  }\n\n  const editProject = () => {\n    console.log('editProject clicked ...');\n    \n  }\n\n  if (saveClick) {\n    return <Redirect push to={{pathname: '/results', GroupObject: aGroupObject, isTrue: false}}/>;\n  }\n\n  return (\n      <div>\n        <header className=\"App-header\">\n          <Nav />\n          <TitleBar \n            title={aGroupObject.projectName} \n            updateTitle={updateProjectName} /> \n        </header>\n        <main id=\"entry-container\">\n          <GroupSection \n            groupNames={aGroupObject.groupNames}\n            addGroup={addGroup}\n            deleteGroup={deleteGroup}\n            updateGroupTitle={updateGroupTitle} />\n          <RosterSection \n            rosterItems={aGroupObject.persons}\n            addItem={addItem}\n            deleteItem={deleteItem}\n            updateItemName={updateItemName} />\n        </main>\n          <Footer \n            GroupObject={aGroupObject}\n            onClickShuffle={shuffleProject}\n            onClickSave={saveProject}\n            onClickEdit={editProject}\n            />\n      </div>\n    );\n  }\n\nexport default InputPage;\n"]},"metadata":{},"sourceType":"module"}