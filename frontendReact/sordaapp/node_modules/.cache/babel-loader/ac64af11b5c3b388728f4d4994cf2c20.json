{"ast":null,"code":"var _jsxFileName = \"/Users/victorsanchez/Documents/programming/git/randomized-distribution-app/frontendReact/sordaapp/src/components/AppPages/InputPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Nav from '../Nav/Nav';\nimport TitleBar from '../TitleBar/TitleBar';\nimport GroupSection from '../GroupSection/GroupSection';\nimport RosterSection from '../RosterSection/RosterSection';\nimport Footer from '../Footer/Footer';\nimport { Group } from '../../groupClass';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction InputPage() {\n  _s();\n\n  let GroupObject = new Group();\n  GroupObject.projectName = \"my Project\";\n  const [aGroupObject, setAGroupObject] = useState(GroupObject);\n  const [aProjectName, setAProjectName] = useState(GroupObject.projectName);\n  const [aGroupNames, setAGroupNames] = useState(GroupObject.groupNames);\n  const [showTitle, setShowTitle] = useState(true); // Emulate componentDidMount lifecycle(s)  = = = = = = = = = = = = = = = = = = = = =\n\n  useEffect(() => {\n    console.log(\"use effect group state\");\n  }, [aGroupObject]);\n  useEffect(() => {\n    console.log(\"use effect group names\");\n  }, [aGroupNames]);\n  useEffect(() => {\n    console.log(\"use effect project name\");\n  }, [aProjectName]); // Title Behavior  = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\n  let handleChange = event => {\n    console.log('Handling Change: ' + event.target.value); // this.setState({title: event.target.value});\n\n    setAProjectName(event.target.value);\n  };\n\n  let handleSubmit = event => {\n    console.log('Submitting title: ' + event.target.value); // event.preventDefault();\n    // props.setTitle\n\n    toggleTitle();\n  };\n\n  let toggleTitle = () => {\n    console.log(\"Toggling Title\");\n\n    if (showTitle) {\n      console.log(\"T -> F\");\n      setShowTitle(false); // this.setState({showTitle: false})\n    } else {\n      console.log(\"F -> T\");\n      setShowTitle(true); // this.setState({showTitle: true})\n    }\n\n    ;\n  }; // Group Section Behavior  = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\n\n  let handleGroupChange = event => {\n    console.log('workkk'); // this.setState({title: event.target.value});\n  };\n\n  let createNewGroup = () => {\n    let length = aGroupNames.length;\n    let name = \"Group \" + (length + 1);\n    console.log(name);\n    return name;\n  };\n\n  let addGroup = () => {\n    console.log(\"addGroup clicked...\");\n    let tempGroupNames = aGroupNames;\n    let newGroup = createNewGroup();\n    tempGroupNames.push(newGroup);\n    console.log(tempGroupNames);\n    setAGroupNames(tempGroupNames);\n  }; // Footer Button Handler  = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\n\n  let shuffleData = () => {\n    console.log(\"shuffle clicked...\"); // Shuffle Roster Items randomly\n    // Assign each roster item a group #\n    // Save shuffled data as new group object\n\n    saveProject(data); // return <Redirect push to={{ pathname: '/results', groupObject: aProjectState, fromInput=true }} />\n  };\n\n  let saveProject = () => {\n    console.log('saving shuffled project...');\n    let tempGroupObject = aGroupObject;\n    tempGroupObject.projectName = aProjectName;\n    tempGroupObject.groupNames = aGroupNames; // tempGroupObject.persons = aPersons;\n\n    console.log('new object to save:', tempGroupObject);\n    setAGroupObject(tempGroupObject);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(Nav, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(TitleBar, {\n        title: aProjectName,\n        setTitle: setAProjectName,\n        handleChange: handleChange,\n        handleSubmit: handleSubmit,\n        showTitle: showTitle,\n        toggleTitle: toggleTitle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      id: \"entry-container\",\n      children: [/*#__PURE__*/_jsxDEV(GroupSection, {\n        groupNames: aGroupNames,\n        addGroup: addGroup,\n        handleChange: handleGroupChange // setGroupNames={setAGroupNames}\n        // setGroupNames={(group) => setAGroupNames(group)} \n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(RosterSection, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {\n      GroupObject: {\n        GroupObject\n      },\n      value: \"Shuffle\",\n      text: \"Shuffle\",\n      onClick: shuffleData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 9\n  }, this);\n}\n\n_s(InputPage, \"5DiWKvrJeerG2No3A41emf3gcIQ=\");\n\n_c = InputPage;\nexport default InputPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"InputPage\");","map":{"version":3,"sources":["/Users/victorsanchez/Documents/programming/git/randomized-distribution-app/frontendReact/sordaapp/src/components/AppPages/InputPage.js"],"names":["React","useState","useEffect","Nav","TitleBar","GroupSection","RosterSection","Footer","Group","InputPage","GroupObject","projectName","aGroupObject","setAGroupObject","aProjectName","setAProjectName","aGroupNames","setAGroupNames","groupNames","showTitle","setShowTitle","console","log","handleChange","event","target","value","handleSubmit","toggleTitle","handleGroupChange","createNewGroup","length","name","addGroup","tempGroupNames","newGroup","push","shuffleData","saveProject","data","tempGroupObject"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Nav from '../Nav/Nav';\nimport TitleBar from '../TitleBar/TitleBar';\nimport GroupSection from '../GroupSection/GroupSection';\nimport RosterSection from '../RosterSection/RosterSection';\nimport Footer from '../Footer/Footer';\nimport { Group } from '../../groupClass';\n\n\nfunction InputPage () {\n  let GroupObject = new Group();\n  GroupObject.projectName = \"my Project\";\n\n  const [aGroupObject, setAGroupObject] = useState(GroupObject);\n  const [aProjectName, setAProjectName] = useState(GroupObject.projectName);\n  const [aGroupNames, setAGroupNames] = useState(GroupObject.groupNames);\n  \n  const [showTitle, setShowTitle] = useState(true);\n\n\n  // Emulate componentDidMount lifecycle(s)  = = = = = = = = = = = = = = = = = = = = =\n  \n  useEffect(() => {\n    console.log(\"use effect group state\");\n  }, [aGroupObject])\n\n  useEffect(() => {\n    console.log(\"use effect group names\");\n  }, [aGroupNames])\n\n  useEffect(() => {\n    console.log(\"use effect project name\");\n  }, [aProjectName])\n   \n\n  // Title Behavior  = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\n  let handleChange = (event) => {\n    console.log('Handling Change: ' + event.target.value);\n    // this.setState({title: event.target.value});\n    setAProjectName(event.target.value);\n  }\n  \n  let handleSubmit = (event) => {\n    console.log('Submitting title: ' + event.target.value);\n    // event.preventDefault();\n    // props.setTitle\n    toggleTitle();\n  }\n\n  let toggleTitle = () => {\n    console.log(\"Toggling Title\" );\n    if (showTitle) {\n        console.log(\"T -> F\");\n        setShowTitle(false);\n        // this.setState({showTitle: false})\n      } else {\n        console.log(\"F -> T\");\n        setShowTitle(true);\n        // this.setState({showTitle: true})\n      };\n  }\n\n\n  // Group Section Behavior  = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\n  let handleGroupChange = (event) => {\n    console.log('workkk');\n    // this.setState({title: event.target.value});\n  }\n\n  let createNewGroup = () => { \n    let length = aGroupNames.length;\n    let name = \"Group \" + (length + 1);\n    console.log(name);\n    return name;\n  }\n\n  let addGroup = () => {\n    console.log(\"addGroup clicked...\");\n\n    let tempGroupNames = aGroupNames;\n    let newGroup = createNewGroup();\n    tempGroupNames.push(newGroup);\n    console.log(tempGroupNames);\n\n    setAGroupNames(tempGroupNames);\n  }\n\n\n  // Footer Button Handler  = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n  \n  let shuffleData = () => {\n    console.log(\"shuffle clicked...\");\n    // Shuffle Roster Items randomly\n    \n    // Assign each roster item a group #\n    \n    // Save shuffled data as new group object\n    saveProject(data);\n    \n    // return <Redirect push to={{ pathname: '/results', groupObject: aProjectState, fromInput=true }} />\n  }\n\n  let saveProject = () => {\n    console.log('saving shuffled project...');\n    let tempGroupObject = aGroupObject;\n    tempGroupObject.projectName = aProjectName;\n    tempGroupObject.groupNames = aGroupNames;\n    // tempGroupObject.persons = aPersons;\n\n    console.log('new object to save:', tempGroupObject);\n    setAGroupObject(tempGroupObject);\n  }\n\n    return (\n        <div>\n          <header className=\"App-header\">\n            <Nav />\n\n            <TitleBar \n              title={aProjectName} \n              setTitle={setAProjectName}\n              handleChange={handleChange}\n              handleSubmit={handleSubmit}\n              showTitle={showTitle}\n              toggleTitle={toggleTitle} /> \n\n          </header>\n\n          <main id=\"entry-container\">\n            <GroupSection \n              groupNames={aGroupNames}\n              addGroup={addGroup}\n              handleChange={handleGroupChange}\n              // setGroupNames={setAGroupNames}\n              // setGroupNames={(group) => setAGroupNames(group)} \n              />\n              \n            <RosterSection />\n            \n          </main>\n\n          <Footer \n            GroupObject={{GroupObject}}\n            value=\"Shuffle\" \n            text=\"Shuffle\"\n            onClick={shuffleData} />\n        </div>\n    );\n  }\n\nexport default InputPage;\n"]},"metadata":{},"sourceType":"module"}