{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/kenlyberkowitz/Documents/Working_Folder/express-projects/randomized-distribution-app/frontendReact/sordaapp/src/components/AppPages/ResultPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Nav from '../Nav/Nav';\nimport ResultDisplay from '../ResultDisplay/ResultDisplay';\nimport Footer from '../Footer/Footer';\nimport ResultsTitle from '../ResultsTitle/ResultsTitle';\nimport { Group } from '../../utils/groupClass.js'; //watch out for utils. keep for merge\n\nimport { Redirect } from 'react-router-dom';\nimport { postRequest } from \"../../utils/queries.js\";\nimport \"./ModalPassword.css\";\nimport Modal from \"react-modal\";\nModal.setAppElement(\"#root\");\n\nfunction ResultsPage(props) {\n  _s();\n\n  let GroupObject = new Group();\n\n  if (props.location.fromLandingPage) {\n    GroupObject = () => {\n      let tempGroup = new Group();\n      tempGroup.persons = props.location.json.persons;\n      tempGroup.groupNames = props.location.json.groupNames;\n      tempGroup.setProjectName(props.location.json.projectName);\n      return tempGroup;\n    };\n  } else {\n    GroupObject = props.location.GroupObject;\n  } // –––––––\n  //  State\n  // –––––––\n\n\n  const [aGroupObject, setGroupObject] = useState(GroupObject); // const [fromLandingPage, setFromLandingPage] = useState(props.location.fromLandingPage);\n  // const [fromInputPage, setFromInputPage] = useState(props.location.fromInputPage);\n\n  const [aJson, setAjson] = useState(props.location.json);\n  const [editButtonClicked, setEditButtonClicked] = useState(false);\n  const [isOpen, setIsOpen] = useState(false); // Check console to see from which page is being received\n  // console.log(\"FROM LANDING:\", fromLandingPage);\n  // console.log(\"FROM INPUT:\", fromInputPage);\n  // ––––––––\n  // Behavior\n  // ––––––––\n\n  function handleOnClickSave() {\n    console.log(\"SAVE BUTTON CLICKED...\"); //save to db by using utility component\n\n    const groups = new Group(); // groups.setProjectName(\"Project Safari\");\n    // groups.addPerson(new Person(\"Lion\", 1));\n    // groups.addPerson(new Person(\"Elephant\", 2));\n    // groups.addGroupNames(new GroupName(\"Section Danger\"));\n    // groups.addGroupNames(new GroupName(\"Section Safe\"));\n\n    groups.setProjectName(aGroupObject.projectName);\n    groups.persons = aGroupObject.persons;\n    groups.groupNames = aGroupObject.groupNames;\n    var myJSON = JSON.stringify(groups); //aGroupObject\n\n    console.log(JSON.stringify(JSON.parse(myJSON), null, 2));\n    const json = postRequest(myJSON);\n    console.log(myJSON);\n    setAjson(json);\n  } //when the edit button is clicked, setEditButtonClicked is set to true which triggers the conditional below function.\n\n\n  function handleOnClickEdit() {\n    // console.log(\"EDIT BUTTON CLICKED...\");\n    toggleModal(); //setEditButtonClicked(true);\n  }\n\n  function toggleModal() {\n    setIsOpen(!isOpen);\n  } //–––––––––\n  //–– Modal\n  //–––––––––\n\n\n  const [password, setPassword] = useState();\n\n  function handleChange(event) {\n    const tempPassword = event.target.value;\n    setPassword(tempPassword);\n    event.preventDefault();\n  }\n\n  function handleSubmit(event) {\n    //getGroup();\n    event.preventDefault();\n  } // Checks and sends correct state data type to input page\n\n\n  if (editButtonClicked) {\n    if (props.location.fromLandingPage) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: {\n          pathname: '/grouper',\n          json: aJson,\n          fromResultPage: true,\n          fromLandingPage: false,\n          fromInputPage: false\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 14\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: {\n          pathname: '/grouper',\n          GroupObject: aGroupObject,\n          fromResultPage: true,\n          fromLandingPage: false,\n          fromInputPage: false\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 14\n      }, this);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: [/*#__PURE__*/_jsxDEV(Nav, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ResultsTitle, {\n        title: aGroupObject.projectName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      id: \"entry-container\",\n      children: /*#__PURE__*/_jsxDEV(ResultDisplay, {\n        groupObject: aGroupObject\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Footer // value=\"Save\"\n    , {\n      fromInputPage: props.location.fromInputPage\n      /* need fromLandingPage boolean */\n      ,\n      fromLandingPage: props.location.fromLandingPage,\n      onClickEdit: handleOnClickEdit,\n      onClickSave: handleOnClickSave\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isOpen,\n      onRequestClose: toggleModal,\n      contentLabel: \"My dialog\",\n      className: \"mymodal\",\n      overlayClassName: \"myoverlay\",\n      closeTimeoutMS: 250,\n      shouldCloseOnOverlayClick: false,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"projectIDText\",\n        children: [\"Project ID: \", aJson.uniqueID]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inputPasswordField\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            value: password,\n            onChange: handleChange,\n            type: \"text\",\n            name: \"AccessID\",\n            placeholder: \"Enter Passcode\",\n            className: \"textField\",\n            maxLength: \"7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            name: \"getResultsPage\",\n            className: \"submit\",\n            children: \"GO\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"closeButton\",\n        onClick: toggleModal,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 7\n  }, this);\n}\n\n_s(ResultsPage, \"VUQeGBuclCduxvo16pg0PrumZXY=\");\n\n_c = ResultsPage;\nexport default ResultsPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"ResultsPage\");","map":{"version":3,"sources":["/Users/kenlyberkowitz/Documents/Working_Folder/express-projects/randomized-distribution-app/frontendReact/sordaapp/src/components/AppPages/ResultPage.js"],"names":["React","useState","Nav","ResultDisplay","Footer","ResultsTitle","Group","Redirect","postRequest","Modal","setAppElement","ResultsPage","props","GroupObject","location","fromLandingPage","tempGroup","persons","json","groupNames","setProjectName","projectName","aGroupObject","setGroupObject","aJson","setAjson","editButtonClicked","setEditButtonClicked","isOpen","setIsOpen","handleOnClickSave","console","log","groups","myJSON","JSON","stringify","parse","handleOnClickEdit","toggleModal","password","setPassword","handleChange","event","tempPassword","target","value","preventDefault","handleSubmit","pathname","fromResultPage","fromInputPage","uniqueID"],"mappings":"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","sourcesContent":["\nimport React, { useState } from 'react';\nimport Nav from '../Nav/Nav';\nimport ResultDisplay from '../ResultDisplay/ResultDisplay';\nimport Footer from '../Footer/Footer';\nimport ResultsTitle from '../ResultsTitle/ResultsTitle';\nimport { Group } from '../../utils/groupClass.js';  //watch out for utils. keep for merge\nimport { Redirect } from 'react-router-dom';\nimport { postRequest } from \"../../utils/queries.js\";\n\nimport \"./ModalPassword.css\";\n\nimport Modal from \"react-modal\";\nModal.setAppElement(\"#root\");\n\n\nfunction ResultsPage(props) {\n\n  let GroupObject = new Group();\n\n  if (props.location.fromLandingPage) {\n    GroupObject = () => {\n       let tempGroup = new Group();\n       tempGroup.persons = props.location.json.persons;\n       tempGroup.groupNames = props.location.json.groupNames;\n       tempGroup.setProjectName(props.location.json.projectName);\n\n       return tempGroup;\n     }\n   } else {\n     GroupObject = props.location.GroupObject;\n   }\n\n\n  // –––––––\n  //  State\n  // –––––––\n\n  const [aGroupObject, setGroupObject] = useState(GroupObject);\n  // const [fromLandingPage, setFromLandingPage] = useState(props.location.fromLandingPage);\n  // const [fromInputPage, setFromInputPage] = useState(props.location.fromInputPage);\n  const [aJson, setAjson] = useState(props.location.json);\n  const [editButtonClicked, setEditButtonClicked] = useState(false);\n\n  const [isOpen, setIsOpen] = useState(false);\n\n  // Check console to see from which page is being received\n  // console.log(\"FROM LANDING:\", fromLandingPage);\n  // console.log(\"FROM INPUT:\", fromInputPage);\n\n\n  // ––––––––\n  // Behavior\n  // ––––––––\n\n  function handleOnClickSave() {\n    console.log(\"SAVE BUTTON CLICKED...\");\n    //save to db by using utility component\n\n    const groups = new Group();\n\n    // groups.setProjectName(\"Project Safari\");\n    // groups.addPerson(new Person(\"Lion\", 1));\n    // groups.addPerson(new Person(\"Elephant\", 2));\n    // groups.addGroupNames(new GroupName(\"Section Danger\"));\n    // groups.addGroupNames(new GroupName(\"Section Safe\"));\n    groups.setProjectName(aGroupObject.projectName);\n    groups.persons = aGroupObject.persons;\n    groups.groupNames = aGroupObject.groupNames;\n    var myJSON = JSON.stringify(groups);  //aGroupObject\n\n    console.log(JSON.stringify(JSON.parse(myJSON), null, 2));\n    const json = postRequest(myJSON);\n    console.log(myJSON);\n    setAjson(json);\n\n  }\n\n  //when the edit button is clicked, setEditButtonClicked is set to true which triggers the conditional below function.\n  function handleOnClickEdit(){\n    // console.log(\"EDIT BUTTON CLICKED...\");\n    toggleModal();\n    //setEditButtonClicked(true);\n  }\n\n  function toggleModal() {\n    setIsOpen(!isOpen);\n  }\n\n\n  //–––––––––\n  //–– Modal\n  //–––––––––\n  const [password, setPassword] = useState();\n  function handleChange(event) {\n    const tempPassword = event.target.value;\n    setPassword(tempPassword);\n    event.preventDefault();\n  }\n\n  function handleSubmit(event) {\n    //getGroup();\n    event.preventDefault();\n  }\n\n\n\n  // Checks and sends correct state data type to input page\n  if (editButtonClicked){\n    if (props.location.fromLandingPage) {\n      return <Redirect to={{pathname: '/grouper', json: aJson, fromResultPage: true, fromLandingPage: false, fromInputPage: false}}/>;\n    } else {\n      return <Redirect to={{pathname: '/grouper', GroupObject: aGroupObject, fromResultPage: true, fromLandingPage: false, fromInputPage: false}}/>;\n    }\n  }\n\n\n  return (\n      <div className=\"page-wrapper\">\n        <header>\n          <Nav />\n          <ResultsTitle title={aGroupObject.projectName}/>\n        </header>\n        <main id=\"entry-container\">\n          <ResultDisplay groupObject={aGroupObject}/>\n        </main>\n          <Footer\n            // value=\"Save\"\n            fromInputPage={props.location.fromInputPage}  /* need fromLandingPage boolean */\n            fromLandingPage={props.location.fromLandingPage}\n            onClickEdit={handleOnClickEdit}\n            onClickSave={handleOnClickSave}/>\n\n            <Modal\n              isOpen={isOpen}\n              onRequestClose={toggleModal}\n              contentLabel=\"My dialog\"\n              className=\"mymodal\"\n              overlayClassName=\"myoverlay\"\n              closeTimeoutMS={250}\n              shouldCloseOnOverlayClick={false}\n              >\n              <div className=\"projectIDText\">Project ID: {aJson.uniqueID}</div>\n              <div className=\"inputPasswordField\">\n                <form onSubmit={handleSubmit}>\n                  <input\n                    value={password}\n                    onChange={handleChange}\n                    type=\"text\"\n                    name=\"AccessID\"\n                    placeholder=\"Enter Passcode\"\n                    className=\"textField\"\n                    maxLength=\"7\" />\n                  <button type=\"submit\" name=\"getResultsPage\" className=\"submit\">GO</button>\n                </form>\n              </div>\n              <button className=\"closeButton\" onClick={toggleModal}>Close</button>\n            </Modal>\n      </div>\n\n  );\n\n}\n\nexport default ResultsPage;\n"]},"metadata":{},"sourceType":"module"}