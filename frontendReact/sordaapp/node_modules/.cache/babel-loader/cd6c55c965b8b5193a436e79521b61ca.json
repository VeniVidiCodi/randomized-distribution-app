{"ast":null,"code":"var _jsxFileName = \"/Users/victorsanchez/Documents/programming/git/randomized-distribution-app/frontendReact/sordaapp/src/components/RosterSection/RosterSection.js\";\nimport React, { Component } from 'react';\nimport './RosterSection.css';\nimport RosterItem from '../RosterItem/RosterItem';\nimport NewItemButton from '../NewItemButton/NewItemButton';\nimport { nanoid } from 'nanoid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass RosterSection extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rosterMax: 40,\n      rosterMin: 2,\n      // OR min. should be at least the number of groups created...\n      menuRange: [],\n      // keys: [],\n      showRoster: true,\n      roster: [{\n        key: '',\n        name: \"Kenly\",\n        group: 1\n      }, {\n        key: '',\n        name: \"Victor\",\n        group: 2\n      }]\n    };\n    this.renderSelectMenu = this.renderSelectMenu.bind(this);\n    this.generateItems = this.generateItems.bind(this);\n    this.generateKeys = this.generateKeys.bind(this);\n    this.addItem = this.addItem.bind(this);\n  } //  LIFECYCLE -------------------------------------------------\n\n\n  componentDidMount() {\n    this.renderSelectMenu();\n    this.generateKeys();\n    this.generateItems(this.state.roster.length);\n  }\n\n  generateKeys() {\n    console.log(\"GENERATING KEYS...\");\n    let keys = [];\n    let range = this.state.menuRange;\n    console.log(range);\n    let i = 0;\n\n    for (let item of range) {\n      let key = nanoid();\n      item.key = key;\n      item.value = i;\n      i++;\n      console.log(\"KEY: \" + item.key, \"\\n VALUE: \" + item.value);\n    } // console.log(\"Roster w/keys?\" + roster);\n\n\n    this.setState({\n      keys: keys\n    });\n  } // // Create the options list for dropdown select menu\n\n\n  renderSelectMenu() {\n    console.log('RENDERING DROPDOWN...'); // Loop through range of min/max to populate the menuRange array\n\n    let menuRange = [];\n    let min = this.state.rosterMin;\n    let max = this.state.rosterMax;\n\n    for (let i = min; i <= max; i++) {\n      let obj = {\n        key: null,\n        value: i\n      };\n      let j = i * 3;\n      obj.key = j;\n      menuRange.push(i); // console.log(menuRange);\n    }\n\n    this.setState({\n      menuRange: menuRange\n    });\n    console.log('MENU RANGE: ' + menuRange);\n  }\n\n  addItem() {\n    console.log('Add Roster Item...');\n    let index = this.state.roster.length;\n    let roster = this.state.roster;\n    let newIndex = index + 1;\n    let item = {\n      key: '',\n      name: 'Item' + newIndex,\n      group: ''\n    }; // Replace with class?\n\n    roster.push(item);\n    this.setState({\n      roster: roster\n    });\n  }\n\n  generateItems(num) {\n    console.log('Generate roster list base...'); // let num = e.target.innerText;\n\n    let roster = []; // Reset the roster items array\n\n    let showRoster = this.state.showRoster; // showRoster = false;   // Hide the dropdown menu\n    // Populate the roster array with chosen number of entries\n\n    for (let i = 0; i < num; i++) {\n      let genericName = \"Item \" + (i + 1);\n      let key = i + 10;\n      let item = {\n        name: genericName,\n        key: key\n      }; // Replace with class?\n\n      roster.push(item);\n    }\n\n    this.setState({\n      roster: roster,\n      showRoster: showRoster\n    }); // console.log(\"Roster generated:\", roster);\n  }\n\n  render() {\n    // console.log('result:' + this.state.roster.length)\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"roster-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"roster-nav\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"roster-header-caption \",\n          children: \"Roster/Items:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          name: \"roster\",\n          id: \"roster-select\",\n          children: this.state.menuRange.map(num => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: num,\n            children: num\n          }, num, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"roster-items-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"roster-display-wrapper\",\n          children: [this.state.roster.map(item => /*#__PURE__*/_jsxDEV(RosterItem, {\n            name: item.name\n          }, item.key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 29\n          }, this)), this.state.roster.length !== this.state.max ? /*#__PURE__*/_jsxDEV(NewItemButton, {\n            onClick: this.addItem\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 29\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default RosterSection;","map":{"version":3,"sources":["/Users/victorsanchez/Documents/programming/git/randomized-distribution-app/frontendReact/sordaapp/src/components/RosterSection/RosterSection.js"],"names":["React","Component","RosterItem","NewItemButton","nanoid","RosterSection","constructor","props","state","rosterMax","rosterMin","menuRange","showRoster","roster","key","name","group","renderSelectMenu","bind","generateItems","generateKeys","addItem","componentDidMount","length","console","log","keys","range","i","item","value","setState","min","max","obj","j","push","index","newIndex","num","genericName","render","map"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './RosterSection.css';\nimport RosterItem from '../RosterItem/RosterItem';\nimport NewItemButton from '../NewItemButton/NewItemButton';\nimport { nanoid } from 'nanoid';\n\nclass RosterSection extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            rosterMax: 40,\n            rosterMin: 2,  // OR min. should be at least the number of groups created...\n            menuRange: [],\n            // keys: [],\n            showRoster: true,\n            roster: [\n                {key:'', name: \"Kenly\", group: 1},\n                {key:'', name: \"Victor\", group: 2}\n            ]\n        }\n\n        this.renderSelectMenu = this.renderSelectMenu.bind(this);\n        this.generateItems = this.generateItems.bind(this);\n        this.generateKeys = this.generateKeys.bind(this);\n        this.addItem = this.addItem.bind(this);\n    }    \n\n     //  LIFECYCLE -------------------------------------------------\n    componentDidMount() {\n        this.renderSelectMenu();\n        this.generateKeys();\n        this.generateItems(this.state.roster.length);\n    }\n\n    generateKeys() {\n        console.log(\"GENERATING KEYS...\")\n\n        let keys = [];\n        let range = this.state.menuRange;\n        console.log(range);\n        let i = 0;\n        for (let item of range) {\n            let key = nanoid();\n            item.key = key;\n            item.value = i;\n            i++;\n            console.log(\"KEY: \" + item.key, \n                        \"\\n VALUE: \" + item.value);\n        }\n        // console.log(\"Roster w/keys?\" + roster);\n        this.setState({keys: keys});\n    }\n\n\n    // // Create the options list for dropdown select menu\n    renderSelectMenu() {\n        console.log('RENDERING DROPDOWN...');\n        // Loop through range of min/max to populate the menuRange array\n        let menuRange = [];\n        let min = this.state.rosterMin;\n        let max = this.state.rosterMax;\n        for (let i=min; i<=max; i++) {\n            let obj = {key:null, value:i};\n            let j = i * 3;\n            obj.key = j;\n            menuRange.push(i);\n            // console.log(menuRange);\n        }\n        this.setState({menuRange: menuRange});\n        console.log('MENU RANGE: ' + menuRange);\n    }\n\n    addItem() {\n        console.log('Add Roster Item...')\n        let index  = this.state.roster.length;\n        let roster = this.state.roster;\n        let newIndex = index + 1;\n        let item = {\n                        key: '',\n                        name : 'Item' + newIndex,\n                        group: ''\n                    }  // Replace with class?\n        roster.push(item);\n        this.setState({roster: roster});\n    }\n\n    generateItems(num) {\n        console.log('Generate roster list base...');\n        // let num = e.target.innerText;\n        let roster = [];    // Reset the roster items array\n        let showRoster = this.state.showRoster;\n        // showRoster = false;   // Hide the dropdown menu\n\n        // Populate the roster array with chosen number of entries\n        for (let i=0; i<num; i++) {\n            let genericName = \"Item \" + (i + 1);\n            let key = i + 10;\n            let item = {\n                name: genericName,\n                key : key\n            }   // Replace with class?\n            roster.push(item);\n        }\n\n        this.setState({\n            roster: roster,\n            showRoster: showRoster\n        });\n        // console.log(\"Roster generated:\", roster);\n    }\n\n    \n    render() {\n        // console.log('result:' + this.state.roster.length)\n        return (\n            <div className=\"roster-container\">\n                <header className=\"roster-nav\">\n                    <div className=\"roster-header-caption \">Roster/Items:</div>\n                    <select name=\"roster\" id=\"roster-select\">\n                        {this.state.menuRange.map((num) => \n                            <option key={num} value={num}>{num}</option>\n                        )}\n                    </select>\n                </header>\n\n                <div className=\"roster-items-container\">\n                    \n                    <div id=\"roster-display-wrapper\">\n\n                        {this.state.roster.map(item => \n                            <RosterItem \n                                key={item.key} \n                                name={item.name} />\n                        )}\n\n                        {(this.state.roster.length !== this.state.max) ? \n                            <NewItemButton onClick={this.addItem} /> :\n                            <div></div>\n                        } \n                        \n                    </div>\n                    \n                    {/* <div className=\"roster-item roster-item--display\">\n                        <div className=\"roster-item--text\">Item 1</div>\n                        <button className=\"roster-delete--button\">X</button>\n                    </div>\n                    <div className=\"roster-item roster-item--new\">\n                        <button className=\"roster-add--button\">+</button>\n                        <div className=\"roster-item--text\">Add Item</div>\n                    </div> */}\n                </div>\n            </div>\n        )\n    }\n }\nexport default RosterSection;"]},"metadata":{},"sourceType":"module"}