{"ast":null,"code":"var _jsxFileName = \"/Users/victorsanchez/Documents/programming/git/randomized-distribution-app/frontendReact/sordaapp/src/components/AppPages/InputPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Nav from '../Nav/Nav';\nimport TitleBar from '../TitleBar/TitleBar';\nimport GroupSection from '../GroupSection/GroupSection';\nimport RosterSection from '../RosterSection/RosterSection';\nimport Footer from '../Footer/Footer';\nimport { Group } from '../../groupClass'; // import { Redirect } from 'react-router';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction InputPage() {\n  _s();\n\n  let GroupObject = new Group();\n  const [aProjectState, setAProjectState] = useState(GroupObject);\n  console.log(aProjectState);\n  const [aProjectName, setAProjectName] = useState(aProjectState.projectName);\n  console.log(aProjectName);\n  const [aGroupNames, setAGroupNames] = useState(aProjectState.groupNames);\n  console.log(aGroupNames);\n  console.log(aProjectState); // console.log(\"GroupObject:\", GroupObject);\n  // console.log(\"aInput:\", aProjectState);\n\n  useEffect(() => {\n    // function to execute\n    console.log(\"useEffect triggered\\n\", setAProjectState); // what you want to change\n  }, [aProjectState]); // Group Section Behavior  = = = = = = = = = = = = = = = = = = = = =\n\n  let createNewGroup = () => {\n    let length = aGroupNames.length;\n    let name = \"Group\" + (length + 1);\n    console.log(name);\n    return name;\n  };\n\n  let addGroup = () => {\n    console.log(\"addGroup clicked...\");\n    let tempGroups = aGroupNames;\n    console.log(tempGroups);\n    const newGroup = createNewGroup();\n    tempGroups.push(newGroup);\n    console.log(tempGroups);\n    setAGroupNames(tempGroups);\n  };\n\n  let shuffleData = () => {\n    console.log(\"shuffle clicked...\"); // Shuffle Roster Items randomly\n    // Assign each roster item a group #\n    // Save shuffle data\n    // return <Redirect push to={{ pathname: '/results', groupObject: aProjectState, fromInput=true }} />\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(Nav, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(TitleBar, {\n        title: aProjectName,\n        setTitle: setAProjectName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      id: \"entry-container\",\n      children: [/*#__PURE__*/_jsxDEV(GroupSection, {\n        groupNames: aGroupNames,\n        setGroupNames: group => setAGroupNames(group),\n        addGroup: addGroup\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(RosterSection, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {\n      GroupObject: {\n        aProjectState\n      },\n      value: \"Shuffle\",\n      text: \"Shuffle\",\n      onClick: shuffleData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n}\n\n_s(InputPage, \"jewijbY9cECesUMy1+fmGkKrjog=\");\n\n_c = InputPage;\nexport default InputPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"InputPage\");","map":{"version":3,"sources":["/Users/victorsanchez/Documents/programming/git/randomized-distribution-app/frontendReact/sordaapp/src/components/AppPages/InputPage.js"],"names":["React","useState","useEffect","Nav","TitleBar","GroupSection","RosterSection","Footer","Group","InputPage","GroupObject","aProjectState","setAProjectState","console","log","aProjectName","setAProjectName","projectName","aGroupNames","setAGroupNames","groupNames","createNewGroup","length","name","addGroup","tempGroups","newGroup","push","shuffleData","group"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Nav from '../Nav/Nav';\nimport TitleBar from '../TitleBar/TitleBar';\nimport GroupSection from '../GroupSection/GroupSection';\nimport RosterSection from '../RosterSection/RosterSection';\nimport Footer from '../Footer/Footer';\nimport { Group } from '../../groupClass';\n// import { Redirect } from 'react-router';\n\n\n\nfunction InputPage () {\n  let GroupObject = new Group();\n  const [aProjectState, setAProjectState] = useState(GroupObject);\n  console.log(aProjectState);\n  const [aProjectName, setAProjectName] = useState(aProjectState.projectName);\n  console.log(aProjectName);\n  const [aGroupNames, setAGroupNames] = useState(aProjectState.groupNames);\n  console.log(aGroupNames);\n  console.log(aProjectState);\n  \n  // console.log(\"GroupObject:\", GroupObject);\n  // console.log(\"aInput:\", aProjectState);\n\n  useEffect(() => {\n    // function to execute\n    console.log(\"useEffect triggered\\n\", setAProjectState);\n      // what you want to change\n\n  }, [aProjectState])\n  \n\n  // Group Section Behavior  = = = = = = = = = = = = = = = = = = = = =\n\n  let createNewGroup = () => { \n    let length = aGroupNames.length;\n    let name = \"Group\" + (length + 1);\n    console.log(name);\n    return name;\n  }\n\n  let addGroup = () => {\n    console.log(\"addGroup clicked...\");\n\n    let tempGroups = aGroupNames;\n    console.log(tempGroups);\n    const newGroup = createNewGroup();\n    tempGroups.push(newGroup);\n    console.log(tempGroups);\n\n    setAGroupNames(tempGroups);\n  }\n\n\n  let shuffleData = () => {\n    console.log(\"shuffle clicked...\");\n    // Shuffle Roster Items randomly\n    // Assign each roster item a group #\n    // Save shuffle data\n\n    // return <Redirect push to={{ pathname: '/results', groupObject: aProjectState, fromInput=true }} />\n  }\n\n    return (\n        <div>\n          <header className=\"App-header\">\n            <Nav />\n            <TitleBar title={aProjectName} setTitle={setAProjectName} /> \n            \n          </header>\n          <main id=\"entry-container\">\n            <GroupSection \n              groupNames={aGroupNames}\n              setGroupNames={(group) => setAGroupNames(group)}\n              addGroup={addGroup}\n              \n              />\n            <RosterSection />\n          </main>\n          <Footer \n            GroupObject={{aProjectState}}\n            value=\"Shuffle\" \n            text=\"Shuffle\"\n            onClick={shuffleData} />\n        </div>\n    );\n  }\n\nexport default InputPage;\n"]},"metadata":{},"sourceType":"module"}