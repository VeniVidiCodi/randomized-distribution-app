{"ast":null,"code":"var _jsxFileName = \"/Users/victorsanchez/Documents/programming/git/randomized-distribution-app/frontendReact/sordaapp/src/components/AppPages/InputPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Nav from '../Nav/Nav';\nimport TitleBar from '../TitleBar/TitleBar';\nimport GroupSection from '../GroupSection/GroupSection';\nimport RosterSection from '../RosterSection/RosterSection';\nimport Footer from '../Footer/Footer';\nimport { Group, GroupName, Person } from '../../utils/groupClass';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction InputPage() {\n  _s();\n\n  let GroupObject = new Group();\n  GroupObject.setProjectName(\"My Project\"); // GroupObject.groupNames = ['food', 'music', 'decor'];\n\n  const [aGroupObject, setAGroupObject] = useState(GroupObject); // const [aProjectName, setAProjectName] = useState(GroupObject.projectName);\n\n  const [aGroupNames, setAGroupNames] = useState(GroupObject.groupNames); // const [aPersons, setAPersons] = useState(GroupObject.persons);\n  // const [showTitle, setShowTitle] = useState(true);\n  // Emulate componentDidMount lifecycle(s)  = = = = = = = = = = = = = = = = = = = = =\n  // useEffect(() => {\n  //     console.log(\"use effect group state\");\n  //     // updateTitle(\"My Project\");\n  //   // aGroupObject.setProjectName(\"bbb\");\n  // })\n  // useEffect(() => {\n  //   console.log(\"use effect project name\");\n  // }, [aProjectName])\n  // useEffect(() => {\n  //   console.log(\"use effect group names\");\n  // }, [aGroupNames])\n  // Title Behavior  = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n  // let handleChange = (event) => {\n  //   console.log('Handling Change: ' + event.target.value);\n  //   // this.setState({title: event.target.value});\n  //   setAProjectName(event.target.value);\n  // }\n  // let handleSubmit = (event) => {\n  //   console.log('Submitting title: ' + event.target.value);\n  //   // event.preventDefault();\n  //   // props.setTitle\n  //   toggleTitle();\n  // }\n  // let toggleTitle = () => {\n  //   console.log(\"Toggling Title\" );\n  //   if (showTitle) {\n  //       console.log(\"T -> F\");\n  //       setShowTitle(false);\n  //       // this.setState({showTitle: false})\n  //     } else {\n  //       console.log(\"F -> T\");\n  //       setShowTitle(true);\n  //       // this.setState({showTitle: true})\n  //     };\n  // }\n\n  let updateTitle = title => {\n    console.log('Updating Project Name: ' + title); // let tempGroupObj = aGroupObject;\n    // tempGroupObj.projectName = title;  \n    // console.log(tempGroupObj.projectName);\n\n    setAGroupObject(aGroupObject => ({ ...aGroupObject,\n      projectName: title\n    })); //This is finally working \n  }; // Group Section Behavior  = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n  // let handleGroupsChange = newGroupsArr => {\n  //   console.log('setNewGroupsArr:', newGroupsArr);\n  //   setAGroupNames(newGroupsArr); \n  // }\n  // let createNewGroup = () => { \n  //   let length = aGroupNames.length;\n  //   let name = \"Group \" + (length + 1);\n  //   console.log(name);\n  //   return name;\n  // }\n  // let addGroup = () => {\n  //   console.log(\"addGroup clicked...\");\n  //   let tempGroupNames = aGroupNames;\n  //   let newGroup = createNewGroup();\n  //   tempGroupNames.push(newGroup);\n  //   console.log(tempGroupNames);\n  //   setAGroupNames(tempGroupNames);\n  // }\n\n\n  let addGroup = () => {\n    console.log(\"addGroup clicked...\");\n    let tempGroupObject = aGroupObject;\n    let newName = \"Group \" + (aGroupNames.length + 1);\n    let newGroupName = new GroupName(newName);\n    tempGroupObject.groupNames.push(newGroupName); // the class Group method 'addGroupNames' doesn't work here and seems to be redundant\n\n    let newGroupNames = tempGroupObject.groupNames;\n    console.log(newGroupNames);\n    setAGroupObject(aGroupObject => ({ ...aGroupObject,\n      groupNames: newGroupNames\n    }));\n  };\n\n  let deleteGroup = index => {\n    console.log(\"Deleting Group... \", index);\n    let tempGroupObject = aGroupObject;\n    let groupNames = tempGroupObject.groupNames;\n    console.log(groupNames[index]); // groupNames.splice(index, 1);\n    // console.log(tempGroupObject.groupNames);\n  }; // Footer Button Handler  = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\n\n  let shuffleData = () => {\n    console.log(\"shuffle clicked...\"); // Shuffle Roster Items randomly\n    // Assign each roster item a group #\n    // Save shuffled data as new group object\n\n    saveProject(); // return <Redirect push to={{ pathname: '/results', groupObject: aProjectState, fromInput=true }} />\n  };\n\n  let saveProject = () => {\n    console.log('saving shuffled project...'); // let tempGroupObject = aGroupObject;\n    // tempGroupObject.projectName = aProjectName;\n    // tempGroupObject.groupNames = aGroupNames;\n    // // tempGroupObject.persons = aPersons;\n    // console.log('new object to save:', tempGroupObject);\n    // setAGroupObject(tempGroupObject);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(Nav, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(TitleBar, {\n        title: aGroupObject.projectName,\n        updateTitle: updateTitle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      id: \"entry-container\",\n      children: [/*#__PURE__*/_jsxDEV(GroupSection, {\n        groupNames: aGroupNames,\n        setGroupNames: setAGroupNames,\n        addGroup: addGroup,\n        deleteGroup: deleteGroup // handleChange={handleGroupChange}\n        // setGroupNames={(group) => setAGroupNames(group)} \n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(RosterSection, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {\n      GroupObject: aGroupObject,\n      value: \"Shuffle\",\n      text: \"Shuffle\",\n      onClick: shuffleData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 9\n  }, this);\n}\n\n_s(InputPage, \"zXslh8bmChvbTAHbl5SbKr95LUg=\");\n\n_c = InputPage;\nexport default InputPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"InputPage\");","map":{"version":3,"sources":["/Users/victorsanchez/Documents/programming/git/randomized-distribution-app/frontendReact/sordaapp/src/components/AppPages/InputPage.js"],"names":["React","useState","useEffect","Nav","TitleBar","GroupSection","RosterSection","Footer","Group","GroupName","Person","InputPage","GroupObject","setProjectName","aGroupObject","setAGroupObject","aGroupNames","setAGroupNames","groupNames","updateTitle","title","console","log","projectName","addGroup","tempGroupObject","newName","length","newGroupName","push","newGroupNames","deleteGroup","index","shuffleData","saveProject"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAOC,YAAP,MAAyB,8BAAzB;AACA,OAAOC,aAAP,MAA0B,gCAA1B;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,SAASC,KAAT,EAAgBC,SAAhB,EAA2BC,MAA3B,QAAwC,wBAAxC;;;AAGA,SAASC,SAAT,GAAsB;AAAA;;AACpB,MAAIC,WAAW,GAAG,IAAIJ,KAAJ,EAAlB;AACAI,EAAAA,WAAW,CAACC,cAAZ,CAA2B,YAA3B,EAFoB,CAGpB;;AAEA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCd,QAAQ,CAACW,WAAD,CAAhD,CALoB,CAMpB;;AACA,QAAM,CAACI,WAAD,EAAcC,cAAd,IAAgChB,QAAQ,CAACW,WAAW,CAACM,UAAb,CAA9C,CAPoB,CAQpB;AAEA;AAGA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAIC,WAAW,GAAGC,KAAK,IAAI;AACzBC,IAAAA,OAAO,CAACC,GAAR,CAAY,4BAA4BF,KAAxC,EADyB,CAEzB;AAEA;AACA;;AAEAL,IAAAA,eAAe,CAACD,YAAY,KAAK,EAAC,GAAGA,YAAJ;AAAkBS,MAAAA,WAAW,EAAEH;AAA/B,KAAL,CAAb,CAAf,CAPyB,CAOkD;AAC5E,GARD,CA5DoB,CAwEpB;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;;;AAGE,MAAII,QAAQ,GAAG,MAAM;AACjBH,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AAEA,QAAIG,eAAe,GAAGX,YAAtB;AACA,QAAIY,OAAO,GAAG,YAAYV,WAAW,CAACW,MAAZ,GAAqB,CAAjC,CAAd;AACA,QAAIC,YAAY,GAAG,IAAInB,SAAJ,CAAciB,OAAd,CAAnB;AAEAD,IAAAA,eAAe,CAACP,UAAhB,CAA2BW,IAA3B,CAAgCD,YAAhC,EAPiB,CAOiC;;AAClD,QAAIE,aAAa,GAAGL,eAAe,CAACP,UAApC;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYQ,aAAZ;AAEAf,IAAAA,eAAe,CAACD,YAAY,KAAK,EAAC,GAAGA,YAAJ;AAAkBI,MAAAA,UAAU,EAAEY;AAA9B,KAAL,CAAb,CAAf;AACH,GAZD;;AAaA,MAAIC,WAAW,GAAGC,KAAK,IAAI;AACzBX,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCU,KAAlC;AACA,QAAIP,eAAe,GAAGX,YAAtB;AACA,QAAII,UAAU,GAAGO,eAAe,CAACP,UAAjC;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYJ,UAAU,CAACc,KAAD,CAAtB,EAJyB,CAKzB;AACA;AACD,GAPD,CA/GkB,CAwHpB;;;AAEA,MAAIC,WAAW,GAAG,MAAM;AACtBZ,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EADsB,CAEtB;AAEA;AAEA;;AACAY,IAAAA,WAAW,GAPW,CAStB;AACD,GAVD;;AAYA,MAAIA,WAAW,GAAG,MAAM;AACtBb,IAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EADsB,CAEtB;AAEA;AACA;AACA;AAEA;AACA;AACD,GAVD;;AAYE,sBACI;AAAA,4BACE;AAAQ,MAAA,SAAS,EAAC,YAAlB;AAAA,8BACE,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAGE,QAAC,QAAD;AACE,QAAA,KAAK,EAAER,YAAY,CAACS,WADtB;AAEE,QAAA,WAAW,EAAEJ;AAFf;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAWE;AAAM,MAAA,EAAE,EAAC,iBAAT;AAAA,8BACE,QAAC,YAAD;AACE,QAAA,UAAU,EAAEH,WADd;AAEE,QAAA,aAAa,EAAEC,cAFjB;AAGE,QAAA,QAAQ,EAAEO,QAHZ;AAIE,QAAA,WAAW,EAAEO,WAJf,CAKE;AACA;;AANF;AAAA;AAAA;AAAA;AAAA,cADF,eAUE,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,cAVF;AAAA;AAAA;AAAA;AAAA;AAAA,YAXF,eAyBE,QAAC,MAAD;AACE,MAAA,WAAW,EAAEjB,YADf;AAEE,MAAA,KAAK,EAAC,SAFR;AAGE,MAAA,IAAI,EAAC,SAHP;AAIE,MAAA,OAAO,EAAEmB;AAJX;AAAA;AAAA;AAAA;AAAA,YAzBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAiCD;;GAnLMtB,S;;KAAAA,S;AAqLT,eAAeA,SAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Nav from '../Nav/Nav';\nimport TitleBar from '../TitleBar/TitleBar';\nimport GroupSection from '../GroupSection/GroupSection';\nimport RosterSection from '../RosterSection/RosterSection';\nimport Footer from '../Footer/Footer';\nimport { Group, GroupName, Person} from '../../utils/groupClass';\n\n\nfunction InputPage () {\n  let GroupObject = new Group();\n  GroupObject.setProjectName(\"My Project\");\n  // GroupObject.groupNames = ['food', 'music', 'decor'];\n\n  const [aGroupObject, setAGroupObject] = useState(GroupObject);\n  // const [aProjectName, setAProjectName] = useState(GroupObject.projectName);\n  const [aGroupNames, setAGroupNames] = useState(GroupObject.groupNames);\n  // const [aPersons, setAPersons] = useState(GroupObject.persons);\n  \n  // const [showTitle, setShowTitle] = useState(true);\n\n\n  // Emulate componentDidMount lifecycle(s)  = = = = = = = = = = = = = = = = = = = = =\n  \n  // useEffect(() => {\n  //     console.log(\"use effect group state\");\n  //     // updateTitle(\"My Project\");\n  \n  //   // aGroupObject.setProjectName(\"bbb\");\n    \n  // })\n\n  // useEffect(() => {\n  //   console.log(\"use effect project name\");\n  // }, [aProjectName])\n\n  // useEffect(() => {\n  //   console.log(\"use effect group names\");\n  // }, [aGroupNames])\n \n   \n  // Title Behavior  = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\n  // let handleChange = (event) => {\n  //   console.log('Handling Change: ' + event.target.value);\n  //   // this.setState({title: event.target.value});\n  //   setAProjectName(event.target.value);\n  // }\n  \n  // let handleSubmit = (event) => {\n  //   console.log('Submitting title: ' + event.target.value);\n  //   // event.preventDefault();\n  //   // props.setTitle\n  //   toggleTitle();\n  // }\n\n  // let toggleTitle = () => {\n  //   console.log(\"Toggling Title\" );\n  //   if (showTitle) {\n  //       console.log(\"T -> F\");\n  //       setShowTitle(false);\n  //       // this.setState({showTitle: false})\n  //     } else {\n  //       console.log(\"F -> T\");\n  //       setShowTitle(true);\n  //       // this.setState({showTitle: true})\n  //     };\n  // }\n\n  let updateTitle = title => {\n    console.log('Updating Project Name: ' + title);\n    // let tempGroupObj = aGroupObject;\n\n    // tempGroupObj.projectName = title;  \n    // console.log(tempGroupObj.projectName);\n\n    setAGroupObject(aGroupObject => ({...aGroupObject, projectName: title}));  //This is finally working \n  }\n  \n\n\n  // Group Section Behavior  = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\n  // let handleGroupsChange = newGroupsArr => {\n  //   console.log('setNewGroupsArr:', newGroupsArr);\n  //   setAGroupNames(newGroupsArr); \n  // }\n\n  // let createNewGroup = () => { \n  //   let length = aGroupNames.length;\n  //   let name = \"Group \" + (length + 1);\n  //   console.log(name);\n  //   return name;\n  // }\n\n  // let addGroup = () => {\n  //   console.log(\"addGroup clicked...\");\n\n  //   let tempGroupNames = aGroupNames;\n  //   let newGroup = createNewGroup();\n  //   tempGroupNames.push(newGroup);\n  //   console.log(tempGroupNames);\n\n  //   setAGroupNames(tempGroupNames);\n  // }\n\n\n    let addGroup = () => {\n        console.log(\"addGroup clicked...\");\n\n        let tempGroupObject = aGroupObject;\n        let newName = \"Group \" + (aGroupNames.length + 1); \n        let newGroupName = new GroupName(newName)\n\n        tempGroupObject.groupNames.push(newGroupName);    // the class Group method 'addGroupNames' doesn't work here and seems to be redundant\n        let newGroupNames = tempGroupObject.groupNames\n        console.log(newGroupNames);\n\n        setAGroupObject(aGroupObject => ({...aGroupObject, groupNames: newGroupNames}));\n    }\n    let deleteGroup = index => {\n      console.log(\"Deleting Group... \", index);\n      let tempGroupObject = aGroupObject;\n      let groupNames = tempGroupObject.groupNames;\n      console.log(groupNames[index]);\n      // groupNames.splice(index, 1);\n      // console.log(tempGroupObject.groupNames);\n    }\n\n  // Footer Button Handler  = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n  \n  let shuffleData = () => {\n    console.log(\"shuffle clicked...\");\n    // Shuffle Roster Items randomly\n    \n    // Assign each roster item a group #\n    \n    // Save shuffled data as new group object\n    saveProject();\n    \n    // return <Redirect push to={{ pathname: '/results', groupObject: aProjectState, fromInput=true }} />\n  }\n\n  let saveProject = () => {\n    console.log('saving shuffled project...');\n    // let tempGroupObject = aGroupObject;\n\n    // tempGroupObject.projectName = aProjectName;\n    // tempGroupObject.groupNames = aGroupNames;\n    // // tempGroupObject.persons = aPersons;\n\n    // console.log('new object to save:', tempGroupObject);\n    // setAGroupObject(tempGroupObject);\n  }\n\n    return (\n        <div>\n          <header className=\"App-header\">\n            <Nav />\n\n            <TitleBar \n              title={aGroupObject.projectName} \n              updateTitle={updateTitle}\n            /> \n\n          </header>\n\n          <main id=\"entry-container\">\n            <GroupSection \n              groupNames={aGroupNames}\n              setGroupNames={setAGroupNames}\n              addGroup={addGroup}\n              deleteGroup={deleteGroup}\n              // handleChange={handleGroupChange}\n              // setGroupNames={(group) => setAGroupNames(group)} \n              />\n              \n            <RosterSection />\n            \n          </main>\n\n          <Footer \n            GroupObject={aGroupObject}\n            value=\"Shuffle\" \n            text=\"Shuffle\"\n            onClick={shuffleData} />\n        </div>\n    );\n  }\n\nexport default InputPage;\n"]},"metadata":{},"sourceType":"module"}