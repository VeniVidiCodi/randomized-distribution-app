{"ast":null,"code":"var _jsxFileName = \"/Users/victorsanchez/Documents/programming/git/randomized-distribution-app/frontendReact/sordaapp/src/components/RosterSection/RosterSection.js\";\nimport React, { Component } from 'react';\nimport './RosterSection.css';\nimport RosterItem from '../RosterItem/RosterItem';\nimport NewItemButton from '../NewItemButton/NewItemButton';\nimport { nanoid } from 'nanoid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass RosterSection extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rosterMax: 40,\n      rosterMin: 2,\n      // OR min. should be at least the number of groups created...\n      menuRange: [],\n      showRoster: true,\n      selectValue: null,\n      roster: [// {key: null, name: \"Kenly\", group: 1},\n        // {key: null, name: \"Victor\", group: 2}\n      ]\n    };\n    this.renderSelectMenu = this.renderSelectMenu.bind(this);\n    this.generateItems = this.generateItems.bind(this); // this.generateKeys = this.generateKeys.bind(this);\n\n    this.addItem = this.addItem.bind(this);\n  } //  LIFECYCLE -------------------------------------------------\n\n\n  componentDidMount() {\n    this.renderSelectMenu(); // this.generateKeys();\n    // this.generateItems(this.state.roster);\n  } // Create the options list for dropdown select menu\n\n\n  renderSelectMenu() {\n    console.log('RENDERING DROPDOWN...'); // Loop through range of min/max to populate the menuRange array\n\n    let menuRange = []; // let min = this.state.rosterMin;\n\n    let max = this.state.rosterMax;\n\n    for (let i = 0; i <= max; i++) {\n      const key = nanoid();\n      const obj = {\n        key: key,\n        value: i\n      };\n      menuRange.push(obj);\n      console.log(menuRange);\n    }\n\n    this.setState({\n      menuRange: menuRange\n    }); // console.log('MENU RANGE: ' + menuRange);\n  } // generateKeys(num) {\n  //     console.log(\"GENERATING KEYS...\")\n  //     let keys = [];\n  //     let menuRange = this.state.menuRange;\n  //     console.log(\"RANGE:\", menuRange);\n  //     let i = 0;\n  //     for (let item of menuRange) {\n  //         let key = nanoid();\n  //         item.key = key;\n  //         item.value = i;\n  //         i++;\n  //         console.log(i + \"\\n KEY: \" + item.key, \n  //                     \"\\n VALUE: \" + item.value);\n  //     }\n  //     // console.log(\"Roster w/keys?\" + roster);\n  //     this.setState({keys: keys});\n  // }\n\n\n  generateItems(e) {\n    // REACT EXAMPLE\n    alert('Your # is: ' + e.target.value);\n    e.preventDefault();\n    console.log('Generate roster list base...');\n    let num = e.target.innerText;\n    let roster = []; // Reset the roster items array\n\n    let showRoster = this.state.showRoster; // showRoster = false;   // Hide the dropdown menu\n\n    console.log(\"NUM IS\", num); // Populate the roster array with chosen number of entries\n\n    for (let i = 0; i < num; i++) {\n      let genericName = \"Item \" + (i + 1); // let key = i + 10;\n\n      let key = nanoid();\n      let item = {\n        name: genericName,\n        key: key,\n        group: null\n      }; // Replace with class?\n\n      roster.push(item);\n    }\n\n    this.setState({\n      roster: roster // showRoster: showRoster\n\n    }); // console.log(\"Roster generated:\", roster);\n  }\n\n  addItem() {\n    console.log('Add Roster Item...');\n    let index = this.state.roster.length;\n    let roster = this.state.roster;\n    let newIndex = index + 1;\n    let item = {\n      key: nanoid(),\n      name: 'Item' + newIndex,\n      group: ''\n    }; // Replace with class?\n\n    roster.push(item);\n    this.setState({\n      roster: roster\n    });\n  }\n\n  render() {\n    // console.log('result:' + this.state.roster.length)\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"roster-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"roster-nav\",\n        onSubmit: this.generateItems,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"roster-header-caption\",\n          children: [\"Roster/Items:\", /*#__PURE__*/_jsxDEV(\"select\", {\n            name: \"roster\",\n            id: \"roster-select\",\n            value: this.state.value,\n            onChange: this.handleChange,\n            children: this.state.menuRange.map(num => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: num.value,\n              children: num.value\n            }, num.key, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"roster-items-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"roster-display-wrapper\",\n          children: [this.state.roster.map(item => /*#__PURE__*/_jsxDEV(RosterItem, {\n            name: item.name\n          }, item.key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 29\n          }, this)), this.state.roster.length < this.state.rosterMax ? /*#__PURE__*/_jsxDEV(NewItemButton, {\n            onClick: this.addItem\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 29\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default RosterSection;","map":{"version":3,"sources":["/Users/victorsanchez/Documents/programming/git/randomized-distribution-app/frontendReact/sordaapp/src/components/RosterSection/RosterSection.js"],"names":["React","Component","RosterItem","NewItemButton","nanoid","RosterSection","constructor","props","state","rosterMax","rosterMin","menuRange","showRoster","selectValue","roster","renderSelectMenu","bind","generateItems","addItem","componentDidMount","console","log","max","i","key","obj","value","push","setState","e","alert","target","preventDefault","num","innerText","genericName","item","name","group","index","length","newIndex","render","handleChange","map"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './RosterSection.css';\nimport RosterItem from '../RosterItem/RosterItem';\nimport NewItemButton from '../NewItemButton/NewItemButton';\nimport { nanoid } from 'nanoid';\n\nclass RosterSection extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            rosterMax: 40,\n            rosterMin: 2,  // OR min. should be at least the number of groups created...\n            menuRange: [],\n            showRoster: true,\n            selectValue: null,\n            roster: [\n                // {key: null, name: \"Kenly\", group: 1},\n                // {key: null, name: \"Victor\", group: 2}\n            ]\n        }\n\n        this.renderSelectMenu = this.renderSelectMenu.bind(this);\n        this.generateItems = this.generateItems.bind(this);\n        // this.generateKeys = this.generateKeys.bind(this);\n        this.addItem = this.addItem.bind(this);\n    }    \n\n    //  LIFECYCLE -------------------------------------------------\n    componentDidMount() {\n        this.renderSelectMenu();\n        // this.generateKeys();\n        // this.generateItems(this.state.roster);\n    }\n    \n    // Create the options list for dropdown select menu\n    renderSelectMenu() {\n        console.log('RENDERING DROPDOWN...');\n        // Loop through range of min/max to populate the menuRange array\n        let menuRange = [];\n        // let min = this.state.rosterMin;\n        let max = this.state.rosterMax;\n\n        for (let i=0; i<=max; i++) {\n            const key = nanoid();\n            const obj = {\n                key: key, \n                value: i\n            };\n            menuRange.push(obj);\n            console.log(menuRange);\n        }\n\n        this.setState({\n            menuRange: menuRange\n        });\n        // console.log('MENU RANGE: ' + menuRange);\n    }\n\n    // generateKeys(num) {\n    //     console.log(\"GENERATING KEYS...\")\n\n    //     let keys = [];\n    //     let menuRange = this.state.menuRange;\n    //     console.log(\"RANGE:\", menuRange);\n    //     let i = 0;\n    //     for (let item of menuRange) {\n    //         let key = nanoid();\n    //         item.key = key;\n    //         item.value = i;\n    //         i++;\n    //         console.log(i + \"\\n KEY: \" + item.key, \n    //                     \"\\n VALUE: \" + item.value);\n    //     }\n    //     // console.log(\"Roster w/keys?\" + roster);\n    //     this.setState({keys: keys});\n    // }\n\n\n\n    generateItems(e) {\n        // REACT EXAMPLE\n        alert('Your # is: ' + e.target.value);\n        e.preventDefault();\n\n        console.log('Generate roster list base...');\n        let num = e.target.innerText;\n        let roster = [];    // Reset the roster items array\n        let showRoster = this.state.showRoster;\n        // showRoster = false;   // Hide the dropdown menu\n        console.log(\"NUM IS\", num);\n\n        // Populate the roster array with chosen number of entries\n        for (let i=0; i<num; i++) {\n            let genericName = \"Item \" + (i + 1);\n            // let key = i + 10;\n            let key = nanoid();\n            let item = {\n                name: genericName,\n                key : key,\n                group: null\n            }   // Replace with class?\n            roster.push(item);\n        }\n\n        this.setState({\n            roster: roster\n            // showRoster: showRoster\n        });\n        // console.log(\"Roster generated:\", roster);\n    }\n\n    addItem() {\n        console.log('Add Roster Item...')\n        let index  = this.state.roster.length;\n        let roster = this.state.roster;\n        let newIndex = index + 1;\n        let item = {\n                        key: nanoid(),\n                        name : 'Item' + newIndex,\n                        group: ''\n                    }  // Replace with class?\n        roster.push(item);\n        this.setState({roster: roster});\n    }\n\n    \n    render() {\n        // console.log('result:' + this.state.roster.length)\n        return (\n            <div className=\"roster-container\">\n\n                {/* REACT FORMS SELECT EXAMPLE */}\n                <form className=\"roster-nav\" onSubmit={this.generateItems}>\n                    <label className=\"roster-header-caption\"> \n                        Roster/Items:\n                        <select name=\"roster\" id=\"roster-select\" value={this.state.value} onChange={this.handleChange}>\n                            {this.state.menuRange.map((num) => \n                                <option key={num.key} value={num.value}>{num.value}</option>\n                            )}\n                        </select>\n                    </label>\n                    <input type=\"submit\" value=\"Submit\" />\n                </form>\n\n                {/* INITIAL SETUP */}\n                {/* <header className=\"roster-nav\">\n                    <div className=\"roster-header-caption\">Roster/Items:</div>\n                    <select name=\"roster\" id=\"roster-select\" onChange={this.generateItems}>\n                        {this.state.menuRange.map((num) => \n                            <option key={num} value={num}>{num}</option>\n                        )}\n                    </select>\n                </header> */}\n\n                <div className=\"roster-items-container\">\n                    \n                    <div id=\"roster-display-wrapper\">\n\n                        {this.state.roster.map(item => \n                            <RosterItem \n                                key={item.key} \n                                name={item.name} />\n                        )}\n\n                        {(this.state.roster.length < this.state.rosterMax) ? \n                            <NewItemButton onClick={this.addItem} /> :\n                            <div></div>\n                        } \n                        \n                    </div>\n                    \n                    {/* <div className=\"roster-item roster-item--display\">\n                        <div className=\"roster-item--text\">Item 1</div>\n                        <button className=\"roster-delete--button\">X</button>\n                    </div>\n                    <div className=\"roster-item roster-item--new\">\n                        <button className=\"roster-add--button\">+</button>\n                        <div className=\"roster-item--text\">Add Item</div>\n                    </div> */}\n                </div>\n            </div>\n        )\n    }\n }\nexport default RosterSection;"]},"metadata":{},"sourceType":"module"}