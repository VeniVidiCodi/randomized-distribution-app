{"ast":null,"code":"var _jsxFileName = \"/Users/kenlyberkowitz/Documents/Working_Folder/express-projects/randomized-distribution-app/frontendReact/sordaapp/src/components/AppPages/ResultPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Nav from '../Nav/Nav';\nimport ResultDisplay from '../ResultDisplay/ResultDisplay';\nimport Footer from '../Footer/Footer';\nimport ResultsTitle from '../ResultsTitle/ResultsTitle';\nimport { Group, Person, GroupName } from '../../utils/groupClass.js'; //watch out for utils. keep for merge\n\nimport { Redirect } from 'react-router-dom';\nimport { nanoid } from 'nanoid';\nimport { getRequest, postRequest } from \"../../utils/queries.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ResultsPage(props) {\n  _s();\n\n  let GroupObject = new Group();\n\n  if (props.location.isTrue) {\n    GroupObject = () => {\n      let tempGroup = new Group();\n      tempGroup.persons = props.location.json.persons;\n      tempGroup.groupNames = props.location.json.groupNames;\n      tempGroup.setProjectName(props.location.json.projectName);\n      return tempGroup;\n    };\n  } else {\n    GroupObject = props.state.GroupObject;\n  } // –––––––\n  //  State\n  // –––––––\n\n\n  const [aGroupObject, setGroupObject] = useState(GroupObject);\n  const [fromLandingPage, setFromLandinPage] = useState(props.location.isTrue);\n  const [aJson, setAjson] = useState(props.location.json);\n  const [editButtonClicked, setEditButtonClicked] = useState(false);\n\n  function handleOnClickSave() {\n    console.log(\"SAVE BUTTON CLICKED...\"); //save to db by using utility component\n\n    const groups = new Group();\n    groups.setProjectName(\"Project Safari\");\n    groups.addPerson(new Person(\"Lion\", 1));\n    groups.addPerson(new Person(\"Elephant\", 2));\n    groups.addGroupNames(new GroupName(\"Section Danger\"));\n    groups.addGroupNames(new GroupName(\"Section Safe\"));\n    var myJSON = JSON.stringify(groups);\n    console.log(myJSON);\n    console.log(JSON.stringify(JSON.parse(myJSON), null, 2));\n    postRequest(myJSON);\n  }\n\n  function handleOnClickEdit() {\n    console.log(\"EDIT BUTTON CLICKED...\");\n    setEditButtonClicked(true);\n  } //checks to see if the the edit button is clicked and will redirect the page to inputPage and send state with it.\n\n\n  if (editButtonClicked) {\n    if (fromLandingPage) return /*#__PURE__*/_jsxDEV(Redirect, {\n      to: {\n        pathname: '/grouper',\n        GroupObject: aGroupObject,\n        isTrue: fromLandingPage\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 15\n    }, this);\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      to: {\n        pathname: '/grouper',\n        json: aJson,\n        isTrue: !fromLandingPage\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: [/*#__PURE__*/_jsxDEV(Nav, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ResultsTitle, {\n        title: aGroupObject.projectName\n      }, nanoid(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      id: \"entry-container\",\n      children: /*#__PURE__*/_jsxDEV(ResultDisplay, {\n        grpObject: aGroupObject\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {\n      value: \"Save\",\n      isTrue: false,\n      onClickEdit: handleOnClickEdit,\n      onClickSave: handleOnClickSave\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 7\n  }, this);\n}\n\n_s(ResultsPage, \"0vGJzG5Xp4G2SH5QgkKdlZ7W0bU=\");\n\n_c = ResultsPage;\nexport default ResultsPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"ResultsPage\");","map":{"version":3,"sources":["/Users/kenlyberkowitz/Documents/Working_Folder/express-projects/randomized-distribution-app/frontendReact/sordaapp/src/components/AppPages/ResultPage.js"],"names":["React","useState","Nav","ResultDisplay","Footer","ResultsTitle","Group","Person","GroupName","Redirect","nanoid","getRequest","postRequest","ResultsPage","props","GroupObject","location","isTrue","tempGroup","persons","json","groupNames","setProjectName","projectName","state","aGroupObject","setGroupObject","fromLandingPage","setFromLandinPage","aJson","setAjson","editButtonClicked","setEditButtonClicked","handleOnClickSave","console","log","groups","addPerson","addGroupNames","myJSON","JSON","stringify","parse","handleOnClickEdit","pathname"],"mappings":"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","sourcesContent":["\nimport React, { useState,  } from 'react';\nimport Nav from '../Nav/Nav';\nimport ResultDisplay from '../ResultDisplay/ResultDisplay';\nimport Footer from '../Footer/Footer';\nimport ResultsTitle from '../ResultsTitle/ResultsTitle';\nimport {Group, Person, GroupName} from '../../utils/groupClass.js';  //watch out for utils. keep for merge\nimport {Redirect} from 'react-router-dom';\nimport { nanoid } from 'nanoid';\nimport {getRequest, postRequest} from \"../../utils/queries.js\";\n\n\nfunction ResultsPage(props) {\n\n   let GroupObject = new Group();\n   if (props.location.isTrue) {\n      GroupObject = () => {\n         let tempGroup = new Group();\n         tempGroup.persons = props.location.json.persons;\n         tempGroup.groupNames = props.location.json.groupNames;\n         tempGroup.setProjectName(props.location.json.projectName);\n\n         return tempGroup;\n       }\n     } else {\n       GroupObject = props.state.GroupObject;\n     }\n\n   // –––––––\n   //  State\n   // –––––––\n   const [aGroupObject, setGroupObject] = useState(GroupObject);\n   const [fromLandingPage, setFromLandinPage] = useState(props.location.isTrue);\n   const [aJson, setAjson] = useState(props.location.json);\n   const [editButtonClicked, setEditButtonClicked] = useState(false)\n\n\n  function handleOnClickSave() {\n    console.log(\"SAVE BUTTON CLICKED...\");\n    //save to db by using utility component\n    const groups = new Group();\n\n    groups.setProjectName(\"Project Safari\");\n    groups.addPerson(new Person(\"Lion\", 1));\n    groups.addPerson(new Person(\"Elephant\", 2));\n    groups.addGroupNames(new GroupName(\"Section Danger\"));\n    groups.addGroupNames(new GroupName(\"Section Safe\"));\n    var myJSON = JSON.stringify(groups);\n\n    console.log(myJSON);\n    console.log(JSON.stringify(JSON.parse(myJSON), null, 2));\n    postRequest(myJSON);\n\n  }\n\n  function handleOnClickEdit(){\n    console.log(\"EDIT BUTTON CLICKED...\");\n    setEditButtonClicked(true);\n  }\n\n\n  //checks to see if the the edit button is clicked and will redirect the page to inputPage and send state with it.\n  if (editButtonClicked){\n    if (fromLandingPage)\n       return <Redirect to={{pathname: '/grouper', GroupObject: aGroupObject, isTrue: fromLandingPage}}/>;\n\n    return <Redirect to={{pathname: '/grouper', json: aJson, isTrue: !fromLandingPage}}/>;\n  }\n\n\n\n\n  return (\n      <div className=\"page-wrapper\">\n        <header>\n          <Nav />\n          <ResultsTitle key={nanoid()} title={aGroupObject.projectName}/>\n        </header>\n        <main id=\"entry-container\">\n          <ResultDisplay grpObject={aGroupObject}/>\n        </main>\n          <Footer\n            value=\"Save\"\n            isTrue={false}\n            onClickEdit={handleOnClickEdit}\n            onClickSave={handleOnClickSave}/>\n      </div>\n  );\n\n}\n\nexport default ResultsPage;\n"]},"metadata":{},"sourceType":"module"}